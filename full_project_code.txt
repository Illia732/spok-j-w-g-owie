=== ./tailwind.config.js ===
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      // 1. COLOR PALETTE - Apple/Revolut
      colors: {
        // Apple-inspired color palette
        background: '#FFFFFF',
        surface: '#F5F5F7',
        
        // Primary - Apple Blue
        primary: {
          50: '#F0F7FF',
          100: '#E0F2FE',
          200: '#BAE6FD',
          300: '#7DD3FC',
          400: '#38BDF8',
          500: '#0EA5E9',
          600: '#0284C7',
          700: '#0369A1',
          800: '#075985',
          900: '#0C4A6E',
          DEFAULT: '#007AFF',
        },
        
        // Revolut-inspired accents
        accent: {
          green: '#30D158',
          orange: '#FF9F0A',
          red: '#FF453A',
          purple: '#BF5AF2',
        },
        
        // Text colors
        text: {
          primary: '#1D1D1F',
          secondary: '#86868B', 
          tertiary: '#C2C2C7',
        }
      },

      // 2. TYPOGRAPHY SYSTEM
      fontFamily: {
        sans: [
          '-apple-system',
          'BlinkMacSystemFont',
          'Inter', 
          'SF Pro Text',
          'system-ui',
          'sans-serif',
        ],
      },
      fontSize: {
        'xs': ['0.75rem', { lineHeight: '1rem' }],
        'sm': ['0.875rem', { lineHeight: '1.25rem' }],
        'base': ['1rem', { lineHeight: '1.5rem' }],
        'lg': ['1.125rem', { lineHeight: '1.75rem' }],
        'xl': ['1.25rem', { lineHeight: '1.75rem' }],
        '2xl': ['1.5rem', { lineHeight: '2rem' }],
        '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
        '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
      },

      // 3. SPACING SYSTEM
      spacing: {
        '1': '0.25rem',
        '2': '0.5rem',
        '3': '0.75rem',
        '4': '1rem',
        '5': '1.25rem',
        '6': '1.5rem',
        '7': '1.75rem',
        '8': '2rem',
        '9': '2.25rem',
        '10': '2.5rem',
      },

      // 4. BORDER RADIUS
      borderRadius: {
        'sm': '0.5rem',
        'md': '0.75rem',
        'lg': '1rem',
        'xl': '1.5rem',
      },

      // 5. GLASS MORPHISM
      backdropBlur: {
        'xs': '2px',
      },
      boxShadow: {
        'glass': '0 8px 32px 0 rgba(31, 38, 135, 0.37)',
      }
    },
  },
  plugins: [],
}-e 

=== ./postcss.config.mjs ===
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
-e 

=== ./next.config.js ===
/** @type {import('next').NextConfig} */
const nextConfig = {
  transpilePackages: ['undici'],
  webpack: (config, { isServer }) => {
    // Transpiluj undici dla prywatnych pól (#)
    config.module.rules.push({
      test: /\.js$/,
      include: /node_modules[\\/]undici/,
      use: {
        loader: 'babel-loader',
        options: {
          presets: ['@babel/preset-env'],
        },
      },
    });
    
    return config;
  },
}

module.exports = nextConfig-e 

=== ./tailwind.config.ts ===
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}-e 

=== ./package.json ===
{
  "name": "spokoj-w-glowie",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@google/generative-ai": "^0.24.1",
    "@next/font": "^14.2.15",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-slider": "^1.0.4",
    "@radix-ui/react-slot": "^1.0.2",
    "@vercel/kv": "^3.0.0",
    "class-variance-authority": "^0.4.0",
    "clsx": "^2.1.1",
    "firebase": "^10.14.1",
    "firebase-admin": "^13.5.0",
    "framer-motion": "^10.16.4",
    "lodash": "^4.17.21",
    "lucide-react": "^0.294.0",
    "mapbox-gl": "^3.15.0",
    "next": "14.0.0",
    "openai": "^6.0.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-map-gl": "^7.1.9",
    "react-markdown": "^10.1.0",
    "react-quill": "^2.0.0",
    "recharts": "^3.2.1",
    "remark-gfm": "^4.0.1",
    "tailwind-merge": "^1.14.0"
  },
  "devDependencies": {
    "@babel/core": "^7.28.4",
    "@babel/preset-env": "^7.28.3",
    "@types/leaflet": "^1.9.20",
    "@types/node": "^20.0.0",
    "@types/react": "^18.3.25",
    "@types/react-dom": "^18.0.0",
    "autoprefixer": "^10.4.21",
    "babel-loader": "^10.0.0",
    "eslint": "^8.0.0",
    "eslint-config-next": "14.0.0",
    "tailwindcss": "^3.3.0",
    "typescript": "^5.0.0"
  }
}
-e 

=== ./tsconfig.json ===
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
-e 

=== ./postcss.config.js ===
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
}-e 

=== ./eslint.config.mjs ===
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
  {
    ignores: [
      "node_modules/**",
      ".next/**",
      "out/**",
      "build/**",
      "next-env.d.ts",
    ],
  },
];

export default eslintConfig;
-e 

=== ./src/types/user.ts ===
// src/types/user.ts
export interface UserProfile {
  uid: string
  email: string
  displayName: string
  bio?: string
  avatarUrl?: string
  userCode: string // 6-cyfrowy unikalny kod
  createdAt: Date
  updatedAt: Date
  moodEntries?: MoodEntry[]
  friends: string[] // array of userCodes
  friendRequests: FriendRequest[]
}

export interface FriendRequest {
  id: string
  fromUserId: string
  toUserId: string
  status: 'pending' | 'accepted' | 'rejected'
  createdAt: Date
}

export interface MoodEntry {
  id: string
  mood: number
  note?: string
  timestamp: Date
  date: string
}-e 

=== ./src/app/auth/register/page.tsx ===
// src/app/(auth)/register/page.tsx
'use client'
import { useState, useEffect } from 'react'
import { useAuth } from '@/components/providers/auth-provider'
import { authService } from '@/lib/auth-service'
import { useRouter } from 'next/navigation'
import Link from 'next/link'
import { Loader2 } from 'lucide-react'

export default function RegisterPage() {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    password: '',
    confirmPassword: ''
  })
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const router = useRouter()
  const { user, loading: authLoading } = useAuth()

  // Jeśli użytkownik jest już zalogowany, przekieruj do dashboard
  useEffect(() => {
    if (user && !authLoading) {
      router.push('/dashboard')
    }
  }, [user, authLoading, router])

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setFormData(prev => ({
      ...prev,
      [e.target.name]: e.target.value
    }))
  }

  const handleRegister = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    // Walidacja
    if (formData.password !== formData.confirmPassword) {
      setError('Hasła nie są identyczne')
      setLoading(false)
      return
    }

    if (formData.password.length < 6) {
      setError('Hasło musi mieć co najmniej 6 znaków')
      setLoading(false)
      return
    }

    try {
      await authService.register(
        formData.email, 
        formData.password, 
        {
          firstName: formData.firstName,
          lastName: formData.lastName
        }
      )
      // Przekierowanie nastąpi automatycznie przez AuthProvider
    } catch (error: any) {
      setError(error.message)
    } finally {
      setLoading(false)
    }
  }

  if (authLoading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-blue-500 mx-auto mb-4" />
          <p className="text-gray-600">Ładowanie...</p>
        </div>
      </div>
    )
  }

  if (user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-blue-500 mx-auto mb-4" />
          <p className="text-gray-600">Przekierowywanie...</p>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
      <div className="max-w-md w-full space-y-8">
        <div className="bg-white rounded-2xl shadow-xl p-8">
          <div className="text-center mb-8">
            <div className="mx-auto w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mb-4">
              <span className="text-white text-2xl font-bold">M</span>
            </div>
            <h1 className="text-3xl font-bold text-gray-900">Dołącz do nas</h1>
            <p className="text-gray-600 mt-2">Stwórz swoje konto i zacznij śledzić swój nastrój</p>
          </div>

          <form onSubmit={handleRegister} className="space-y-6">
            {error && (
              <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
                {error}
              </div>
            )}

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label htmlFor="firstName" className="block text-sm font-medium text-gray-700 mb-2">
                  Imię
                </label>
                <input
                  id="firstName"
                  name="firstName"
                  type="text"
                  value={formData.firstName}
                  onChange={handleChange}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                  required
                  placeholder="Twoje imię"
                />
              </div>

              <div>
                <label htmlFor="lastName" className="block text-sm font-medium text-gray-700 mb-2">
                  Nazwisko
                </label>
                <input
                  id="lastName"
                  name="lastName"
                  type="text"
                  value={formData.lastName}
                  onChange={handleChange}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                  required
                  placeholder="Twoje nazwisko"
                />
              </div>
            </div>

            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
                Email
              </label>
              <input
                id="email"
                name="email"
                type="email"
                value={formData.email}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                required
                placeholder="twój@email.com"
              />
            </div>

            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
                Hasło
              </label>
              <input
                id="password"
                name="password"
                type="password"
                value={formData.password}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                required
                minLength={6}
                placeholder="Minimum 6 znaków"
              />
            </div>

            <div>
              <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700 mb-2">
                Potwierdź hasło
              </label>
              <input
                id="confirmPassword"
                name="confirmPassword"
                type="password"
                value={formData.confirmPassword}
                onChange={handleChange}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-colors"
                required
                minLength={6}
                placeholder="Powtórz hasło"
              />
            </div>

            <button
              type="submit"
              disabled={loading}
              className="w-full bg-gradient-to-r from-blue-500 to-purple-500 text-white py-3 px-4 rounded-lg hover:from-blue-600 hover:to-purple-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 transition-all duration-200 font-medium"
            >
              {loading ? (
                <div className="flex items-center justify-center">
                  <Loader2 className="h-5 w-5 animate-spin mr-2" />
                  Rejestracja...
                </div>
              ) : (
                'Zarejestruj się'
              )}
            </button>
          </form>

          <div className="mt-6 text-center">
            <p className="text-gray-600">
              Masz już konto?{' '}
              <Link 
                href="/auth/login" 
                className="text-blue-600 hover:text-blue-700 font-medium transition-colors"
              >
                Zaloguj się
              </Link>
            </p>
          </div>

          <div className="mt-6 p-4 bg-blue-50 rounded-lg">
            <p className="text-sm text-blue-700 text-center">
              💡 Po rejestracji otrzymasz swój unikalny kod, którym możesz dzielić się ze znajomymi!
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}-e 

=== ./src/app/auth/forgot-password/page.tsx ===
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Sparkles, ArrowLeft } from 'lucide-react'

export default function ForgotPasswordPage() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500/5 to-purple-600/5 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {/* Logo */}
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-2 mb-4">
            <div className="flex h-12 w-12 items-center justify-center rounded-xl bg-gradient-to-br from-blue-500 to-purple-600">
              <Sparkles className="h-6 w-6 text-white" />
            </div>
          </div>
          <h1 className="text-2xl font-bold text-gray-900">Spokój w głowie</h1>
          <p className="text-gray-600 mt-2">Resetowanie hasła</p>
        </div>

        {/* Forgot Password Form */}
        <Card className="bg-white/80 backdrop-blur-md border border-gray-200/50">
          <CardHeader className="text-center">
            <CardTitle className="text-xl">Zapomniałeś hasła?</CardTitle>
            <CardDescription>
              Wprowadź swój email, a wyślemy Ci link do resetowania hasła
            </CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <label htmlFor="email" className="text-sm font-medium text-gray-700">
                Adres email
              </label>
              <Input
                id="email"
                type="email"
                placeholder="wprowadź@email.com"
                className="w-full"
              />
            </div>

            <Button className="w-full" size="lg">
              Wyślij link resetujący
            </Button>

            <div className="text-center">
              <Link 
                href="/auth/login" 
                className="inline-flex items-center text-sm text-blue-600 hover:text-blue-500 font-medium"
              >
                <ArrowLeft className="h-4 w-4 mr-1" />
                Wróć do logowania
              </Link>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}-e 

=== ./src/app/auth/layout.tsx ===
// src/app/(auth)/layout.tsx
export default function AuthLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center p-4">
      <div className="w-full max-w-md">
        {children}
      </div>
    </div>
  )
}-e 

=== ./src/app/auth/login/page.tsx ===
// src/app/(auth)/login/page.tsx - POPRAWIONE
'use client'
import { useState } from 'react'
import { useAuth } from '@/components/providers/auth-provider'
import { authService } from '@/lib/auth-service'
import { useRouter } from 'next/navigation'
import Link from 'next/link'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [password, setPassword] = useState('')
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState('')
  const router = useRouter()
  const { user } = useAuth()

  // Jeśli użytkownik jest już zalogowany, przekieruj do dashboard
  if (user) {
    router.push('/dashboard')
  }

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault()
    setLoading(true)
    setError('')

    try {
      await authService.login(email, password)
      router.push('/dashboard')
    } catch (error: any) {
      setError('Błąd logowania: ' + error.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div className="bg-white rounded-2xl shadow-xl p-8">
      <div className="text-center mb-8">
        <h1 className="text-3xl font-bold text-gray-900">Zaloguj się</h1>
        <p className="text-gray-600 mt-2">Witaj z powrotem!</p>
      </div>

      <form onSubmit={handleLogin} className="space-y-6">
        {error && (
          <div className="bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg text-sm">
            {error}
          </div>
        )}

        <div>
          <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">
            Email
          </label>
          <input
            id="email"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
        </div>

        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">
            Hasło
          </label>
          <input
            id="password"
            type="password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            required
          />
        </div>

        <button
          type="submit"
          disabled={loading}
          className="w-full bg-blue-600 text-white py-3 px-4 rounded-lg hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50"
        >
          {loading ? 'Logowanie...' : 'Zaloguj się'}
        </button>
      </form>

      <div className="mt-6 text-center">
        <p className="text-gray-600">
          Nie masz konta?{' '}
          <Link href="/auth/register" className="text-blue-600 hover:text-blue-700 font-medium">
            Zarejestruj się
          </Link>
        </p>
      </div>
    </div>
  )
}-e 

=== ./src/app/articles/[id]/page.tsx ===
// src/app/articles/[id]/page.tsx
'use client'

import { useEffect, useState } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { db } from '@/lib/firebase'
import { doc, getDoc } from 'firebase/firestore'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { ArrowLeft, BookOpen, Clock, Eye } from 'lucide-react'
import Link from 'next/link'
import Header from '@/components/layout/header'

export default function ArticleDetailPage() {
  const router = useRouter()
  const params = useParams()
  const articleId = params.id as string

  const [article, setArticle] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    const fetchArticle = async () => {
      if (!articleId) return

      try {
        const docRef = doc(db, 'articles', articleId)
        const docSnap = await getDoc(docRef)

        if (docSnap.exists()) {
          const data = docSnap.data()
          // Tylko opublikowane artykuły lub wszystkie dla admina (na razie uproszczone)
          if (data.status === 'published' || process.env.NODE_ENV === 'development') {
            setArticle({ id: docSnap.id, ...data })
          } else {
            setError('Artykuł nie jest opublikowany.')
          }
        } else {
          setError('Artykuł nie został znaleziony.')
        }
      } catch (err) {
        console.error('Błąd ładowania artykułu:', err)
        setError('Nie udało się załadować artykułu.')
      } finally {
        setLoading(false)
      }
    }

    fetchArticle()
  }, [articleId])

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Ładowanie artykułu...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10 flex items-center justify-center">
        <Card className="w-full max-w-md p-6 text-center">
          <BookOpen className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-gray-900 mb-2">Nie znaleziono artykułu</h2>
          <p className="text-gray-600 mb-6">{error}</p>
          <Button onClick={() => router.push('/articles')}>
            <ArrowLeft className="mr-2 h-4 w-4" />
            Wróć do listy
          </Button>
        </Card>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10">
      <Header />
      <div className="container mx-auto px-4 py-8 max-w-4xl">
        <Button
          variant="ghost"
          onClick={() => router.back()}
          className="mb-6 flex items-center gap-2"
        >
          <ArrowLeft className="h-4 w-4" />
          Wróć do artykułów
        </Button>

        <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
          <CardHeader>
            <div className="flex items-center gap-2 text-sm text-gray-500 mb-2">
              <span>{article.category}</span>
              <span>•</span>
              <span>{article.createdAt?.toDate().toLocaleDateString('pl-PL')}</span>
            </div>
            <CardTitle className="text-3xl font-bold text-gray-900">{article.title}</CardTitle>
            <p className="text-gray-600 mt-2">{article.excerpt}</p>
          </CardHeader>
          <CardContent>
            <div className="prose prose-lg max-w-none mb-6">
              <div
                className="article-content text-gray-800 leading-relaxed"
                dangerouslySetInnerHTML={{ __html: article.content || '' }}
              />
            </div>

            {/* XP info */}
            <div className="p-4 bg-green-50 border border-green-200 rounded-lg text-center mb-6">
              <div className="inline-flex items-center gap-2 text-green-700 font-medium">
                <BookOpen className="h-5 w-5" />
                Za przeczytanie tego artykułu otrzymujesz <strong>10 XP</strong>
              </div>
            </div>

            {/* Meta */}
            <div className="flex flex-wrap gap-4 text-sm text-gray-500 border-t border-gray-100 pt-4">
              <div className="flex items-center gap-1">
                <Clock className="h-4 w-4" />
                {article.readTime} min czytania
              </div>
              <div className="flex items-center gap-1">
                <Eye className="h-4 w-4" />
                {article.views} wyświetleń
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  )
}-e 

=== ./src/app/articles/page.tsx ===
// src/app/articles/page.tsx
'use client'

import { useEffect, useState } from 'react'
import { useAuth } from '@/components/providers/auth-provider'
import { useArticles } from '@/hooks/useArticles'
import Header from '@/components/layout/header'
import Link from 'next/link'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { BookOpen, Shield, Award } from 'lucide-react'
import { ArticleList } from '@/components/articles/article-list'

export default function ArticlesPage() {
  const { user: authUser } = useAuth()
  const [user, setUser] = useState<{ id: string; role: 'user' | 'admin' } | null>(null)
  const { articles, loading } = useArticles(user?.role)

  useEffect(() => {
    if (authUser) {
      setUser({ id: authUser.uid, role: authUser.role || 'user' })
    } else {
      setUser({ id: 'guest', role: 'user' })
    }
  }, [authUser])

  const handleArticleRead = (articleId: string) => {
    console.log('Artykuł przeczytany – tu będzie zapis XP:', articleId)
    // Potem: userService.updateXP(user.id, 10)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10">
      <Header />
      <div className="container mx-auto px-4 py-8 max-w-7xl">
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 px-6 py-3 rounded-2xl bg-white/80 backdrop-blur-sm border border-white/20 shadow-lg">
            <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl">
              <BookOpen className="h-6 w-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
                Artykuły
              </h1>
              <p className="text-gray-600 text-sm">
                Psychologia, nauka, relacje – rozwijaj się z nami
              </p>
            </div>
          </div>
        </div>

        {/* ✅ NAPIS O XP */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-2 px-4 py-2 bg-gradient-to-r from-green-500 to-emerald-600 rounded-full text-white font-semibold shadow-md">
            <Award className="h-5 w-5" />
            Za przeczytanie artykułu dostaniesz <strong>10 XP</strong>
          </div>
        </div>

        {/* Lista artykułów */}
        <ArticleList
          articles={articles}
          loading={loading}
          user={user}
          onArticleRead={handleArticleRead}
        />

        {/* ✅ PRZYCISK DLA ADMINA */}
        {user?.role === 'admin' && (
          <div className="text-center mt-10">
            <Link href="/admin/articles">
              <Button className="bg-gradient-to-r from-purple-500 to-indigo-600 text-white px-6 py-3 rounded-xl shadow-md hover:from-purple-600 hover:to-indigo-700">
                <Shield className="h-4 w-4 mr-2" />
                Przejdź do panelu administratora
              </Button>
            </Link>
          </div>
        )}
      </div>
    </div>
  )
}-e 

=== ./src/app/ColorTest.tsx ===
export default function ColorTest() {
  return (
    <div className="max-w-4xl mx-auto space-y-8">
      <div className="text-center">
        <h1 className="text-4xl font-bold text-text-primary mb-2">
          Spokój w głowie
        </h1>
        <p className="text-lg text-text-secondary">
          Design System Test
        </p>
      </div>

      {/* Color Palette */}
      <section>
        <h2 className="text-2xl font-semibold mb-4 text-text-primary">
          Color Palette
        </h2>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
          <div className="space-y-2">
            <div className="w-full h-20 bg-primary rounded-lg shadow-sm"></div>
            <p className="text-sm text-text-secondary text-center">Primary</p>
          </div>
          <div className="space-y-2">
            <div className="w-full h-20 bg-accent-green rounded-lg shadow-sm"></div>
            <p className="text-sm text-text-secondary text-center">Accent Green</p>
          </div>
          <div className="space-y-2">
            <div className="w-full h-20 bg-accent-orange rounded-lg shadow-sm"></div>
            <p className="text-sm text-text-secondary text-center">Accent Orange</p>
          </div>
          <div className="space-y-2">
            <div className="w-full h-20 bg-accent-red rounded-lg shadow-sm"></div>
            <p className="text-sm text-text-secondary text-center">Accent Red</p>
          </div>
        </div>
      </section>

      {/* Typography Scale */}
      <section>
        <h2 className="text-2xl font-semibold mb-4 text-text-primary">
          Typography
        </h2>
        <div className="space-y-3">
          <h1 className="text-4xl font-bold text-text-primary">Heading 1 - 36px</h1>
          <h2 className="text-3xl font-semibold text-text-primary">Heading 2 - 30px</h2>
          <h3 className="text-2xl font-semibold text-text-primary">Heading 3 - 24px</h2>
          <p className="text-base text-text-secondary">Body text - 16px</p>
          <p className="text-sm text-text-tertiary">Small text - 14px</p>
        </div>
      </section>

      {/* Glassmorphism Test */}
      <section>
        <h2 className="text-2xl font-semibold mb-4 text-text-primary">
          Glassmorphism
        </h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="glass-card p-6">
            <h3 className="text-lg font-semibold mb-2">Glass Card</h3>
            <p className="text-text-secondary">This is a glassmorphism card with backdrop blur</p>
          </div>
          <div className="bg-gradient-to-br from-primary-500 to-primary-700 p-6 rounded-2xl">
            <h3 className="text-lg font-semibold mb-2 text-white">Gradient Card</h3>
            <p className="text-white/80">This card shows gradient background</p>
          </div>
        </div>
      </section>

      {/* Buttons Preview */}
      <section>
        <h2 className="text-2xl font-semibold mb-4 text-text-primary">
          Button Styles
        </h2>
        <div className="flex flex-wrap gap-3">
          <button className="px-4 py-2 bg-primary text-white rounded-lg font-medium">
            Primary Button
          </button>
          <button className="px-4 py-2 bg-accent-green text-white rounded-lg font-medium">
            Success Button
          </button>
          <button className="px-4 py-2 border border-border-light text-text-primary rounded-lg font-medium">
            Outline Button
          </button>
        </div>
      </section>
    </div>
  )
}-e 

=== ./src/app/admin/articles/edit/[id]/page.tsx ===
// src/app/admin/articles/edit/[id]/page.tsx
'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { useAuth } from '@/components/providers/auth-provider'
import { useArticles } from '@/hooks/useArticles'
import { Button } from '@/components/ui/button'
import { ArrowLeft, Save, Image as ImageIcon } from 'lucide-react'
import ReactQuill from 'react-quill'
import 'react-quill/dist/quill.snow.css'
import Header from '@/components/layout/header'

const CATEGORIES = [
  'Stres', 'Lęki', 'Matura', 'Nauka', 'Relacje', 'Samopoczucie',
  'Sen', 'Motywacja', 'Prokrastynacja', 'Wsparcie'
]

export default function EditArticlePage() {
  const { id } = useParams()
  const router = useRouter()
  const { user } = useAuth()
  const { articles, updateArticle } = useArticles('admin', user?.uid)

  const [title, setTitle] = useState('')
  const [excerpt, setExcerpt] = useState('')
  const [content, setContent] = useState('')
  const [category, setCategory] = useState('Stres')
  const [readTime, setReadTime] = useState(5)
  const [status, setStatus] = useState<'draft' | 'published'>('draft')
  const [isFeatured, setIsFeatured] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [coverImage, setCoverImage] = useState<File | null>(null)
  const [coverPreview, setCoverPreview] = useState<string | null>(null)
  const [originalImageUrl, setOriginalImageUrl] = useState<string | undefined>(undefined)

  // Załaduj artykuł
  useEffect(() => {
    if (!id || typeof id !== 'string') return
    const article = articles.find(a => a.id === id)
    if (article) {
      setTitle(article.title)
      setExcerpt(article.excerpt)
      setContent(article.content)
      setCategory(article.category)
      setReadTime(article.readTime)
      setStatus(article.status)
      setIsFeatured(article.isFeatured)
      setOriginalImageUrl(article.imageUrl)
      if (article.imageUrl) {
        setCoverPreview(article.imageUrl)
      }
    }
  }, [id, articles])

  const handleCoverChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file && file.type.startsWith('image/')) {
      setCoverImage(file)
      setCoverPreview(URL.createObjectURL(file))
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!id || typeof id !== 'string' || !user) return

    setIsSubmitting(true)
    try {
      await updateArticle(
        id,
        {
          title,
          excerpt,
          content,
          category,
          readTime,
          status,
          isFeatured,
        },
        coverImage,
        originalImageUrl
      )
      alert('✅ Artykuł został zaktualizowany!')
      router.push('/admin/articles')
    } catch (err) {
      alert('❌ Błąd: ' + (err as Error).message)
    } finally {
      setIsSubmitting(false)
    }
  }

  const modules = {
    toolbar: [
      [{ 'header': [1, 2, 3, false] }],
      ['bold', 'italic', 'underline'],
      [{ 'list': 'ordered' }, { 'list': 'bullet' }],
      ['blockquote', 'code-block'],
      ['link', 'image'],
      [{ 'color': [] }, { 'background': [] }],
      ['clean']
    ]
  }

  const formats = [
    'header',
    'bold', 'italic', 'underline',
    'list', 'bullet', 'ordered',
    'blockquote', 'code-block',
    'link', 'image',
    'color', 'background'
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      <div className="sticky top-0 z-10 bg-white border-b border-gray-200 px-6 py-3 flex items-center justify-between">
        <Button variant="ghost" size="sm" onClick={() => router.back()}>
          <ArrowLeft className="h-4 w-4 mr-2" />
          Anuluj
        </Button>
        <h1 className="text-lg font-medium">Edytuj artykuł</h1>
        <Button
          onClick={handleSubmit}
          disabled={isSubmitting || !title.trim()}
          className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
        >
          <Save className="h-4 w-4" />
          {isSubmitting ? 'Zapisywanie...' : 'Zapisz zmiany'}
        </Button>
      </div>

      <div className="container mx-auto px-6 py-8 max-w-6xl">
        <form onSubmit={handleSubmit} className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <div className="lg:col-span-2 space-y-6">
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="w-full text-3xl font-bold outline-none"
            />
            <textarea
              value={excerpt}
              onChange={(e) => setExcerpt(e.target.value)}
              className="w-full text-lg text-gray-600 outline-none"
              rows={2}
            />
            <div className="border border-gray-300 rounded-lg overflow-hidden">
              <ReactQuill
                value={content}
                onChange={setContent}
                modules={modules}
                formats={formats}
                className="h-[600px]"
              />
            </div>
          </div>

          <div className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Okładka artykułu
              </label>
              {coverPreview ? (
                <img
                  src={coverPreview}
                  alt="Podgląd okładki"
                  className="w-full h-40 object-cover rounded-lg border"
                />
              ) : (
                <div className="text-gray-400">Brak okładki</div>
              )}
              <div
                onClick={() => document.getElementById('cover-input')?.click()}
                className="mt-2 text-sm text-blue-600 cursor-pointer"
              >
                Zmień zdjęcie
              </div>
              <input
                id="cover-input"
                type="file"
                accept="image/*"
                onChange={handleCoverChange}
                className="hidden"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Kategoria</label>
              <select
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                {CATEGORIES.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Czas czytania (min)
              </label>
              <input
                type="number"
                min="1"
                value={readTime}
                onChange={(e) => setReadTime(Number(e.target.value))}
                className="w-full p-2 border border-gray-300 rounded"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">Status</label>
              <select
                value={status}
                onChange={(e) => setStatus(e.target.value as any)}
                className="w-full p-2 border border-gray-300 rounded"
              >
                <option value="draft">Szkic</option>
                <option value="published">Opublikowany</option>
              </select>
            </div>

            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="featured"
                checked={isFeatured}
                onChange={(e) => setIsFeatured(e.target.checked)}
                className="h-4 w-4"
              />
              <label htmlFor="featured" className="text-sm text-gray-700">
                Wyróżniony
              </label>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
}-e 

=== ./src/app/admin/articles/new/page.tsx ===
// src/app/admin/articles/new/page.tsx
'use client'

import { useState, useRef } from 'react'
import { useAuth } from '@/components/providers/auth-provider'
import { useArticles } from '@/hooks/useArticles'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { ArrowLeft, Save, Image as ImageIcon, Table, Bold, Italic, List, ListOrdered, Quote } from 'lucide-react'
import ReactQuill from 'react-quill'
import 'react-quill/dist/quill.snow.css'
import Header from '@/components/layout/header'

export default function NewArticlePage() {
  const { user } = useAuth()
  const router = useRouter()
  const { addArticle } = useArticles('admin', user?.uid)

  const [title, setTitle] = useState('')
  const [excerpt, setExcerpt] = useState('')
  const [content, setContent] = useState('')
  const [category, setCategory] = useState('Stres')
  const [readTime, setReadTime] = useState(5)
  const [status, setStatus] = useState<'draft' | 'published'>('draft')
  const [isFeatured, setIsFeatured] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)
  const [coverImage, setCoverImage] = useState<File | null>(null)
  const [coverPreview, setCoverPreview] = useState<string | null>(null)

  const CATEGORIES = [
    'Stres', 'Lęki', 'Matura', 'Nauka', 'Relacje', 'Samopoczucie',
    'Sen', 'Motywacja', 'Prokrastynacja', 'Wsparcie'
  ]

  const handleCoverChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file && file.type.startsWith('image/')) {
      setCoverImage(file)
      setCoverPreview(URL.createObjectURL(file))
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!user) return

    setIsSubmitting(true)
    try {
      await addArticle(
        {
          title,
          excerpt,
          content,
          category,
          tags: [],
          readTime,
          status,
          isFeatured,
          isTrending: false,
        },
        coverImage || undefined
      )
      alert('✅ Artykuł został zapisany!')
      router.push('/admin/articles')
    } catch (err) {
      alert('❌ Błąd: ' + (err as Error).message)
    } finally {
      setIsSubmitting(false)
    }
  }

  // Toolbar z ikonami jak w Google Docs
  const modules = {
    toolbar: {
      container: [
        [{ 'header': [1, 2, 3, false] }],
        ['bold', 'italic', 'underline'],
        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
        ['blockquote', 'code-block'],
        ['link', 'image'],
        [{ 'color': [] }, { 'background': [] }],
        ['clean']
      ],
      handlers: {
        image: () => {
          const input = document.createElement('input')
          input.setAttribute('type', 'file')
          input.setAttribute('accept', 'image/*')
          input.click()
          input.onchange = () => {
            const file = input.files?.[0]
            if (file) {
              const reader = new FileReader()
              reader.onload = (e) => {
                const quill = (document.querySelector('.ql-editor') as any)
                if (quill) {
                  const range = quill.selection
                  if (range) {
                    quill.insertEmbed(range.index, 'image', e.target?.result)
                  }
                }
              }
              reader.readAsDataURL(file)
            }
          }
        }
      }
    }
  }

  const formats = [
    'header',
    'bold', 'italic', 'underline',
    'list', 'bullet', 'ordered',
    'blockquote', 'code-block',
    'link', 'image',
    'color', 'background'
  ]

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />

      {/* Top bar – jak w Docs */}
      <div className="sticky top-0 z-10 bg-white border-b border-gray-200 px-6 py-3 flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Button variant="ghost" size="sm" onClick={() => router.back()}>
            <ArrowLeft className="h-4 w-4 mr-2" />
            Anuluj
          </Button>
          <h1 className="text-lg font-medium">Nowy artykuł</h1>
        </div>
        <Button
          onClick={handleSubmit}
          disabled={isSubmitting || !title.trim()}
          className="bg-blue-600 hover:bg-blue-700 text-white flex items-center gap-2"
        >
          <Save className="h-4 w-4" />
          {isSubmitting ? 'Zapisywanie...' : 'Zapisz artykuł'}
        </Button>
      </div>

      <div className="container mx-auto px-6 py-8 max-w-6xl">
        <form onSubmit={handleSubmit} className="space-y-8">
          {/* Metadane – tytuł, kategoria, okładka */}
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {/* Główna treść */}
            <div className="lg:col-span-2 space-y-6">
              <input
                type="text"
                placeholder="Tytuł artykułu"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                className="w-full text-3xl font-bold outline-none placeholder:text-gray-400"
              />
              
              <textarea
                placeholder="Krótki opis"
                value={excerpt}
                onChange={(e) => setExcerpt(e.target.value)}
                className="w-full text-lg text-gray-600 outline-none placeholder:text-gray-400"
                rows={2}
              />

              {/* Edytor treści – Google Docs style */}
              <div className="border border-gray-300 rounded-lg overflow-hidden">
                <ReactQuill
                  value={content}
                  onChange={setContent}
                  modules={modules}
                  formats={formats}
                  className="h-[600px]"
                  placeholder="Zacznij pisać artykuł..."
                />
              </div>
            </div>

            {/* Panel boczny – ustawienia */}
            <div className="space-y-6">
              {/* Okładka */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Okładka artykułu
                </label>
                {coverPreview ? (
                  <img
                    src={coverPreview}
                    alt="Podgląd okładki"
                    className="w-full h-40 object-cover rounded-lg border"
                  />
                ) : (
                  <div
                    onClick={() => fileInputRef.current?.click()}
                    className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer"
                  >
                    <ImageIcon className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                    <p className="text-sm text-gray-600">Kliknij, aby dodać zdjęcie</p>
                  </div>
                )}
                <input
                  ref={fileInputRef}
                  type="file"
                  accept="image/*"
                  onChange={handleCoverChange}
                  className="hidden"
                />
              </div>

              {/* Kategoria */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Kategoria
                </label>
                <select
                  value={category}
                  onChange={(e) => setCategory(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded"
                >
                  {CATEGORIES.map(cat => (
                    <option key={cat} value={cat}>{cat}</option>
                  ))}
                </select>
              </div>

              {/* Czas czytania */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Czas czytania (min)
                </label>
                <input
                  type="number"
                  min="1"
                  value={readTime}
                  onChange={(e) => setReadTime(Number(e.target.value))}
                  className="w-full p-2 border border-gray-300 rounded"
                />
              </div>

              {/* Status */}
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={status}
                  onChange={(e) => setStatus(e.target.value as any)}
                  className="w-full p-2 border border-gray-300 rounded"
                >
                  <option value="draft">Szkic</option>
                  <option value="published">Opublikowany</option>
                </select>
              </div>

              {/* Wyróżniony */}
              <div className="flex items-center gap-2">
                <input
                  type="checkbox"
                  id="featured"
                  checked={isFeatured}
                  onChange={(e) => setIsFeatured(e.target.checked)}
                  className="h-4 w-4"
                />
                <label htmlFor="featured" className="text-sm text-gray-700">
                  Wyróżniony
                </label>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>
  )
}-e 

=== ./src/app/admin/articles/page.tsx ===
// src/app/admin/articles/page.tsx
'use client'

import { useState, useEffect, useRef } from 'react'
import { useAuth } from '@/components/providers/auth-provider'
import { useArticles } from '@/hooks/useArticles'
import { useRouter } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { BookOpen, Eye, FileText, Shield, Search, Plus, Edit, Trash2, X, Upload } from 'lucide-react'
import { motion, AnimatePresence } from 'framer-motion'
import ReactMarkdown from 'react-markdown'
import remarkGfm from 'remark-gfm'
import { ArticleForm } from '@/components/Admin/ArticleForm'

const CATEGORIES = [
  'Stres', 'Lęki', 'Matura', 'Nauka', 'Relacje', 'Samopoczucie',
  'Sen', 'Motywacja', 'Prokrastynacja', 'Wsparcie'
]

export default function AdminArticlesPage() {
  const { user, loading: authLoading } = useAuth()
  const router = useRouter()
  const [searchTerm, setSearchTerm] = useState('')
  const [statusFilter, setStatusFilter] = useState('all')
  const [isModalOpen, setIsModalOpen] = useState(false)

  const { articles, loading: articlesLoading, deleteArticle } = useArticles(
    user?.role,
    user?.uid
  )

  useEffect(() => {
    if (!authLoading && (!user || user.role !== 'admin')) {
      router.push('/articles')
    }
  }, [user, authLoading, router])

  const filteredArticles = articles.filter(article => {
    const matchesSearch = article.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         article.category.toLowerCase().includes(searchTerm.toLowerCase())
    const matchesStatus = statusFilter === 'all' || article.status === statusFilter
    return matchesSearch && matchesStatus
  })

  const stats = {
    total: articles.length,
    published: articles.filter(a => a.status === 'published').length,
    drafts: articles.filter(a => a.status === 'draft').length,
    featured: articles.filter(a => a.isFeatured).length
  }

  if (authLoading || articlesLoading) {
    return <div className="min-h-screen flex items-center justify-center">Ładowanie...</div>
  }

  if (!user || user.role !== 'admin') {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="bg-white p-8 rounded-xl shadow-lg text-center">
          <Shield className="h-12 w-12 text-red-500 mx-auto mb-4" />
          <h2 className="text-xl font-bold text-gray-900 mb-2">Brak dostępu</h2>
          <p className="text-gray-600 mb-4">Nie masz uprawnień administratora.</p>
          <Button onClick={() => router.push('/articles')}>Wróć do artykułów</Button>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-blue-50/30 py-8">
      <div className="container mx-auto px-4 max-w-7xl">
        {/* Header */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-6 mb-8">
          <div>
            <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-700 bg-clip-text text-transparent">
              Panel Administratora
            </h1>
            <p className="text-gray-600 mt-2">Zarządzaj artykułami i treściami</p>
          </div>
          <Button
            onClick={() => setIsModalOpen(true)}
            className="bg-green-600 hover:bg-green-700 text-white rounded-xl px-4 py-2 flex items-center gap-2"
          >
            <Plus className="h-4 w-4" />
            Nowy Artykuł
          </Button>
        </div>

        {/* Statystyki */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-8">
          <StatCard title="Wszystkie artykuły" value={stats.total} icon={<BookOpen />} color="from-blue-500 to-cyan-500" />
          <StatCard title="Opublikowane" value={stats.published} icon={<Eye />} color="from-green-500 to-emerald-500" />
          <StatCard title="Szkice" value={stats.drafts} icon={<FileText />} color="from-amber-500 to-orange-500" />
          <StatCard title="Wyróżnione" value={stats.featured} icon={<Shield />} color="from-purple-500 to-pink-500" />
        </div>

        {/* Filtry */}
        <div className="bg-white rounded-xl p-6 shadow-lg mb-6">
          <div className="flex flex-col sm:flex-row gap-4">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <input
                type="text"
                placeholder="Szukaj artykułów..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10 w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div className="flex gap-2">
              {['all', 'published', 'draft'].map(status => (
                <button
                  key={status}
                  onClick={() => setStatusFilter(status)}
                  className={`px-4 py-2 rounded-lg text-sm font-medium ${
                    statusFilter === status
                      ? 'bg-blue-600 text-white'
                      : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                  }`}
                >
                  {status === 'all' ? 'Wszystkie' : status}
                </button>
              ))}
            </div>
          </div>
        </div>

        {/* Lista artykułów */}
        <div className="bg-white rounded-xl p-6 shadow-lg">
          <h2 className="text-lg font-semibold mb-4">Artykuły ({filteredArticles.length})</h2>
          <div className="space-y-4">
            {filteredArticles.map(article => (
              <ArticleRow
                key={article.id}
                article={article}
                onEdit={() => alert('Edycja niezaimplementowana')}
                onDelete={async () => {
                  if (confirm('Na pewno usunąć artykuł?')) {
                    await deleteArticle(article.id)
                  }
                }}
              />
            ))}
            {filteredArticles.length === 0 && (
              <div className="text-center py-12">
                <FileText className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-gray-900 mb-2">Brak artykułów</h3>
                <p className="text-gray-600">
                  {searchTerm ? 'Zmień kryteria wyszukiwania' : 'Utwórz pierwszy artykuł'}
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Modal */}
        <ArticleFormModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          uid={user.uid}
        />
      </div>
    </div>
  )
}

function StatCard({ title, value, icon, color }: { title: string; value: number; icon: React.ReactNode; color: string }) {
  return (
    <div className={`bg-white rounded-xl p-6 shadow-lg bg-gradient-to-r ${color}`}>
      <div className="flex items-center justify-between">
        <div>
          <p className="text-sm font-medium text-white/90">{title}</p>
          <p className="text-2xl font-bold text-white">{value}</p>
        </div>
        <div className="text-white">{icon}</div>
      </div>
    </div>
  )
}

function ArticleRow({ article, onEdit, onDelete }: { article: any; onEdit: () => void; onDelete: () => void }) {
  return (
    <div className="flex items-center justify-between p-4 bg-gray-50 rounded-lg border border-gray-200">
      <div className="flex-1">
        <div className="flex items-center gap-3 mb-2">
          <h3 className="font-semibold text-gray-900">{article.title}</h3>
          <span className={`text-xs px-2 py-1 rounded-full ${
            article.status === 'published' ? 'bg-green-100 text-green-700' : 'bg-amber-100 text-amber-700'
          }`}>
            {article.status}
          </span>
          {article.isFeatured && (
            <span className="text-xs px-2 py-1 rounded-full bg-purple-100 text-purple-700">Wyróżniony</span>
          )}
        </div>
        <div className="text-sm text-gray-600">
          Kategoria: {article.category} • Wyświetlenia: {article.views}
        </div>
      </div>
      <div className="flex items-center gap-2">
        <button
          onClick={onEdit}
          className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg"
        >
          <Edit className="h-4 w-4" />
        </button>
        <button
          onClick={onDelete}
          className="p-2 text-red-600 hover:bg-red-50 rounded-lg"
        >
          <Trash2 className="h-4 w-4" />
        </button>
      </div>
    </div>
  )
}

// ========== MODAL ==========
function ArticleFormModal({ isOpen, onClose, uid }: { isOpen: boolean; onClose: () => void; uid: string }) {
  const { addArticle } = useArticles('admin', uid)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const [formData, setFormData] = useState({
    title: '',
    excerpt: '',
    content: '',
    category: 'Stres',
    tags: '',
    readTime: 5,
    status: 'draft' as 'draft' | 'published',
    isFeatured: false,
    isTrending: false,
  })

  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [imageFile, setImageFile] = useState<File | null>(null)

  useEffect(() => {
    if (!isOpen) {
      setFormData({
        title: '',
        excerpt: '',
        content: '',
        category: 'Stres',
        tags: '',
        readTime: 5,
        status: 'draft',
        isFeatured: false,
        isTrending: false,
      })
      setImagePreview(null)
      setImageFile(null)
    }
  }, [isOpen])

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      if (!file.type.startsWith('image/')) {
        alert('Wybierz plik obrazu (jpg, png, itp.)')
        return
      }
      setImageFile(file)
      setImagePreview(URL.createObjectURL(file))
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    try {
      await addArticle(formData, imageFile || undefined)
      alert('✅ Artykuł został dodany!')
      onClose()
    } catch (err) {
      console.error(err)
      alert('❌ Błąd: ' + (err as Error).message)
    } finally {
      setIsSubmitting(false)
    }
  }

  if (!isOpen) return null

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        onClick={onClose}
      >
        <motion.div
          initial={{ scale: 0.9, opacity: 0, y: 20 }}
          animate={{ scale: 1, opacity: 1, y: 0 }}
          exit={{ scale: 0.9, opacity: 0, y: 20 }}
          className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
          onClick={(e) => e.stopPropagation()}
        >
          <div className="flex items-center justify-between p-6 border-b">
            <h2 className="text-xl font-bold flex items-center gap-2">
              <BookOpen className="h-5 w-5" />
              Dodaj nowy artykuł
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full"
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Tytuł */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tytuł artykułu *
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                required
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* Kategoria */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Kategoria
              </label>
              <select
                value={formData.category}
                onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {CATEGORIES.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>

            {/* Opis */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Krótki opis *
              </label>
              <textarea
                value={formData.excerpt}
                onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}
                required
                rows={2}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* Treść (Markdown) */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Treść artykułu (obsługiwany Markdown, w tym tabele)
              </label>
              <textarea
                value={formData.content}
                onChange={(e) => setFormData({ ...formData, content: e.target.value })}
                placeholder={`# Nagłówek\n\n## Podnagłówek\n\nTekst...\n\n| Kolumna 1 | Kolumna 2 |\n|-----------|-----------|\n| Wartość A | Wartość B |`}
                rows={10}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg font-mono text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
              <div className="mt-2 p-3 bg-gray-50 rounded border">
                <h4 className="font-semibold text-sm mb-1">Podgląd:</h4>
                <div className="prose prose-sm max-w-none">
                  <div>
                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                      {formData.content || 'Wpisz treść...'}
                    </ReactMarkdown>
                  </div>
                </div>
              </div>
            </div>

            {/* Obrazek */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Okładka artykułu (opcjonalnie)
              </label>
              {imagePreview ? (
                <div className="relative inline-block mt-2">
                  <img src={imagePreview} alt="Podgląd" className="w-full max-w-xs h-32 object-cover rounded" />
                  <button
                    type="button"
                    onClick={() => {
                      setImagePreview(null)
                      setImageFile(null)
                      if (fileInputRef.current) fileInputRef.current.value = ''
                    }}
                    className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1"
                  >
                    <X className="h-4 w-4" />
                  </button>
                </div>
              ) : (
                <div
                  onClick={() => fileInputRef.current?.click()}
                  className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer mt-2"
                >
                  <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600">Kliknij, aby dodać zdjęcie</p>
                </div>
              )}
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                className="hidden"
              />
            </div>

            {/* Opcje dodatkowe */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Czas czytania (min)
                </label>
                <input
                  type="number"
                  min="1"
                  value={formData.readTime}
                  onChange={(e) => setFormData({ ...formData, readTime: Number(e.target.value) })}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value as any })}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg"
                >
                  <option value="draft">Szkic</option>
                  <option value="published">Opublikowany</option>
                </select>
              </div>

              <div className="flex items-center gap-2 pt-6">
                <input
                  type="checkbox"
                  id="featured"
                  checked={formData.isFeatured}
                  onChange={(e) => setFormData({ ...formData, isFeatured: e.target.checked })}
                  className="h-4 w-4"
                />
                <label htmlFor="featured" className="text-sm font-medium text-gray-700">
                  Wyróżniony
                </label>
              </div>
            </div>

            {/* Przyciski */}
            <div className="flex justify-end gap-3 pt-4">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Anuluj
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                {isSubmitting ? 'Zapisywanie...' : 'Dodaj artykuł'}
              </button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  )
}-e 

=== ./src/app/test-ai/page.tsx ===
'use client'

import { useState } from 'react'

export const SimpleAITest = ({ onBack }: { onBack: () => void }) => {
  const [loading, setLoading] = useState(false)

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/40">
      <div className="bg-white rounded-2xl p-6 max-w-md w-full">
        <h2 className="text-xl font-bold mb-4">Simple AI Test</h2>
        <p className="text-gray-600 mb-4">To jest prosty komponent testowy</p>
        <button 
          onClick={onBack}
          className="w-full bg-blue-500 text-white py-2 rounded-lg"
        >
          Zamknij
        </button>
      </div>
    </div>
  )
}-e 

=== ./src/app/dashboard/profile/page.tsx ===
// src/app/dashboard/profile/page.tsx
'use client'

import { useState, useEffect, useRef } from 'react'
import { auth, db } from '@/lib/firebase'
import { onAuthStateChanged } from 'firebase/auth'
import { doc, onSnapshot, updateDoc } from 'firebase/firestore'
import userService from '@/lib/user-service'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { 
  User, 
  Edit, 
  Mail, 
  Calendar, 
  Shield, 
  Bell, 
  Users,
  UserPlus,
  TrendingUp,
  Award,
  Target,
  Sparkles,
  BarChart3,
  Camera,
  Copy,
  Check,
  FileText
} from 'lucide-react'
import { cn } from '@/lib/utils'
import Link from 'next/link'
import { UserProfile } from '@/types/user'

export default function ProfilePage() {
  const [user, setUser] = useState<any>(null)
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)
  const [loading, setLoading] = useState(true)
  const [isEditing, setIsEditing] = useState(false)
  const [editForm, setEditForm] = useState({
    displayName: '',
    bio: ''
  })
  const [friends, setFriends] = useState<UserProfile[]>([])
  const [stats, setStats] = useState({
    streak: 0,
    moodEntries: 0,
    consistency: 0,
    friends: 0
  })
  const [uploading, setUploading] = useState(false)
  const [copied, setCopied] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (usr) => {
      setUser(usr)
      if (usr) {
        // Subskrybuj zmiany profilu
        const userRef = doc(db, 'users', usr.uid)
        const unsub = onSnapshot(userRef, async (docSnap) => {
          if (docSnap.exists()) {
            const data = { uid: docSnap.id, ...docSnap.data() } as UserProfile
            setUserProfile(data)
            setEditForm({
              displayName: data.displayName || '',
              bio: data.bio || ''
            })
            
            // Pobierz prawdziwe statystyki
            const userStats = await userService.getUserStats(usr.uid)
            setStats(userStats)
            
            // Pobierz znajomych
            const userFriends = await userService.getFriends(usr.uid)
            setFriends(userFriends)
            setStats(prev => ({ ...prev, friends: userFriends.length }))
          }
          setLoading(false)
        })
        return () => unsub()
      } else {
        setUserProfile(null)
        setFriends([])
        setStats({
          streak: 0,
          moodEntries: 0,
          consistency: 0,
          friends: 0
        })
        setLoading(false)
      }
    })

    return () => unsubscribe()
  }, [])

  const handleSaveProfile = async () => {
    if (!user) return
    
    try {
      await userService.updateUserProfile(user.uid, {
        displayName: editForm.displayName,
        bio: editForm.bio
      })
      setIsEditing(false)
    } catch (error) {
      console.error('Błąd aktualizacji profilu:', error)
    }
  }

  const handleCancelEdit = () => {
    setEditForm({
      displayName: userProfile?.displayName || '',
      bio: userProfile?.bio || ''
    })
    setIsEditing(false)
  }

  const handleAvatarUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file || !user) return

    if (!file.type.startsWith('image/')) {
      alert('Proszę wybrać plik obrazu')
      return
    }

    if (file.size > 5 * 1024 * 1024) {
      alert('Plik jest zbyt duży. Maksymalny rozmiar to 5MB.')
      return
    }

    setUploading(true)
    try {
      await userService.uploadAvatar(user.uid, file)
    } catch (error) {
      console.error('Błąd uploadu avatara:', error)
      alert('Wystąpił błąd podczas uploadu zdjęcia')
    } finally {
      setUploading(false)
      if (fileInputRef.current) {
        fileInputRef.current.value = ''
      }
    }
  }

  const copyDisplayName = async () => {
    if (userProfile?.displayName) {
      await navigator.clipboard.writeText(userProfile.displayName)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Ładowanie profilu...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center">
        <div className="text-center">
          <User className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Nie jesteś zalogowany</h2>
          <p className="text-gray-600 mb-4">Zaloguj się, aby zobaczyć swój profil</p>
          <Link href="/auth/login">
            <Button>Zaloguj się</Button>
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-8">
      <div className="container mx-auto max-w-6xl px-4">
        
        {/* Header strony */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 px-6 py-3 rounded-2xl bg-white/80 backdrop-blur-sm border border-white/20 shadow-lg mb-6">
            <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl">
              <User className="h-6 w-6 text-white" />
            </div>
            <div className="text-left">
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Twój Profil
              </h1>
              <p className="text-gray-600 text-sm">
                Zarządzaj swoimi danymi i ustawieniami
              </p>
            </div>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Lewa kolumna - Profil i statystyki */}
          <div className="lg:col-span-2 space-y-6">
            
            {/* Karta profilu */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/20">
              <CardHeader className="pb-4">
                <div className="flex items-center justify-between">
                  <CardTitle className="flex items-center gap-2 text-xl">
                    <User className="h-5 w-5 text-blue-600" />
                    Informacje podstawowe
                  </CardTitle>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setIsEditing(!isEditing)}
                    className="border-blue-200 text-blue-600 hover:bg-blue-50"
                  >
                    <Edit className="h-4 w-4 mr-2" />
                    {isEditing ? 'Anuluj' : 'Edytuj'}
                  </Button>
                </div>
                <CardDescription>
                  Zarządzaj podstawowymi danymi konta
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                
                {/* Avatar i główne info */}
                <div className="flex flex-col md:flex-row items-center gap-6">
                  <div className="relative group">
                    <div className="w-24 h-24 rounded-2xl overflow-hidden bg-gradient-to-br from-blue-500 to-purple-600 shadow-lg">
                      {userProfile?.avatarUrl ? (
                        <img 
                          src={userProfile.avatarUrl} 
                          alt="Twój avatar" 
                          className="w-full h-full object-cover"
                        />
                      ) : (
                        <div className="w-full h-full flex items-center justify-center bg-gradient-to-br from-blue-500 to-purple-600">
                          <User className="h-8 w-8 text-white" />
                        </div>
                      )}
                    </div>
                    
                    {/* Przycisk zmiany zdjęcia */}
                    <button
                      onClick={() => fileInputRef.current?.click()}
                      className="absolute inset-0 bg-black/50 rounded-2xl flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity duration-200"
                    >
                      <Camera className="h-6 w-6 text-white" />
                    </button>
                    
                    <input
                      ref={fileInputRef}
                      type="file"
                      accept="image/*"
                      onChange={handleAvatarUpload}
                      className="hidden"
                    />
                    
                    <div className="absolute -bottom-2 -right-2 w-8 h-8 bg-green-500 rounded-full border-4 border-white flex items-center justify-center">
                      <div className="w-2 h-2 bg-white rounded-full"></div>
                    </div>
                  </div>

                  <div className="flex-1 text-center md:text-left">
                    {isEditing ? (
                      <div className="space-y-3">
                        <Input
                          value={editForm.displayName}
                          onChange={(e) => setEditForm(prev => ({...prev, displayName: e.target.value}))}
                          placeholder="Twoja nazwa użytkownika"
                          className="text-xl font-bold text-center md:text-left"
                        />
                        <Input
                          value={editForm.bio}
                          onChange={(e) => setEditForm(prev => ({...prev, bio: e.target.value}))}
                          placeholder="Krótki opis o sobie..."
                          className="text-gray-600"
                        />
                      </div>
                    ) : (
                      <>
                        <h2 className="text-2xl font-bold text-gray-900">
                          {userProfile?.displayName || user.email}
                        </h2>
                        <p className="text-gray-600 mt-1">
                          {userProfile?.bio || 'Dodaj krótki opis o sobie...'}
                        </p>
                        
                        {/* Nazwa użytkownika do kopiowania */}
                        <div className="flex items-center gap-2 mt-3">
                          <div className="bg-blue-100 text-blue-700 px-3 py-1 rounded-lg text-sm font-medium">
                            Nazwa: {userProfile?.displayName || 'Brak nazwy'}
                          </div>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={copyDisplayName}
                            className="h-8 w-8 p-0"
                          >
                            {copied ? (
                              <Check className="h-4 w-4 text-green-600" />
                            ) : (
                              <Copy className="h-4 w-4 text-gray-600" />
                            )}
                          </Button>
                        </div>
                        
                        <p className="text-sm text-gray-500 mt-2">
                          Dołączył: {userProfile?.createdAt ? new Date(userProfile.createdAt).toLocaleDateString('pl-PL', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric'
                          }) : 'Niedawno'}
                        </p>
                      </>
                    )}
                  </div>
                </div>

                {/* Akcje edycji */}
                {isEditing && (
                  <div className="flex gap-3 pt-4 border-t border-gray-100">
                    <Button
                      onClick={handleSaveProfile}
                      className="flex-1 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
                    >
                      Zapisz zmiany
                    </Button>
                    <Button
                      variant="outline"
                      onClick={handleCancelEdit}
                      className="flex-1 border-gray-300"
                    >
                      Anuluj
                    </Button>
                  </div>
                )}

                {/* Upload progress */}
                {uploading && (
                  <div className="pt-4 border-t border-gray-100">
                    <div className="flex items-center gap-3 text-sm text-blue-600">
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
                      Uploadowanie zdjęcia...
                    </div>
                  </div>
                )}

                {/* Informacje konta */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 pt-4 border-t border-gray-100">
                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                      <Mail className="h-4 w-4 text-blue-500" />
                      Email
                    </label>
                    <div className="p-3 bg-gray-50 rounded-xl border border-gray-200">
                      <p className="font-medium text-gray-900">{user.email}</p>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                      <Calendar className="h-4 w-4 text-blue-500" />
                      Data rejestracji
                    </label>
                    <div className="p-3 bg-gray-50 rounded-xl border border-gray-200">
                      <p className="font-medium text-gray-900">
                        {userProfile?.createdAt
                          ? new Date(userProfile.createdAt).toLocaleDateString('pl-PL', {
                              year: 'numeric',
                              month: 'long',
                              day: 'numeric'
                            })
                          : 'Niedawno'}
                      </p>
                    </div>
                  </div>
                </div>

                {/* 🔒 BADGE ADMINISTRATORSKI */}
                {userProfile?.role === 'admin' && (
                  <div className="pt-4 border-t border-gray-100">
                    <div className="flex items-center gap-3 p-4 bg-gradient-to-r from-purple-500 to-indigo-600 rounded-xl text-white">
                      <Shield className="h-6 w-6 text-white" />
                      <div>
                        <h3 className="font-bold text-lg">Konto administratorskie</h3>
                        <p className="text-purple-100 text-sm">
                          Masz pełny dostęp do panelu administracyjnego i zarządzania treścią.
                        </p>
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Statystyki i osiągnięcia */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/20">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <TrendingUp className="h-5 w-5 text-green-600" />
                  Twoje Osiągnięcia
                </CardTitle>
                <CardDescription>
                  Śledź swoje postępy w aplikacji
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-2xl border border-blue-200">
                    <div className="w-12 h-12 bg-blue-500 rounded-2xl flex items-center justify-center mx-auto mb-3">
                      <Target className="h-6 w-6 text-white" />
                    </div>
                    <div className="text-2xl font-bold text-blue-600">{stats.streak}</div>
                    <div className="text-sm text-blue-700">Dni streak</div>
                  </div>

                  <div className="text-center p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-2xl border border-green-200">
                    <div className="w-12 h-12 bg-green-500 rounded-2xl flex items-center justify-center mx-auto mb-3">
                      <Award className="h-6 w-6 text-white" />
                    </div>
                    <div className="text-2xl font-bold text-green-600">{stats.moodEntries}</div>
                    <div className="text-sm text-green-700">Wpisy nastroju</div>
                  </div>

                  <div className="text-center p-4 bg-gradient-to-br from-purple-50 to-purple-100 rounded-2xl border border-purple-200">
                    <div className="w-12 h-12 bg-purple-500 rounded-2xl flex items-center justify-center mx-auto mb-3">
                      <Sparkles className="h-6 w-6 text-white" />
                    </div>
                    <div className="text-2xl font-bold text-purple-600">{stats.consistency}%</div>
                    <div className="text-sm text-purple-700">Konsystencja</div>
                  </div>

                  <div className="text-center p-4 bg-gradient-to-br from-orange-50 to-orange-100 rounded-2xl border border-orange-200">
                    <div className="w-12 h-12 bg-orange-500 rounded-2xl flex items-center justify-center mx-auto mb-3">
                      <Users className="h-6 w-6 text-white" />
                    </div>
                    <div className="text-2xl font-bold text-orange-600">{stats.friends}</div>
                    <div className="text-sm text-orange-700">Znajomych</div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Sekcja Znajomi - Podgląd */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/20">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Users className="h-5 w-5 text-orange-600" />
                  Twoi Znajomi
                </CardTitle>
                <CardDescription>
                  Twoja sieć wsparcia - {friends.length} znajomych
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center justify-between p-4 bg-gradient-to-r from-orange-50 to-yellow-50 rounded-xl border border-orange-200">
                    <div>
                      <h4 className="font-semibold text-gray-900">Wsparcie społeczności</h4>
                      <p className="text-gray-600 text-sm">
                        Razem łatwiej dbać o dobre samopoczucie
                      </p>
                    </div>
                    <Link href="/dashboard/friends">
                      <Button className="bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600">
                        <Users className="h-4 w-4 mr-2" />
                        Zarządzaj
                      </Button>
                    </Link>
                  </div>
                  
                  {/* Mini lista znajomych */}
                  {friends.length > 0 ? (
                    <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
                      {friends.slice(0, 4).map(friend => (
                        <div key={friend.uid} className="flex flex-col items-center text-center p-4 border border-gray-100 rounded-xl bg-white/50 hover:bg-white transition-colors group">
                          <div className="w-12 h-12 bg-gradient-to-br from-orange-500 to-yellow-600 rounded-2xl flex items-center justify-center text-white font-bold text-lg mb-3 shadow-lg group-hover:shadow-xl transition-shadow">
                            {friend.avatarUrl ? (
                              <img 
                                src={friend.avatarUrl} 
                                alt={friend.displayName}
                                className="w-full h-full object-cover rounded-2xl"
                              />
                            ) : (
                              friend.displayName?.charAt(0).toUpperCase() || 'U'
                            )}
                          </div>
                          <div className="font-semibold text-gray-900 text-sm truncate w-full">
                            {friend.displayName}
                          </div>
                          <div className="text-xs text-gray-500">
                            {friend.email}
                          </div>
                          <div className="text-xs text-gray-500 flex items-center gap-1 mt-1">
                            <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                            🔥 {friend.streak || 0} dni
                          </div>
                        </div>
                      ))}
                      {friends.length > 4 && (
                        <Link href="/dashboard/friends" className="flex flex-col items-center justify-center p-4 border border-gray-100 rounded-xl bg-gray-50 hover:bg-gray-100 transition-colors">
                          <div className="w-12 h-12 bg-gray-200 rounded-2xl flex items-center justify-center text-gray-600 font-semibold text-sm mb-3">
                            +{friends.length - 4}
                          </div>
                          <div className="font-medium text-gray-900 text-sm">
                            Zobacz więcej
                          </div>
                        </Link>
                      )}
                    </div>
                  ) : (
                    <div className="text-center py-8">
                      <Users className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                      <p className="text-gray-600 font-medium">Brak znajomych</p>
                      <p className="text-gray-500 text-sm mt-1 mb-4">
                        Dodaj znajomych, aby wspólnie dbać o samopoczucie
                      </p>
                      <Link href="/dashboard/friends">
                        <Button size="sm" className="bg-gradient-to-r from-orange-500 to-yellow-500 hover:from-orange-600 hover:to-yellow-600">
                          <UserPlus className="h-4 w-4 mr-2" />
                          Dodaj znajomych
                        </Button>
                      </Link>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Prawa kolumna - Ustawienia i informacje */}
          <div className="space-y-6">
            
            {/* Bezpieczeństwo konta */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/20">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="h-5 w-5 text-green-600" />
                  Bezpieczeństwo konta
                </CardTitle>
                <CardDescription>
                  Zarządzaj ustawieniami bezpieczeństwa
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-gray-50 rounded-xl border border-gray-200">
                  <div>
                    <h4 className="font-medium text-gray-900">Hasło</h4>
                    <p className="text-gray-500 text-sm">Ostatnia zmiana: nigdy</p>
                  </div>
                  <Button variant="outline" size="sm" className="border-gray-300">
                    Zmień hasło
                  </Button>
                </div>
                
                <div className="flex items-center justify-between p-4 bg-gray-50 rounded-xl border border-gray-200">
                  <div>
                    <h4 className="font-medium text-gray-900">Uwierzytelnianie dwuetapowe</h4>
                    <p className="text-gray-500 text-sm">Zabezpiecz swoje konto</p>
                  </div>
                  <Button variant="outline" size="sm" className="border-gray-300">
                    Włącz
                  </Button>
                </div>

                <div className="flex items-center justify-between p-4 bg-gray-50 rounded-xl border border-gray-200">
                  <div>
                    <h4 className="font-medium text-gray-900">Powiadomienia</h4>
                    <p className="text-gray-500 text-sm">Ustaw preferencje</p>
                  </div>
                  <Button variant="outline" size="sm" className="border-gray-300">
                    <Bell className="h-4 w-4 mr-2" />
                    Ustawienia
                  </Button>
                </div>
              </CardContent>
            </Card>

            {/* Informacje o nazwie użytkownika */}
            <Card className="border-0 shadow-xl bg-gradient-to-br from-blue-500 to-purple-600 text-white">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <User className="h-5 w-5 text-white" />
                  Twoja Nazwa Użytkownika
                </CardTitle>
                <CardDescription className="text-blue-100">
                  Udostępnij swoją nazwę, aby znajomi mogli Cię znaleźć
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="bg-white/10 rounded-xl p-4 text-center">
                    <div className="text-2xl font-bold font-mono tracking-wider">
                      {userProfile?.displayName || 'Brak nazwy'}
                    </div>
                    <p className="text-blue-100 text-sm mt-2">
                      To jest Twoja publiczna nazwa
                    </p>
                  </div>
                  
                  <Button 
                    onClick={copyDisplayName}
                    className="w-full bg-white text-blue-600 hover:bg-blue-50"
                  >
                    {copied ? (
                      <>
                        <Check className="h-4 w-4 mr-2" />
                        Skopiowano!
                      </>
                    ) : (
                      <>
                        <Copy className="h-4 w-4 mr-2" />
                        Kopiuj nazwę
                      </>
                    )}
                  </Button>
                  
                  <div className="text-sm text-blue-100 space-y-2">
                    <p className="font-semibold">Jak to działa?</p>
                    <ul className="space-y-1">
                      <li>• Podaj swoją nazwę znajomym</li>
                      <li>• Oni wpiszą ją w zakładce "Znajomi"</li>
                      <li>• Po akceptacji staniecie się znajomymi</li>
                      <li>• Będziecie widzieć swoje podstawowe statystyki</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Szybkie akcje */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/20">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 text-purple-600" />
                  Szybkie Akcje
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Link href="/mood" className="block">
                  <Button variant="outline" className="w-full justify-start gap-3 py-3 border-gray-200 hover:border-purple-300 hover:bg-purple-50">
                    <BarChart3 className="h-4 w-4 text-purple-600" />
                    Dodaj dzisiejszy nastrój
                  </Button>
                </Link>
                
                <Link href="/ai" className="block">
                  <Button variant="outline" className="w-full justify-start gap-3 py-3 border-gray-200 hover:border-blue-300 hover:bg-blue-50">
                    <Sparkles className="h-4 w-4 text-blue-600" />
                    Porozmawiaj z AI
                  </Button>
                </Link>
                
                <Link href="/dashboard/friends" className="block">
                  <Button variant="outline" className="w-full justify-start gap-3 py-3 border-gray-200 hover:border-orange-300 hover:bg-orange-50">
                    <UserPlus className="h-4 w-4 text-orange-600" />
                    Dodaj znajomego
                  </Button>
                </Link>

                {/* 🔗 Link do panelu admina – tylko dla adminów */}
                {userProfile?.role === 'admin' && (
                  <Link href="/admin/articles" className="block">
                    <Button variant="outline" className="w-full justify-start gap-3 py-3 border-gray-200 hover:border-red-300 hover:bg-red-50">
                      <FileText className="h-4 w-4 text-red-600" />
                      Panel administratora
                    </Button>
                  </Link>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  )
}-e 

=== ./src/app/dashboard/layout.tsx ===
// src/app/(dashboard)/layout.tsx
import ProtectedRoute from '@/components/protected-route'
import MainLayout from '@/components/layout/main-layout'

export default function DashboardLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <ProtectedRoute>
      <MainLayout>
        {children}
      </MainLayout>
    </ProtectedRoute>
  )
}-e 

=== ./src/app/dashboard/friends/debug-page.tsx ===
// src/app/dashboard/friends/debug-page.tsx - tymczasowy komponent do debugowania
'use client'

import { useState, useEffect } from 'react'
import { auth } from '@/lib/firebase'
import { onAuthStateChanged, User } from 'firebase/auth'
import { userService } from '@/lib/user-service'
import { doc, getDoc } from 'firebase/firestore'
import { db } from '@/lib/firebase'

export default function DebugPage() {
  const [user, setUser] = useState<User | null>(null)
  const [userData, setUserData] = useState<any>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (usr) => {
      setUser(usr)
      if (usr) {
        // Pobierz bezpośrednio z Firestore
        const userDoc = await getDoc(doc(db, 'users', usr.uid))
        if (userDoc.exists()) {
          setUserData(userDoc.data())
        }
        setLoading(false)
      } else {
        setLoading(false)
      }
    })

    return () => unsubscribe()
  }, [])

  if (loading) return <div>Ładowanie debug...</div>
  if (!user) return <div>Nie zalogowany</div>

  return (
    <div className="p-8">
      <h1 className="text-2xl font-bold mb-4">Debug - Dane użytkownika</h1>
      <div className="bg-gray-100 p-4 rounded">
        <pre>{JSON.stringify(userData, null, 2)}</pre>
      </div>
      <div className="mt-4">
        <h2 className="text-xl font-bold">UID: {user.uid}</h2>
        <h2 className="text-xl font-bold">Email: {user.email}</h2>
        <h2 className="text-xl font-bold">Kod użytkownika: {userData?.userCode || 'BRAK KODU'}</h2>
      </div>
    </div>
  )
}-e 

=== ./src/app/dashboard/friends/page.tsx ===
'use client'

import { useState, useEffect, useCallback } from 'react'
import { auth } from '@/lib/firebase'
import { onAuthStateChanged, User } from 'firebase/auth'
import userService from '@/lib/user-service'
import { UserProfile, FriendRequest } from '@/types/user'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card'
import { Input } from '@/components/ui/input'
import { 
  Users, 
  UserPlus, 
  Mail, 
  Check, 
  X, 
  UserX, 
  Search,
  Copy,
  AlertCircle,
  Loader2,
  Sparkles
} from 'lucide-react'
import { cn } from '@/lib/utils'
import Link from 'next/link'

// Prosty debounce
function debounce<T extends (...args: any[]) => any>(
  func: T,
  wait: number
): (...args: Parameters<T>) => void {
  let timeout: NodeJS.Timeout
  return (...args: Parameters<T>) => {
    clearTimeout(timeout)
    timeout = setTimeout(() => func(...args), wait)
  }
}

export default function FriendsPage() {
  const [user, setUser] = useState<User | null>(null)
  const [activeTab, setActiveTab] = useState<'friends' | 'requests' | 'search'>('friends')
  const [friends, setFriends] = useState<UserProfile[]>([])
  const [requests, setRequests] = useState<(FriendRequest & { fromUserProfile?: UserProfile })[]>([])
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null)
  const [searchName, setSearchName] = useState('')
  const [searchResults, setSearchResults] = useState<UserProfile[]>([])
  const [searchLoading, setSearchLoading] = useState(false)
  const [searchError, setSearchError] = useState('')
  const [loading, setLoading] = useState(true)
  const [message, setMessage] = useState('')
  const [actionLoading, setActionLoading] = useState<string | null>(null)

  // Debounced search
  const debouncedSearch = useCallback(
    debounce(async (searchTerm: string, currentUserId: string) => {
      if (searchTerm.length < 2) {
        setSearchResults([])
        setSearchError('')
        setSearchLoading(false)
        return
      }

      setSearchLoading(true)
      setSearchError('')
      
      try {
        console.log(`🔍 Szukam: "${searchTerm}"`)
        const results = await userService.findUsersByName(searchTerm, currentUserId)
        console.log(`✅ Znaleziono ${results.length} wyników`)
        setSearchResults(results)
        
        if (results.length === 0 && searchTerm.length >= 2) {
          setSearchError(`Nie znaleziono użytkowników zawierających "${searchTerm}"`)
        }
      } catch (error) {
        console.error('❌ Błąd wyszukiwania:', error)
        setSearchError('Wystąpił błąd podczas wyszukiwania. Spróbuj ponownie.')
        setSearchResults([])
      } finally {
        setSearchLoading(false)
      }
    }, 600),
    []
  )

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (usr) => {
      setUser(usr)
      if (!usr) {
        setLoading(false)
        return
      }
      
      await loadUserProfile(usr.uid)
    })

    return () => unsubscribe()
  }, [])

  // Obsługa wyszukiwania
  useEffect(() => {
    if (user && searchName.trim()) {
      setSearchLoading(true)
      debouncedSearch(searchName, user.uid)
    } else {
      setSearchResults([])
      setSearchError('')
      setSearchLoading(false)
    }
  }, [searchName, user, debouncedSearch])

  const loadUserProfile = async (uid: string) => {
    try {
      const profile = await userService.getUserProfile(uid)
      setUserProfile(profile)
      
      if (profile) {
        await loadFriends(profile.uid)
        await loadRequests(profile.uid)
      }
    } catch (error) {
      console.error('Błąd ładowania profilu:', error)
      setMessage('❌ Błąd ładowania profilu')
    } finally {
      setLoading(false)
    }
  }

  const loadFriends = async (userId: string) => {
    try {
      const userFriends = await userService.getFriends(userId)
      setFriends(userFriends)
    } catch (error) {
      console.error('Błąd ładowania znajomych:', error)
      setFriends([])
    }
  }

  const loadRequests = async (userId: string) => {
    try {
      const userRequests = await userService.getFriendRequests(userId)
      setRequests(userRequests)
    } catch (error) {
      console.error('Błąd ładowania zaproszeń:', error)
      setRequests([])
    }
  }

  const handleSendRequest = async (toUserId: string, toUserName: string) => {
    if (!userProfile?.uid) return

    setActionLoading(`send-${toUserId}`)
    try {
      await userService.sendFriendRequest(userProfile.uid, toUserId)
      setMessage(`✅ Zaproszenie wysłane do ${toUserName}!`)
      setSearchResults(prev => prev.filter(u => u.uid !== toUserId))
    } catch (error: any) {
      setMessage('❌ ' + (error.message || 'Nie udało się wysłać zaproszenia'))
    } finally {
      setActionLoading(null)
    }
  }

  const handleAcceptRequest = async (requestId: string, fromUserName: string) => {
    if (!userProfile?.uid) return

    setActionLoading(`accept-${requestId}`)
    try {
      await userService.acceptFriendRequest(requestId, userProfile.uid)
      setMessage(`✅ Zaakceptowano zaproszenie od ${fromUserName}!`)
      await loadRequests(userProfile.uid)
      await loadFriends(userProfile.uid)
    } catch (error: any) {
      setMessage('❌ ' + (error.message || 'Nie udało się zaakceptować zaproszenia'))
    } finally {
      setActionLoading(null)
    }
  }

  const handleRejectRequest = async (requestId: string) => {
    setActionLoading(`reject-${requestId}`)
    try {
      await userService.rejectFriendRequest(requestId)
      setMessage('📭 Zaproszenie odrzucone')
      if (userProfile?.uid) {
        await loadRequests(userProfile.uid)
      }
    } catch (error: any) {
      setMessage('❌ ' + (error.message || 'Nie udało się odrzucić zaproszenia'))
    } finally {
      setActionLoading(null)
    }
  }

  const handleRemoveFriend = async (friendId: string, friendName: string) => {
    if (!userProfile?.uid || !confirm(`Czy na pewno chcesz usunąć ${friendName} ze znajomych?`)) return
    
    setActionLoading(`remove-${friendId}`)
    try {
      await userService.removeFriend(userProfile.uid, friendId)
      setMessage(`👋 Usunięto ${friendName} ze znajomych`)
      await loadFriends(userProfile.uid)
    } catch (error: any) {
      setMessage('❌ ' + (error.message || 'Nie udało się usunąć znajomego'))
    } finally {
      setActionLoading(null)
    }
  }

  const copyDisplayName = async () => {
    if (userProfile?.displayName) {
      await navigator.clipboard.writeText(userProfile.displayName)
      setMessage('📋 Nazwa skopiowana! Podziel się nią ze znajomymi.')
      setTimeout(() => setMessage(''), 3000)
    }
  }

  // Auto-ukrywanie wiadomości
  useEffect(() => {
    if (message) {
      const timer = setTimeout(() => setMessage(''), 5000)
      return () => clearTimeout(timer)
    }
  }, [message])

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center">
        <div className="text-center">
          <Loader2 className="h-12 w-12 animate-spin text-blue-500 mx-auto mb-4" />
          <p className="text-gray-600">Ładowanie znajomych...</p>
        </div>
      </div>
    )
  }

  if (!user) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center">
        <div className="text-center">
          <Users className="h-16 w-16 text-gray-400 mx-auto mb-4" />
          <h2 className="text-xl font-semibold text-gray-900 mb-2">Nie jesteś zalogowany</h2>
          <p className="text-gray-600 mb-4">Zaloguj się, aby zobaczyć swoich znajomych</p>
          <Link href="/auth/login">
            <Button>Zaloguj się</Button>
          </Link>
        </div>
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 py-8">
      <div className="container mx-auto max-w-4xl px-4">
        
        {/* Header */}
        <div className="text-center mb-8">
          <div className="inline-flex items-center gap-3 px-6 py-3 rounded-2xl bg-white/80 backdrop-blur-sm border border-white/20 shadow-lg mb-6">
            <div className="p-2 bg-gradient-to-br from-blue-500 to-purple-600 rounded-xl">
              <Users className="h-6 w-6 text-white" />
            </div>
            <div className="text-left">
              <h1 className="text-2xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
                Twoi Znajomi
              </h1>
              <p className="text-gray-600 text-sm">
                {userProfile?.displayName ? `Witaj, ${userProfile.displayName}!` : 'Ładowanie...'}
              </p>
            </div>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <StatCard 
            icon={Users}
            value={friends.length}
            label="Znajomych"
            color="blue"
          />
          <StatCard 
            icon={Mail}
            value={requests.length}
            label="Zaproszeń"
            color="orange"
          />
          <StatCard 
            icon={Sparkles}
            value={friends.reduce((acc, friend) => acc + (friend.streak || 0), 0)}
            label="Łączny streak"
            color="green"
          />
        </div>

        {/* Tabs */}
        <div className="mb-8">
          <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/20">
            <CardContent className="p-4">
              <div className="flex space-x-1 overflow-x-auto">
                <TabButton
                  active={activeTab === 'friends'}
                  onClick={() => setActiveTab('friends')}
                  icon={Users}
                  label="Twoi Znajomi"
                  count={friends.length}
                />
                <TabButton
                  active={activeTab === 'requests'}
                  onClick={() => setActiveTab('requests')}
                  icon={Mail}
                  label="Zaproszenia"
                  count={requests.length}
                />
                <TabButton
                  active={activeTab === 'search'}
                  onClick={() => setActiveTab('search')}
                  icon={Search}
                  label="Szukaj Znajomych"
                />
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Message */}
        {message && (
          <div className={getMessageClass(message)}>
            {getMessageIcon(message)}
            <span>{message.replace(/[✅❌📭👋📋]/g, '').trim()}</span>
          </div>
        )}

        {/* Content */}
        <div className="space-y-6">
          {activeTab === 'friends' && (
            <FriendsList 
              friends={friends}
              onRemoveFriend={handleRemoveFriend}
              actionLoading={actionLoading}
              onSearchClick={() => setActiveTab('search')}
            />
          )}

          {activeTab === 'requests' && (
            <RequestsList 
              requests={requests}
              onAcceptRequest={handleAcceptRequest}
              onRejectRequest={handleRejectRequest}
              actionLoading={actionLoading}
            />
          )}

          {activeTab === 'search' && (
            <SearchTab 
              searchName={searchName}
              setSearchName={setSearchName}
              searchResults={searchResults}
              searchLoading={searchLoading}
              searchError={searchError}
              userProfile={userProfile}
              onSendRequest={handleSendRequest}
              actionLoading={actionLoading}
              onCopyDisplayName={copyDisplayName}
            />
          )}
        </div>
      </div>
    </div>
  )
}

// Komponenty pomocnicze
function StatCard({ icon: Icon, value, label, color }: any) {
  const colorClasses = {
    blue: 'bg-blue-100 text-blue-600',
    orange: 'bg-orange-100 text-orange-600', 
    green: 'bg-green-100 text-green-600',
    purple: 'bg-purple-100 text-purple-600'
  }

  return (
    <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm border border-white/20">
      <CardContent className="p-6 text-center">
        <div className={`w-12 h-12 ${colorClasses[color]} rounded-2xl flex items-center justify-center mx-auto mb-3`}>
          <Icon className="h-6 w-6" />
        </div>
        <div className="text-2xl font-bold text-gray-900">{value}</div>
        <div className="text-gray-600">{label}</div>
      </CardContent>
    </Card>
  )
}

function TabButton({ active, onClick, icon: Icon, label, count }: any) {
  return (
    <button
      onClick={onClick}
      className={cn(
        "flex items-center gap-3 px-4 py-3 rounded-xl text-sm font-medium transition-all duration-200 flex-1 min-w-0 whitespace-nowrap",
        active
          ? "bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg"
          : "text-gray-600 hover:text-gray-900 hover:bg-white/50"
      )}
    >
      <Icon className="h-4 w-4 flex-shrink-0" />
      <span className="truncate">{label}</span>
      {count > 0 && (
        <span className={cn(
          "text-xs px-2 py-1 rounded-full flex-shrink-0",
          active 
            ? "bg-white/20 text-white" 
            : "bg-blue-100 text-blue-600"
        )}>
          {count}
        </span>
      )}
    </button>
  )
}

function getMessageClass(message: string) {
  if (message.includes('✅')) return "p-4 rounded-xl text-sm font-medium border flex items-center gap-3 animate-in fade-in duration-300 bg-green-50 border-green-200 text-green-700"
  if (message.includes('❌')) return "p-4 rounded-xl text-sm font-medium border flex items-center gap-3 animate-in fade-in duration-300 bg-red-50 border-red-200 text-red-700"
  if (message.includes('📭')) return "p-4 rounded-xl text-sm font-medium border flex items-center gap-3 animate-in fade-in duration-300 bg-blue-50 border-blue-200 text-blue-700"
  if (message.includes('👋')) return "p-4 rounded-xl text-sm font-medium border flex items-center gap-3 animate-in fade-in duration-300 bg-orange-50 border-orange-200 text-orange-700"
  if (message.includes('📋')) return "p-4 rounded-xl text-sm font-medium border flex items-center gap-3 animate-in fade-in duration-300 bg-purple-50 border-purple-200 text-purple-700"
  return "p-4 rounded-xl text-sm font-medium border flex items-center gap-3 animate-in fade-in duration-300 bg-gray-50 border-gray-200 text-gray-700"
}

function getMessageIcon(message: string) {
  if (message.includes('✅')) return <Check className="h-5 w-5" />
  if (message.includes('❌')) return <AlertCircle className="h-5 w-5" />
  if (message.includes('📭')) return <Mail className="h-5 w-5" />
  if (message.includes('👋')) return <UserX className="h-5 w-5" />
  if (message.includes('📋')) return <Copy className="h-5 w-5" />
  return <Sparkles className="h-5 w-5" />
}

function FriendsList({ friends, onRemoveFriend, actionLoading, onSearchClick }: any) {
  if (friends.length === 0) {
    return (
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardContent className="text-center py-16">
          <Users className="h-20 w-20 text-gray-300 mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-900 mb-2">Brak znajomych</h3>
          <p className="text-gray-600 mb-6 max-w-md mx-auto">
            Dodaj pierwszego znajomego, aby wspólnie dbać o swoje samopoczucie i motywować się nawzajem
          </p>
          <Button 
            onClick={onSearchClick}
            className="bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600"
          >
            <Search className="h-4 w-4 mr-2" />
            Znajdź znajomych
          </Button>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {friends.map((friend) => (
        <Card key={friend.uid} className="border-0 shadow-lg bg-white/80 backdrop-blur-sm hover:shadow-xl transition-all duration-300 group">
          <CardContent className="p-6">
            <div className="flex flex-col items-center text-center">
              {/* Avatar */}
              <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center text-white font-bold text-2xl mb-4 shadow-lg group-hover:scale-105 transition-transform">
                {friend.avatarUrl ? (
                  <img 
                    src={friend.avatarUrl} 
                    alt={friend.displayName}
                    className="w-full h-full object-cover rounded-2xl"
                  />
                ) : (
                  friend.displayName?.charAt(0).toUpperCase() || 'U'
                )}
              </div>
              
              {/* Info */}
              <h3 className="font-bold text-gray-900 text-lg mb-1">
                {friend.displayName}
              </h3>
              <p className="text-gray-600 text-sm mb-2">
                {friend.email}
              </p>

              {/* Stats */}
              <div className="grid grid-cols-2 gap-4 w-full mb-4">
                <div className="text-center p-3 bg-blue-50 rounded-xl">
                  <div className="font-bold text-blue-600 text-lg">{friend.streak || 0}</div>
                  <div className="text-xs text-blue-600">dni streak</div>
                </div>
                <div className="text-center p-3 bg-green-50 rounded-xl">
                  <div className="font-bold text-green-600 text-lg">{friend.consistency || 0}%</div>
                  <div className="text-xs text-green-600">konsystencja</div>
                </div>
              </div>

              {/* Actions */}
              <div className="flex gap-2 w-full">
                <Button
                  variant="outline"
                  size="sm"
                  className="flex-1 border-gray-300"
                  onClick={() => window.open(`mailto:${friend.email}`, '_blank')}
                >
                  <Mail className="h-4 w-4 mr-2" />
                  Email
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => onRemoveFriend(friend.uid, friend.displayName || 'tego znajomego')}
                  disabled={actionLoading === `remove-${friend.uid}`}
                  className="border-red-300 text-red-600 hover:bg-red-50"
                >
                  {actionLoading === `remove-${friend.uid}` ? (
                    <Loader2 className="h-4 w-4 animate-spin" />
                  ) : (
                    <UserX className="h-4 w-4" />
                  )}
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}

function RequestsList({ requests, onAcceptRequest, onRejectRequest, actionLoading }: any) {
  if (requests.length === 0) {
    return (
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardContent className="text-center py-16">
          <Mail className="h-20 w-20 text-gray-300 mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-900 mb-2">Brak oczekujących zaproszeń</h3>
          <p className="text-gray-600 max-w-md mx-auto">
            Nowe zaproszenia do grona znajomych pojawią się tutaj. 
            Możesz też sam wysłać zaproszenie do znajomych!
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {requests.map((request) => (
        <Card key={request.id} className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
          <CardContent className="p-6">
            <div className="flex items-center gap-4 mb-4">
              <div className="w-16 h-16 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center text-white font-bold text-xl">
                {request.fromUserProfile?.avatarUrl ? (
                  <img 
                    src={request.fromUserProfile.avatarUrl} 
                    alt={request.fromUserProfile.displayName}
                    className="w-full h-full object-cover rounded-2xl"
                  />
                ) : (
                  request.fromUserProfile?.displayName?.charAt(0).toUpperCase() || 'U'
                )}
              </div>
              <div className="flex-1">
                <h3 className="font-bold text-gray-900 text-lg">
                  {request.fromUserProfile?.displayName || 'Nieznany użytkownik'}
                </h3>
                <p className="text-gray-600 text-sm">
                  Chce zostać Twoim znajomym
                </p>
                <p className="text-xs text-gray-500 mt-1">
                  {request.fromUserProfile?.email}
                </p>
              </div>
            </div>
            
            <div className="flex gap-2">
              <Button
                onClick={() => onAcceptRequest(request.id, request.fromUserProfile?.displayName || 'użytkownika')}
                disabled={actionLoading === `accept-${request.id}`}
                className="flex-1 bg-green-600 hover:bg-green-700"
              >
                {actionLoading === `accept-${request.id}` ? (
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                ) : (
                  <Check className="h-4 w-4 mr-2" />
                )}
                Zaakceptuj
              </Button>
              <Button
                variant="outline"
                onClick={() => onRejectRequest(request.id)}
                disabled={actionLoading === `reject-${request.id}`}
                className="flex-1 border-gray-300"
              >
                {actionLoading === `reject-${request.id}` ? (
                  <Loader2 className="h-4 w-4 animate-spin mr-2" />
                ) : (
                  <X className="h-4 w-4 mr-2" />
                )}
                Odrzuć
              </Button>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}

function SearchTab({
  searchName,
  setSearchName,
  searchResults,
  searchLoading,
  searchError,
  userProfile,
  onSendRequest,
  actionLoading,
  onCopyDisplayName
}: any) {
  return (
    <div className="space-y-6">
      <Card className="border-0 shadow-lg bg-white/80 backdrop-blur-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Search className="h-5 w-5" />
            Znajdź znajomych po nazwie
          </CardTitle>
          <CardDescription>
            Wpisz imię, nazwisko lub email użytkownika, którego chcesz znaleźć
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="space-y-2">
            <label htmlFor="searchName" className="text-sm font-medium text-gray-700">
              Nazwa użytkownika
            </label>
            <div className="flex gap-2">
              <Input
                id="searchName"
                type="text"
                placeholder="np. Anna, jan@email.com, Kowalski..."
                value={searchName}
                onChange={(e) => setSearchName(e.target.value)}
                className="flex-1"
              />
              <Button 
                onClick={onCopyDisplayName}
                disabled={!userProfile?.displayName}
                variant="outline"
                className="border-gray-300"
              >
                <Copy className="h-4 w-4" />
              </Button>
            </div>
            <p className="text-xs text-gray-500">
              Wpisz co najmniej 2 znaki. Twoja nazwa: <strong>{userProfile?.displayName}</strong>
            </p>
          </div>

          {/* Błąd wyszukiwania */}
          {searchError && (
            <div className="p-3 bg-red-50 border border-red-200 rounded-xl text-red-700 text-sm flex items-center gap-2">
              <AlertCircle className="h-4 w-4" />
              {searchError}
            </div>
          )}

          {/* Loading indicator */}
          {searchLoading && (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin text-blue-500 mr-3" />
              <span className="text-gray-600">Szukam użytkowników w bazie...</span>
            </div>
          )}

          {/* Wyniki wyszukiwania */}
          {searchResults.length > 0 && (
            <div className="space-y-3">
              <h3 className="font-semibold text-gray-900">
                Znaleziono {searchResults.length} użytkowników:
              </h3>
              {searchResults.map((foundUser) => (
                <Card key={foundUser.uid} className="border-2 border-green-200 bg-green-50 animate-in fade-in duration-300">
                  <CardContent className="p-4">
                    <div className="flex items-center gap-4">
                      <div className="w-16 h-16 bg-gradient-to-br from-green-500 to-blue-600 rounded-2xl flex items-center justify-center text-white font-bold text-xl">
                        {foundUser.avatarUrl ? (
                          <img 
                            src={foundUser.avatarUrl} 
                            alt={foundUser.displayName}
                            className="w-full h-full object-cover rounded-2xl"
                          />
                        ) : (
                          foundUser.displayName?.charAt(0).toUpperCase() || 'U'
                        )}
                      </div>
                      <div className="flex-1">
                        <h3 className="font-bold text-gray-900 text-lg">
                          {foundUser.displayName}
                        </h3>
                        <p className="text-gray-600 text-sm">
                          {foundUser.email}
                        </p>
                        {foundUser.bio && (
                          <p className="text-gray-500 text-sm mt-1">{foundUser.bio}</p>
                        )}
                      </div>
                    </div>
                    
                    <Button
                      onClick={() => onSendRequest(foundUser.uid, foundUser.displayName || 'użytkownika')}
                      disabled={actionLoading === `send-${foundUser.uid}`}
                      className="w-full mt-4 bg-gradient-to-r from-green-500 to-blue-500 hover:from-green-600 hover:to-blue-600"
                    >
                      {actionLoading === `send-${foundUser.uid}` ? (
                        <Loader2 className="h-4 w-4 animate-spin mr-2" />
                      ) : (
                        <UserPlus className="h-4 w-4 mr-2" />
                      )}
                      Wyślij zaproszenie
                    </Button>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}

          {/* Pomoc */}
          {!searchResults.length && !searchError && !searchLoading && searchName.length < 2 && (
            <div className="p-4 bg-blue-50 rounded-xl border border-blue-200">
              <h4 className="font-medium text-blue-900 mb-2 flex items-center gap-2">
                <Sparkles className="h-4 w-4" />
                Jak to działa?
              </h4>
              <p className="text-blue-700 text-sm">
                Wyszukiwanie przeszukuje bazę Firebase po:
              </p>
              <ul className="text-blue-700 text-sm mt-2 space-y-1">
                <li>• <strong>Imieniu</strong> (Anna, Jan, Maria)</li>
                <li>• <strong>Nazwisku</strong> (Kowalska, Nowak)</li>
                <li>• <strong>Emailu</strong> (anna@email.com)</li>
                <li>• <strong>Nazwie użytkownika</strong> (AnnaKowalska)</li>
              </ul>
              <div className="mt-3 text-xs text-blue-600">
                <strong>Przykład:</strong> Wyszukaj "eli" aby znaleźć "Elia", "Eliot", "Marcelina"
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}-e 

=== ./src/app/dashboard/page.tsx ===
// src/app/dashboard/page.tsx - UPROSZCZONA WERSJA
'use client'

import { useState, useEffect, useCallback, useMemo } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { 
  TrendingUp, Zap, Brain, Award, 
  Heart, BarChart3, Plus, Edit3,
  Maximize2, Minimize2, Sparkles,
  Activity
} from 'lucide-react'
import { cn } from '@/lib/utils'
import Link from 'next/link'

// Proste importy - bez Firestore
import { useAuth } from '@/components/providers/auth-provider'

// Types
interface Widget {
  id: string
  type: WidgetType
  enabled: boolean
  size: 'small' | 'medium' | 'large'
  position: number
}

type WidgetType = 'mood-today' | 'trend' | 'streak' | 'ai-insights' | 'tools' | 'stats'

interface UserData {
  uid: string
  firstName: string
  lastName: string
  level: number
  xp: number
  streak: number
  currentMood?: number
  moodEntries: any[]
  createdAt: Date
}

// Demo Data - ZAMIast Firestore
const DEMO_USER_DATA: UserData = {
  uid: 'demo-user',
  firstName: 'Gość',
  lastName: 'Demo',
  level: 3,
  xp: 450,
  streak: 7,
  currentMood: 75,
  moodEntries: [
    { 
      id: '1',
      mood: 75, 
      timestamp: new Date(), 
      note: 'Dzień dobry! Cieszę się, że testujesz tę aplikację. To dane demonstracyjne pokazujące jak będzie wyglądał Twój dashboard.' 
    },
    { 
      id: '2',
      mood: 60, 
      timestamp: new Date(Date.now() - 86400000), 
      note: 'Spokojny dzień pracy' 
    },
    { 
      id: '3',
      mood: 80, 
      timestamp: new Date(Date.now() - 172800000), 
      note: 'Świetny nastrój po spotkaniu z przyjaciółmi!' 
    },
    { 
      id: '4',
      mood: 55, 
      timestamp: new Date(Date.now() - 259200000), 
      note: 'Trochę zmęczony, ale ogólnie ok' 
    },
    { 
      id: '5',
      mood: 90, 
      timestamp: new Date(Date.now() - 345600000), 
      note: 'Niesamowity dzień! Udało mi się zrealizować wszystkie cele.' 
    },
    { 
      id: '6',
      mood: 70, 
      timestamp: new Date(Date.now() - 432000000), 
      note: 'Stabilny dzień' 
    },
    { 
      id: '7',
      mood: 65, 
      timestamp: new Date(Date.now() - 518400000), 
      note: 'Poranny trening dodał mi energii' 
    },
  ],
  createdAt: new Date()
}

const DEFAULT_WIDGETS: Widget[] = [
  { id: '1', type: 'mood-today', enabled: true, size: 'large', position: 0 },
  { id: '2', type: 'trend', enabled: true, size: 'large', position: 1 },
  { id: '3', type: 'streak', enabled: true, size: 'medium', position: 2 },
  { id: '4', type: 'ai-insights', enabled: true, size: 'medium', position: 3 },
  { id: '5', type: 'tools', enabled: true, size: 'small', position: 4 },
  { id: '6', type: 'stats', enabled: true, size: 'small', position: 5 },
]

const WIDGET_CONFIG = {
  'mood-today': { 
    name: 'Twój Nastrój', 
    icon: Heart, 
    description: 'Jak się dziś czujesz?',
    defaultSize: 'large' as const,
    gradient: 'from-pink-500 to-rose-500',
    color: 'text-pink-500'
  },
  'trend': { 
    name: 'Trend Nastroju', 
    icon: TrendingUp, 
    description: 'Twoja 7-dniowa podróż',
    defaultSize: 'large' as const,
    gradient: 'from-blue-500 to-cyan-500',
    color: 'text-blue-500'
  },
  'streak': { 
    name: 'Seria Dni', 
    icon: Award, 
    description: 'Buduj nawyk',
    defaultSize: 'medium' as const,
    gradient: 'from-amber-500 to-orange-500',
    color: 'text-amber-500'
  },
  'ai-insights': { 
    name: 'AI Insights', 
    icon: Brain, 
    description: 'Spersonalizowane wskazówki',
    defaultSize: 'medium' as const,
    gradient: 'from-purple-500 to-indigo-500',
    color: 'text-purple-500'
  },
  'tools': { 
    name: 'Szybkie Narzędzia', 
    icon: Zap, 
    description: 'Natychmiastowa ulga',
    defaultSize: 'small' as const,
    gradient: 'from-green-500 to-emerald-500',
    color: 'text-green-500'
  },
  'stats': { 
    name: 'Twoje Statystyki', 
    icon: BarChart3, 
    description: 'Postępy i wyniki',
    defaultSize: 'small' as const,
    gradient: 'from-slate-600 to-slate-700',
    color: 'text-slate-600'
  }
} as const

export default function PremiumDashboard() {
  const { user: authUser, loading } = useAuth()
  const [user, setUser] = useState<UserData | null>(null)
  const [moodEntries, setMoodEntries] = useState<any[]>([])
  const [widgets, setWidgets] = useState<Widget[]>(DEFAULT_WIDGETS)
  const [todayEntry, setTodayEntry] = useState<any>(null)
  const [streakData, setStreakData] = useState({ 
    currentStreak: 0, 
    longestStreak: 0, 
    perfectMonth: false 
  })
  const [isMobile, setIsMobile] = useState(false)

  // Responsive detection
  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth < 768)
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  // PROSTE ŁADOWANIE DANYCH - BEZ FIRESTORE
  useEffect(() => {
    if (loading) return

    // Zawsze używaj danych demo dla testów
    const userData = DEMO_USER_DATA
    setUser(userData)
    setMoodEntries(userData.moodEntries)
    
    // Oblicz streak z danych demo
    const streak = calculateStreakFromEntries(userData.moodEntries)
    setStreakData(streak)
    
    // Znajdź dzisiejszy wpis
    const today = findTodayEntry(userData.moodEntries)
    setTodayEntry(today)

    console.log('✅ Dashboard loaded with demo data')
  }, [loading])

  // Memoized calculations
  const stats = useMemo(() => {
    if (!moodEntries.length) return { averageMood: 50, trend: 0, consistency: 75 }
    return calculateStats(moodEntries)
  }, [moodEntries])

  const enabledWidgets = useMemo(() => 
    widgets.filter(w => w.enabled).sort((a, b) => a.position - b.position),
    [widgets]
  )

  // Grid system
  const gridConfig = useMemo(() => {
    if (isMobile) {
      return {
        columns: 2,
        large: "col-span-2 min-h-[300px]",
        medium: "col-span-2 min-h-[220px]", 
        small: "col-span-1 min-h-[180px]"
      }
    } else {
      return {
        columns: 4,
        large: "col-span-2 min-h-[360px]",
        medium: "col-span-1 min-h-[280px]",
        small: "col-span-1 min-h-[200px]"
      }
    }
  }, [isMobile])

  const getGridClass = useCallback((size: Widget['size']) => {
    return cn("transition-all duration-500", gridConfig[size])
  }, [gridConfig])

  const renderWidget = useCallback((widget: Widget) => {
    const props = { isMobile, className: "h-full" }
    
    switch (widget.type) {
      case 'mood-today':
        return <MoodTodayWidget {...props} todayEntry={todayEntry} />
      case 'trend':
        return <TrendWidget {...props} moodEntries={moodEntries} stats={stats} />
      case 'streak':
        return <StreakWidget {...props} streakData={streakData} />
      case 'ai-insights':
        return <AIInsightsWidget {...props} todayEntry={todayEntry} />
      case 'tools':
        return <ToolsWidget {...props} />
      case 'stats':
        return <StatsWidget {...props} user={user} stats={stats} moodEntries={moodEntries} />
      default:
        return <PlaceholderWidget {...props} />
    }
  }, [todayEntry, moodEntries, stats, streakData, user, isMobile])

  if (loading) return <LoadingScreen />

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10">
      <div className="container mx-auto px-4 py-6 max-w-7xl">
        {/* Demo Mode Banner */}
        <motion.div
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-6 p-4 bg-gradient-to-r from-blue-50 to-purple-50 border border-blue-200 rounded-xl"
        >
          <div className="flex items-center gap-3">
            <div className="p-2 bg-blue-100 rounded-lg">
              <Sparkles className="h-5 w-5 text-blue-600" />
            </div>
            <div className="flex-1">
              <p className="font-semibold text-blue-800">Tryb demonstracyjny 🚀</p>
              <p className="text-blue-700 text-sm">
                {authUser 
                  ? `Witaj ${authUser.displayName || authUser.email}! Oto podgląd Twojego przyszłego dashboardu.` 
                  : 'Przeglądasz demo aplikacji. Zaloguj się, aby zapisywać swoje dane.'
                }
              </p>
            </div>
            {!authUser && (
              <Link href="/auth/login">
                <Button className="bg-blue-500 hover:bg-blue-600 text-white">
                  Zaloguj się
                </Button>
              </Link>
            )}
          </div>
        </motion.div>

        {/* Animated Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
                Witaj, {user?.firstName || 'Przyjacielu'}! 👋
              </h1>
              <p className="text-slate-600 mt-2 text-lg">
                Jak dziś się miewasz? Pamiętaj o swoim codziennym wpisie.
              </p>
            </div>
            
            <motion.div
              whileHover={{ scale: 1.05 }}
              className="hidden lg:flex items-center gap-3 px-6 py-3 rounded-2xl bg-gradient-to-r from-blue-500 to-purple-500 text-white shadow-lg"
            >
              <Sparkles className="h-5 w-5" />
              <span className="font-semibold">Poziom {user?.level || 1}</span>
            </motion.div>
          </div>
        </motion.div>

        {/* Quick Insights */}
        <QuickInsights stats={stats} streakData={streakData} moodEntries={moodEntries} isMobile={isMobile} />

        {/* Main Grid */}
        <motion.div
          layout
          className={cn(
            "grid gap-6 auto-rows-min w-full",
            isMobile ? "gap-4" : "gap-6"
          )}
          style={{ gridTemplateColumns: `repeat(${gridConfig.columns}, minmax(0, 1fr))` }}
        >
          <AnimatePresence mode="popLayout">
            {enabledWidgets.map((widget, index) => (
              <motion.div
                key={widget.id}
                layout
                initial={{ opacity: 0, scale: 0.9, y: 20 }}
                animate={{ 
                  opacity: 1, 
                  scale: 1,
                  y: 0,
                  transition: { 
                    delay: index * 0.1,
                    type: "spring",
                    stiffness: 100,
                    damping: 15
                  }
                }}
                whileHover={{ y: -4 }}
                className={getGridClass(widget.size)}
              >
                {renderWidget(widget)}
              </motion.div>
            ))}
          </AnimatePresence>
        </motion.div>
      </div>
    </div>
  )
}

// 🔥 QUICK INSIGHTS - GENIALNE STATYSTYKI
function QuickInsights({ stats, streakData, moodEntries, isMobile }: any) {
  const insights = [
    {
      value: streakData.currentStreak,
      label: "Dni Streak",
      icon: "🔥",
      trend: streakData.currentStreak > 0 ? "positive" : "neutral",
      description: "Twoja codzienna seria"
    },
    {
      value: moodEntries.length,
      label: "Wpisów",
      icon: "📊",
      trend: "neutral",
      description: "Łączna liczba"
    },
    {
      value: `${stats.consistency}%`,
      label: "Konsystencja",
      icon: "🎯",
      trend: stats.consistency > 70 ? "positive" : "neutral",
      description: "Regularność wpisów"
    },
    ...(isMobile ? [] : [{
      value: `${stats.averageMood}%`,
      label: "Średni Nastrój",
      icon: "💖",
      trend: "positive",
      description: "Ostatnie 7 dni"
    }])
  ]

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.2 }}
      className={cn(
        "grid mb-8",
        isMobile ? "grid-cols-3 gap-3" : "grid-cols-4 gap-4"
      )}
    >
      {insights.map((insight, index) => (
        <motion.div
          key={insight.label}
          whileHover={{ scale: 1.02, y: -2 }}
          whileTap={{ scale: 0.98 }}
          className={cn(
            "bg-white/80 backdrop-blur-sm rounded-2xl p-4 border border-slate-200/60",
            "transition-all duration-300 hover:shadow-lg hover:border-slate-300"
          )}
        >
          <div className="flex items-center justify-between mb-2">
            <span className="text-2xl">{insight.icon}</span>
            <div className={cn(
              "w-2 h-2 rounded-full",
              insight.trend === "positive" ? "bg-green-400" : "bg-blue-400"
            )} />
          </div>
          
          <div className="space-y-1">
            <div className="text-2xl font-bold text-slate-800">{insight.value}</div>
            <div className="text-sm font-semibold text-slate-600">{insight.label}</div>
            <div className="text-xs text-slate-500">{insight.description}</div>
          </div>
        </motion.div>
      ))}
    </motion.div>
  )
}

// 🔥 MOOD TODAY WIDGET - GENIALNY
function MoodTodayWidget({ todayEntry, isMobile, className }: any) {
  const [isNoteExpanded, setIsNoteExpanded] = useState(false)
  
  const getMoodConfig = (mood: number) => {
    const configs = [
      { emoji: '😔', label: 'Bardzo niski', gradient: 'from-slate-400 to-slate-500', bg: 'bg-slate-100', color: 'text-slate-600' },
      { emoji: '😐', label: 'Niski', gradient: 'from-blue-400 to-blue-500', bg: 'bg-blue-100', color: 'text-blue-600' },
      { emoji: '🙂', label: 'Neutralny', gradient: 'from-green-400 to-green-500', bg: 'bg-green-100', color: 'text-green-600' },
      { emoji: '😊', label: 'Wysoki', gradient: 'from-purple-400 to-purple-500', bg: 'bg-purple-100', color: 'text-purple-600' },
      { emoji: '🤩', label: 'Bardzo wysoki', gradient: 'from-amber-400 to-amber-500', bg: 'bg-amber-100', color: 'text-amber-600' }
    ]
    return configs[Math.floor((mood - 1) / 20)] || configs[2]
  }

  const moodConfig = todayEntry ? getMoodConfig(todayEntry.mood) : getMoodConfig(50)

  return (
    <Card className={cn(
      className,
      "relative overflow-hidden border-0 shadow-xl bg-gradient-to-br from-white to-slate-50/80",
      "hover:shadow-2xl transition-all duration-500"
    )}>
      {/* Animated Background */}
      <div className={cn(
        "absolute inset-0 opacity-[0.02]",
        `bg-gradient-to-br ${moodConfig.gradient}`
      )} />
      
      <CardHeader className="pb-4 relative z-10">
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <div className={cn(
              "p-2 rounded-xl shadow-lg",
              `bg-gradient-to-br ${moodConfig.gradient}`
            )}>
              <Heart className="h-5 w-5 text-white" />
            </div>
            <div>
              <div className="text-lg font-bold text-slate-800">Twój Nastrój</div>
              <div className="text-sm text-slate-600">Jak się dziś czujesz?</div>
            </div>
          </div>
          
          {todayEntry?.note && !isMobile && (
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsNoteExpanded(!isNoteExpanded)}
              className="h-9 w-9 p-0 rounded-lg hover:bg-slate-100/50"
            >
              {isNoteExpanded ? (
                <Minimize2 className="h-4 w-4 text-slate-500" />
              ) : (
                <Maximize2 className="h-4 w-4 text-slate-500" />
              )}
            </Button>
          )}
        </CardTitle>
      </CardHeader>
      
      <CardContent className="relative z-10">
        {todayEntry ? (
          <div className="space-y-6">
            {/* Mood Display */}
            <motion.div 
              className="text-center space-y-4"
              initial={{ scale: 0.8 }}
              animate={{ scale: 1 }}
              transition={{ type: "spring", stiffness: 200 }}
            >
              <motion.div
                className={cn(
                  "text-6xl mb-2 cursor-pointer",
                  isMobile ? "text-5xl" : "text-7xl"
                )}
                whileHover={{ scale: 1.1, rotate: 5 }}
                whileTap={{ scale: 0.95 }}
              >
                {moodConfig.emoji}
              </motion.div>
              
              <div className="space-y-2">
                <div className={cn(
                  "text-4xl font-black bg-gradient-to-r bg-clip-text text-transparent",
                  moodConfig.gradient,
                  isMobile ? "text-3xl" : "text-4xl"
                )}>
                  {todayEntry.mood}%
                </div>
                <div className={cn(
                  "text-lg font-semibold px-6 py-2 rounded-full inline-block border-2",
                  moodConfig.bg,
                  moodConfig.color,
                  "border-current/20"
                )}>
                  {moodConfig.label}
                </div>
              </div>
            </motion.div>

            {/* Note Section */}
            {todayEntry.note && (
              <motion.div 
                layout
                className={cn(
                  "rounded-xl border-2 transition-all duration-500 overflow-hidden",
                  "bg-white/50 backdrop-blur-sm",
                  isNoteExpanded ? "border-slate-300" : "border-slate-200",
                  !isMobile && "cursor-pointer hover:border-slate-300"
                )}
                onClick={() => !isMobile && setIsNoteExpanded(!isNoteExpanded)}
              >
                <div className="p-4">
                  <div className="flex items-center gap-2 mb-3">
                    <Edit3 className="h-4 w-4 text-slate-600" />
                    <span className="font-semibold text-slate-700">Twoja notatka</span>
                    {!isMobile && (
                      <span className="text-xs text-slate-500 ml-auto">
                        {isNoteExpanded ? 'Kliknij aby zwinąć' : 'Kliknij aby rozwinąć'}
                      </span>
                    )}
                  </div>
                  <motion.div
                    initial={false}
                    animate={{ 
                      maxHeight: isNoteExpanded ? 200 : (isMobile ? 60 : 80),
                      opacity: isNoteExpanded ? 1 : 0.8
                    }}
                    className="text-slate-600 leading-relaxed overflow-y-auto transition-all duration-500"
                  >
                    {todayEntry.note}
                  </motion.div>
                </div>
              </motion.div>
            )}

            {/* Actions */}
            <div className={cn("grid gap-3", isMobile ? "grid-cols-2" : "grid-cols-2")}>
              <Link href="/mood" className="block">
                <Button 
                  variant="outline"
                  className={cn(
                    "w-full h-12 rounded-xl border-2 border-slate-300 bg-white/80",
                    "hover:bg-white hover:border-slate-400 hover:shadow-lg transition-all duration-300"
                  )}
                >
                  <Edit3 className="mr-2 h-4 w-4" />
                  Edytuj Wpis
                </Button>
              </Link>
              <Link href="/ai" className="block">
                <Button 
                  className={cn(
                    "w-full h-12 rounded-xl text-white shadow-lg",
                    `bg-gradient-to-r ${moodConfig.gradient}`,
                    "hover:shadow-xl hover:scale-105 transition-all duration-300"
                  )}
                >
                  <Brain className="mr-2 h-4 w-4" />
                  Analiza AI
                </Button>
              </Link>
            </div>
          </div>
        ) : (
          <motion.div 
            className="text-center py-8 space-y-6"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
          >
            <motion.div
              className="text-6xl mb-4"
              animate={{ 
                scale: [1, 1.1, 1],
                rotate: [0, 5, -5, 0]
              }}
              transition={{ duration: 2, repeat: Infinity }}
            >
              📊
            </motion.div>
            
            <div className="space-y-3">
              <h3 className="text-xl font-bold text-slate-800">Brak dzisiejszego wpisu</h3>
              <p className="text-slate-600 text-lg">
                Zacznij swoją podróż do lepszego samopoczucia
              </p>
            </div>
            
            <Link href="/mood" className="block">
              <Button 
                className={cn(
                  "w-full h-14 rounded-xl text-white shadow-xl text-lg font-semibold",
                  "bg-gradient-to-r from-blue-500 to-purple-500",
                  "hover:shadow-2xl hover:scale-105 transition-all duration-300"
                )}
              >
                <Plus className="mr-3 h-5 w-5" />
                Dodaj Pierwszy Wpis
              </Button>
            </Link>
          </motion.div>
        )}
      </CardContent>
    </Card>
  )
}

// 🔥 TREND WIDGET - GENIALNY (Z PROSTYM WYKRESEM)
function TrendWidget({ moodEntries, stats, isMobile, className }: any) {
  // Simple chart data calculation
  const chartData = useMemo(() => {
    const days = ['N', 'P', 'W', 'Ś', 'C', 'P', 'S']
    return days.map((day, index) => {
      const mood = moodEntries[index]?.mood || Math.floor(Math.random() * 30) + 60
      return { day, mood }
    })
  }, [moodEntries])

  return (
    <Card className={cn(
      className,
      "relative overflow-hidden border-0 shadow-xl bg-gradient-to-br from-white to-slate-50/80",
      "hover:shadow-2xl transition-all duration-500"
    )}>
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-3">
          <div className="p-2 rounded-xl shadow-lg bg-gradient-to-br from-blue-500 to-cyan-500">
            <TrendingUp className="h-5 w-5 text-white" />
          </div>
          <div>
            <div className="text-lg font-bold text-slate-800">Trend Nastroju</div>
            <div className="text-sm text-slate-600">Twoja 7-dniowa podróż</div>
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        {/* Simple Chart */}
        <div className={cn("w-full", isMobile ? "h-32" : "h-40")}>
          <div className="w-full h-full flex items-end justify-between px-2 gap-1">
            {chartData.map((data, index) => (
              <div key={index} className="flex flex-col items-center gap-2 flex-1">
                <div className="text-xs text-slate-500 font-medium">{data.day}</div>
                <div 
                  className="w-full bg-gradient-to-t from-blue-500 to-cyan-400 rounded-t-lg transition-all duration-500 hover:opacity-80"
                  style={{ height: `${data.mood}%` }}
                />
                <div className="text-xs text-slate-600 font-semibold">
                  {data.mood}%
                </div>
              </div>
            ))}
          </div>
        </div>
        
        {/* Stats Grid */}
        <div className="grid grid-cols-3 gap-3">
          {[
            { value: `${stats.trend > 0 ? '+' : ''}${stats.trend}%`, label: 'Trend', color: 'text-blue-500' },
            { value: `${stats.averageMood}%`, label: 'Średnia', color: 'text-purple-500' },
            { value: moodEntries.length, label: 'Wpisy', color: 'text-green-500' }
          ].map((stat, index) => (
            <motion.div
              key={stat.label}
              whileHover={{ scale: 1.05 }}
              className="text-center p-3 rounded-xl bg-white/60 backdrop-blur-sm border border-slate-200/60"
            >
              <div className={cn("text-xl font-black", stat.color)}>{stat.value}</div>
              <div className="text-xs font-semibold text-slate-600 mt-1">{stat.label}</div>
            </motion.div>
          ))}
        </div>

        {/* Insight */}
        <motion.div 
          className="p-4 rounded-xl bg-gradient-to-r from-blue-50 to-cyan-50 border border-blue-200/60"
          whileHover={{ scale: 1.02 }}
        >
          <div className="flex items-center gap-3 mb-2">
            <Activity className="h-5 w-5 text-blue-500" />
            <span className="font-semibold text-blue-700">Analiza Trendu</span>
          </div>
          <p className="text-blue-600 text-sm leading-relaxed">
            {stats.trend > 5 
              ? "🎉 Twój nastrój wyraźnie się poprawia! Kontynuuj swoje dobre praktyki!" 
              : stats.trend < -5 
              ? "💭 Zauważyliśmy spadek w Twoim nastroju. Może to dobry moment na relaks?" 
              : "✨ Twój nastrój utrzymuje stabilny poziom. To świetny znak równowagi!"}
          </p>
        </motion.div>

        <Link href="/analytics">
          <Button 
            variant="outline"
            className="w-full h-12 rounded-xl border-2 border-slate-300 bg-white/80 hover:bg-white hover:border-slate-400 hover:shadow-lg transition-all duration-300"
          >
            <BarChart3 className="mr-2 h-4 w-4" />
            Pełna Analiza
          </Button>
        </Link>
      </CardContent>
    </Card>
  )
}

// 🔥 STREAK WIDGET - GENIALNY
function StreakWidget({ streakData, isMobile, className }: any) {
  const progress = Math.min((streakData.currentStreak / 30) * 100, 100)
  
  return (
    <Card className={cn(
      className,
      "relative overflow-hidden border-0 shadow-xl bg-gradient-to-br from-white to-slate-50/80",
      "hover:shadow-2xl transition-all duration-500"
    )}>
      {/* Background Pattern */}
      <div className="absolute inset-0 bg-gradient-to-br from-amber-500/5 to-orange-500/5" />
      
      <CardHeader className="pb-4 relative z-10">
        <CardTitle className="flex items-center gap-3">
          <div className="p-2 rounded-xl shadow-lg bg-gradient-to-br from-amber-500 to-orange-500">
            <Award className="h-5 w-5 text-white" />
          </div>
          <div>
            <div className="text-lg font-bold text-slate-800">Seria Dni</div>
            <div className="text-sm text-slate-600">Buduj swój nawyk</div>
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6 relative z-10">
        {/* Main Streak Display */}
        <motion.div 
          className="text-center space-y-4"
          initial={{ scale: 0.9 }}
          animate={{ scale: 1 }}
        >
          <motion.div
            className="text-5xl font-black bg-gradient-to-r from-amber-500 to-orange-500 bg-clip-text text-transparent"
            animate={{ 
              scale: [1, 1.1, 1],
              transition: { duration: 2, repeat: Infinity }
            }}
          >
            {streakData.currentStreak}
          </motion.div>
          <div className="text-lg font-semibold text-slate-700">dni z rzędu</div>
        </motion.div>

        {/* Progress */}
        <div className="space-y-3">
          <div className="flex justify-between text-sm font-semibold text-slate-600">
            <span>Twój cel: 30 dni</span>
            <span>{Math.round(progress)}%</span>
          </div>
          <div className="w-full bg-slate-200 rounded-full h-3 overflow-hidden">
            <motion.div 
              initial={{ width: 0 }}
              animate={{ width: `${progress}%` }}
              transition={{ duration: 1.5, ease: "easeOut" }}
              className="h-full bg-gradient-to-r from-amber-400 to-orange-500 rounded-full shadow-lg"
            />
          </div>
        </div>

        {/* Stats */}
        <div className="grid grid-cols-2 gap-4">
          <motion.div 
            className="text-center p-3 rounded-xl bg-amber-50 border border-amber-200"
            whileHover={{ scale: 1.05 }}
          >
            <div className="text-2xl font-black text-amber-600">{streakData.longestStreak}</div>
            <div className="text-xs font-semibold text-amber-700">Rekord</div>
          </motion.div>
          <motion.div 
            className="text-center p-3 rounded-xl bg-slate-100 border border-slate-200"
            whileHover={{ scale: 1.05 }}
          >
            <div className={cn(
              "text-2xl font-black",
              streakData.perfectMonth ? 'text-green-500' : 'text-slate-400'
            )}>
              {streakData.perfectMonth ? '✓' : '−'}
            </div>
            <div className="text-xs font-semibold text-slate-600">Miesiąc</div>
          </motion.div>
        </div>

        <Link href="/mood">
          <Button 
            className="w-full h-12 rounded-xl bg-gradient-to-r from-amber-500 to-orange-500 text-white shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300"
          >
            <Plus className="mr-2 h-4 w-4" />
            Kontynuuj Serię
          </Button>
        </Link>
      </CardContent>
    </Card>
  )
}

// 🔥 AI INSIGHTS WIDGET - GENIALNY
function AIInsightsWidget({ todayEntry, isMobile, className }: any) {
  return (
    <Card className={cn(
      className,
      "relative overflow-hidden border-0 shadow-xl bg-gradient-to-br from-white to-slate-50/80",
      "hover:shadow-2xl transition-all duration-500"
    )}>
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-3">
          <div className="p-2 rounded-xl shadow-lg bg-gradient-to-br from-purple-500 to-indigo-500">
            <Brain className="h-5 w-5 text-white" />
          </div>
          <div>
            <div className="text-lg font-bold text-slate-800">AI Insights</div>
            <div className="text-sm text-slate-600">Spersonalizowane wskazówki</div>
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent className="space-y-6">
        <motion.div 
          className="text-center py-4"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.3 }}
        >
          <motion.div
            className="text-5xl mb-4"
            animate={{ 
              scale: [1, 1.2, 1],
              transition: { duration: 3, repeat: Infinity }
            }}
          >
            🧠
          </motion.div>
          <h3 className="text-xl font-bold text-slate-800 mb-2">Inteligentne Wsparcie</h3>
          <p className="text-slate-600 leading-relaxed">
            Nasza AI analizuje Twój nastrój i dostarcza spersonalizowane wskazówki 
            dla lepszego samopoczucia.
          </p>
        </motion.div>

        <Link href="/ai">
          <Button 
            className="w-full h-12 rounded-xl bg-gradient-to-r from-purple-500 to-indigo-500 text-white shadow-lg hover:shadow-xl hover:scale-105 transition-all duration-300"
          >
            <Sparkles className="mr-2 h-4 w-4" />
            Otwórz Asystenta AI
          </Button>
        </Link>
      </CardContent>
    </Card>
  )
}

// 🔥 TOOLS WIDGET - GENIALNY
function ToolsWidget({ isMobile, className }: any) {
  const tools = [
    { icon: "🧘", label: "Oddech", description: "4-7-8 Technika", url: '/meditation?type=breathing', color: 'from-green-500 to-emerald-500' },
    { icon: "📝", label: "Notatnik", description: "Myśli", url: '/journal', color: 'from-blue-500 to-cyan-500' },
    { icon: "🎵", label: "Dźwięki", description: "Relaks", url: '/sounds', color: 'from-purple-500 to-pink-500' },
    { icon: "💭", label: "Medytacja", description: "5 minut", url: '/meditation', color: 'from-orange-500 to-red-500' },
  ]

  return (
    <Card className={cn(
      className,
      "relative overflow-hidden border-0 shadow-xl bg-gradient-to-br from-white to-slate-50/80",
      "hover:shadow-2xl transition-all duration-500"
    )}>
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-3">
          <div className="p-2 rounded-xl shadow-lg bg-gradient-to-br from-green-500 to-emerald-500">
            <Zap className="h-5 w-5 text-white" />
          </div>
          <div>
            <div className="text-lg font-bold text-slate-800">Szybkie Narzędzia</div>
            <div className="text-sm text-slate-600">Natychmiastowa ulga</div>
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        <div className={cn("grid gap-3", isMobile ? "grid-cols-2" : "grid-cols-2")}>
          {tools.map((tool, index) => (
            <motion.button
              key={tool.label}
              whileHover={{ scale: 1.05, y: -2 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => window.location.href = tool.url}
              className={cn(
                "flex flex-col items-center justify-center p-4 rounded-xl border-2 border-slate-200/60",
                "bg-white/80 backdrop-blur-sm hover:border-slate-300 hover:shadow-lg transition-all duration-300"
              )}
            >
              <div className={cn(
                "text-2xl mb-2 p-2 rounded-lg bg-gradient-to-br",
                tool.color
              )}>
                {tool.icon}
              </div>
              <div className="font-semibold text-slate-800 text-sm mb-1">{tool.label}</div>
              <div className="text-xs text-slate-600">{tool.description}</div>
            </motion.button>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}

// 🔥 STATS WIDGET - GENIALNY
function StatsWidget({ user, stats, moodEntries, isMobile, className }: any) {
  const statItems = [
    { label: "Poziom", value: user?.level || 1, icon: "⭐", color: "text-amber-500" },
    { label: "XP", value: user?.xp || 0, icon: "⚡", color: "text-yellow-500" },
    { label: "Wpisy", value: moodEntries.length, icon: "📊", color: "text-blue-500" },
    { label: "Konsystencja", value: `${stats.consistency}%`, icon: "🎯", color: "text-green-500" },
  ]

  return (
    <Card className={cn(
      className,
      "relative overflow-hidden border-0 shadow-xl bg-gradient-to-br from-white to-slate-50/80",
      "hover:shadow-2xl transition-all duration-500"
    )}>
      <CardHeader className="pb-4">
        <CardTitle className="flex items-center gap-3">
          <div className="p-2 rounded-xl shadow-lg bg-gradient-to-br from-slate-600 to-slate-700">
            <BarChart3 className="h-5 w-5 text-white" />
          </div>
          <div>
            <div className="text-lg font-bold text-slate-800">Twoje Statystyki</div>
            <div className="text-sm text-slate-600">Postępy i wyniki</div>
          </div>
        </CardTitle>
      </CardHeader>
      
      <CardContent>
        <div className="space-y-4">
          {statItems.map((item, index) => (
            <motion.div
              key={item.label}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
              className="flex items-center justify-between p-3 rounded-xl bg-white/60 backdrop-blur-sm border border-slate-200/60 hover:bg-white/80 transition-all duration-300"
            >
              <div className="flex items-center gap-3">
                <span className="text-xl">{item.icon}</span>
                <span className="font-semibold text-slate-700">{item.label}</span>
              </div>
              <span className={cn("font-black text-lg", item.color)}>
                {item.value}
              </span>
            </motion.div>
          ))}
        </div>
      </CardContent>
    </Card>
  )
}

// 🔥 PLACEHOLDER WIDGET
function PlaceholderWidget({ className }: any) {
  return (
    <Card className={cn(className, "border-0 shadow-xl bg-gradient-to-br from-white to-slate-50/80")}>
      <CardContent className="flex items-center justify-center h-full">
        <div className="text-center text-slate-400">
          <div className="text-4xl mb-2">🎨</div>
          <div className="font-semibold">Wkrótce więcej!</div>
        </div>
      </CardContent>
    </Card>
  )
}

// 🔥 LOADING SCREEN - GENIALNY
function LoadingScreen() {
  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10">
      <div className="text-center space-y-6">
        <motion.div
          animate={{ 
            rotate: 360,
            scale: [1, 1.2, 1],
          }}
          transition={{ 
            rotate: { duration: 2, repeat: Infinity, ease: "linear" },
            scale: { duration: 1.5, repeat: Infinity }
          }}
          className="w-20 h-20 mx-auto rounded-2xl bg-gradient-to-r from-blue-500 to-purple-500 flex items-center justify-center shadow-2xl"
        >
          <Sparkles className="h-10 w-10 text-white" />
        </motion.div>
        <div className="space-y-2">
          <h2 className="text-2xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
            Przygotowujemy Twój Dashboard
          </h2>
          <p className="text-slate-600 text-lg">
            Tworzymy spersonalizowane doświadczenie...
          </p>
        </div>
      </div>
    </div>
  )
}

// Helper functions
function calculateStats(entries: any[]) {
  if (!entries.length) return { averageMood: 50, trend: 0, consistency: 75 }
  
  const last7Days = entries.slice(0, 7)
  const averageMood = Math.round(last7Days.reduce((sum, entry) => sum + entry.mood, 0) / last7Days.length)
  
  let trend = 0
  if (entries.length >= 2) {
    trend = entries[0].mood - entries[1].mood
  }
  
  const consistency = Math.max(0, 100 - Math.round(Math.random() * 30))
  
  return { averageMood, trend, consistency }
}

function findTodayEntry(entries: any[]) {
  if (!entries || !Array.isArray(entries)) return null
  
  const today = new Date()
  const todayString = today.toISOString().split('T')[0]
  
  return entries.find((entry) => {
    if (!entry || !entry.timestamp) return false
    
    try {
      const entryDate = new Date(entry.timestamp)
      if (isNaN(entryDate.getTime())) return false
      
      const entryDateString = entryDate.toISOString().split('T')[0]
      return entryDateString === todayString
    } catch (error) {
      return false
    }
  })
}

function calculateStreakFromEntries(entries: any[]) {
  if (!entries.length) return { currentStreak: 0, longestStreak: 0, perfectMonth: false }
  
  // Simple streak calculation for demo
  let currentStreak = 0
  const today = new Date()
  
  for (let i = 0; i < entries.length; i++) {
    const entryDate = new Date(entries[i].timestamp)
    const diffTime = today.getTime() - entryDate.getTime()
    const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))
    
    if (diffDays === i) {
      currentStreak++
    } else {
      break
    }
  }
  
  return {
    currentStreak: Math.max(currentStreak, 7), // Demo shows 7 days streak
    longestStreak: 12, // Demo value
    perfectMonth: currentStreak >= 30
  }
}-e 

=== ./src/app/map/page.tsx ===
import WarsawMap from '@/components/map/WarsawMap'

export default function MapPage() {
  return <WarsawMap />
}-e 

=== ./src/app/ai/page.tsx ===
// src/app/ai/page.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import Header from '@/components/layout/header'

interface Message {
  id: string
  content: string
  isUser: boolean
  timestamp: Date
}

export default function AIChatPage() {
  const [messages, setMessages] = useState<Message[]>([])
  const [inputMessage, setInputMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const textareaRef = useRef<HTMLTextAreaElement>(null)

  // Auto-scroll to bottom
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  // Auto-focus textarea
  useEffect(() => {
    if (!isLoading) {
      textareaRef.current?.focus()
    }
  }, [isLoading])

  const sendMessage = async (message: string) => {
    if (!message.trim() || isLoading) return

    // Add user message
    const userMessage: Message = {
      id: Date.now().toString(),
      content: message,
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    setInputMessage('')
    setIsLoading(true)

    try {
      const response = await fetch('/api/ai-chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message }),
      })

      if (!response.ok) {
        throw new Error(`Błąd: ${response.status}`)
      }

      const data = await response.json()

      // Add AI response
      const aiMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: data.response,
        isUser: false,
        timestamp: new Date()
      }

      setMessages(prev => [...prev, aiMessage])

    } catch (error) {
      console.error('Błąd czatu:', error)
      
      // Error message
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: 'Przepraszam, wystąpił błąd. Spróbuj ponownie za chwilę. 😔',
        isUser: false,
        timestamp: new Date()
      }
      
      setMessages(prev => [...prev, errorMessage])
    } finally {
      setIsLoading(false)
    }
  }

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    sendMessage(inputMessage)
  }

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault()
      handleSubmit(e)
    }
  }

  const autoResizeTextarea = () => {
    const textarea = textareaRef.current
    if (textarea) {
      textarea.style.height = 'auto'
      textarea.style.height = Math.min(textarea.scrollHeight, 120) + 'px'
    }
  }

  useEffect(() => {
    autoResizeTextarea()
  }, [inputMessage])

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">
      <Header />
      
      <div className="pt-4 pb-8">
        <div className="max-w-4xl mx-auto px-4">
          {/* Header - zoptymalizowany dla mobile */}
          <div className="text-center mb-6 sm:mb-8">
            <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold text-gray-800 mb-2">
              🤖 Asystent Spokoju
            </h1>
            <p className="text-gray-600 text-sm sm:text-base">
              Porozmawiaj z AI o mindfulness i dobrym samopoczuciu
            </p>
          </div>

          {/* Chat Container */}
          <div className="bg-white rounded-xl sm:rounded-2xl shadow-lg overflow-hidden">
            {/* Messages */}
            <div className="h-80 sm:h-96 overflow-y-auto p-4 sm:p-6 space-y-3 sm:space-y-4">
              {messages.length === 0 ? (
                <div className="text-center text-gray-500 py-8 sm:py-12">
                  <div className="text-4xl sm:text-6xl mb-3 sm:mb-4">💫</div>
                  <p className="text-base sm:text-lg font-medium mb-2">Cześć! Jak mogę Ci pomóc?</p>
                  <p className="text-xs sm:text-sm text-gray-500">
                    Zapytaj o techniki relaksacji lub radzenie sobie ze stresem
                  </p>
                </div>
              ) : (
                messages.map((message) => (
                  <div
                    key={message.id}
                    className={`flex ${message.isUser ? 'justify-end' : 'justify-start'}`}
                  >
                    <div
                      className={`max-w-[85%] sm:max-w-[80%] rounded-2xl px-3 sm:px-4 py-2 sm:py-3 ${
                        message.isUser
                          ? 'bg-blue-500 text-white rounded-br-none'
                          : 'bg-gray-100 text-gray-800 rounded-bl-none'
                      }`}
                    >
                      <div className="whitespace-pre-wrap text-sm sm:text-base leading-relaxed">
                        {message.content}
                      </div>
                      <div className={`text-xs mt-1 ${message.isUser ? 'text-blue-100' : 'text-gray-500'}`}>
                        {message.timestamp.toLocaleTimeString('pl-PL', { 
                          hour: '2-digit', 
                          minute: '2-digit' 
                        })}
                      </div>
                    </div>
                  </div>
                ))
              )}
              
              {/* Loading indicator */}
              {isLoading && (
                <div className="flex justify-start">
                  <div className="bg-gray-100 text-gray-800 rounded-2xl rounded-bl-none px-4 py-3">
                    <div className="flex space-x-2">
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                      <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                    </div>
                  </div>
                </div>
              )}
              
              <div ref={messagesEndRef} />
            </div>

            {/* Input Form - zoptymalizowany */}
            <div className="border-t border-gray-200 p-3 sm:p-4">
              <form onSubmit={handleSubmit} className="flex gap-2 sm:gap-4">
                <div className="flex-1">
                  <textarea
                    ref={textareaRef}
                    value={inputMessage}
                    onChange={(e) => setInputMessage(e.target.value)}
                    onKeyPress={handleKeyPress}
                    placeholder="Napisz wiadomość..."
                    className="w-full px-3 sm:px-4 py-2 sm:py-3 border border-gray-300 rounded-lg sm:rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-none text-sm sm:text-base"
                    rows={1}
                    disabled={isLoading}
                  />
                </div>
                <button
                  type="submit"
                  disabled={isLoading || !inputMessage.trim()}
                  className="px-4 sm:px-6 py-2 sm:py-3 bg-blue-500 text-white rounded-lg sm:rounded-xl hover:bg-blue-600 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex-shrink-0"
                >
                  {isLoading ? (
                    <div className="w-4 h-4 sm:w-5 sm:h-5 border-2 border-white border-t-transparent rounded-full animate-spin" />
                  ) : (
                    <span className="text-sm sm:text-base">Wyślij</span>
                  )}
                </button>
              </form>
            </div>
          </div>

          {/* Quick Suggestions - zoptymalizowane */}
          <div className="mt-4 sm:mt-6 grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-3">
            {[
              'Jak radzić sobie ze stresem?',
              'Ćwiczenia oddechowe',
              'Co to jest mindfulness?',
              'Jak poprawić sen?'
            ].map((suggestion) => (
              <button
                key={suggestion}
                onClick={() => sendMessage(suggestion)}
                disabled={isLoading}
                className="bg-white border border-gray-200 rounded-lg sm:rounded-xl px-3 py-2 text-xs sm:text-sm text-gray-700 hover:bg-gray-50 disabled:opacity-50 transition-colors text-left break-words"
              >
                {suggestion}
              </button>
            ))}
          </div>
        </div>
      </div>
    </div>
  )
}-e 

=== ./src/app/layout.tsx ===
import type { Metadata } from 'next'
import { Inter } from 'next/font/google'
import './globals.css'
import { AuthProvider } from '@/components/providers/auth-provider'

const inter = Inter({ 
  subsets: ['latin'],
  display: 'swap',
})

export const metadata: Metadata = {
  title: 'Spokój w głowie',
  description: 'Architektura Uważności',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="pl">
      <body className={inter.className}>
        {/* DODAJEMY AUTH PROVIDER */}
        <AuthProvider>
          <div className="min-h-screen bg-gray-50">
            {children}
          </div>
        </AuthProvider>
      </body>
    </html>
  )
}-e 

=== ./src/app/api/ai-recommendations/route.ts ===
// src/app/api/ai-chat/route.ts - FINALNA WERSJA
import { NextResponse } from 'next/server'

const GROQ_API_URL = 'https://api.groq.com/openai/v1/chat/completions'
const GROQ_MODEL = 'llama-3.1-8b-instant' // SZYBSZY I DARMOWY

export async function POST(request: Request) {
  try {
    const { message } = await request.json()
    
    if (!message) {
      return NextResponse.json({ error: 'Brak wiadomości' }, { status: 400 })
    }

    // 🔥 GROQ - 100% DARMOWE BEZ KARTY
    const aiResponse = await callGroqAI(message)
    
    return NextResponse.json({ 
      response: aiResponse,
      model: GROQ_MODEL,
      source: 'groq_ai'
    })

  } catch (error: any) {
    console.error('AI Error:', error)
    return NextResponse.json(
      { error: 'AI tymczasowo niedostępny' },
      { status: 500 }
    )
  }
}

async function callGroqAI(userMessage: string): Promise<string> {
  const response = await fetch(GROQ_API_URL, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${process.env.GROQ_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: GROQ_MODEL,
      messages: [
        {
          role: "system",
          content: "Jesteś asystentem wellbeing. Odpowiadaj po polsku, wspierajaco i naturalnie."
        },
        {
          role: "user", 
          content: userMessage
        }
      ],
      temperature: 0.7,
      max_tokens: 500
    })
  })

  if (!response.ok) {
    throw new Error(`Groq API error: ${response.status}`)
  }

  const data = await response.json()
  return data.choices[0]?.message?.content || "Przepraszam, nie mogę teraz odpowiedzieć."
}

export async function GET() {
  return NextResponse.json({
    status: 'AI Chat API działa!',
    model: GROQ_MODEL,
    provider: 'Groq Cloud - 100% darmowe'
  })
}-e 

=== ./src/app/api/ai-chat/route.ts ===
// src/app/api/ai-chat/route.ts

import { NextResponse } from 'next/server'

const OPENROUTER_API_URL = 'https://openrouter.ai/api/v1/chat/completions'

const ACTIVE_MODEL = 'meta-llama/llama-3.3-70b-instruct:free'

export async function POST(request: Request) {

console.log('🔵 API Route: Rozpoczynam...')

try {

const body = await request.json()

const { message } = body

console.log('📨 Odebrana wiadomość:', message)

if (!message) {

return NextResponse.json({ error: 'Brak wiadomości' }, { status: 400 })

}

console.log('🚀 Wywołuję OpenRouter...')

const aiResponse = await callOpenRouterAI(message)

console.log('✅ Sukces!')

return NextResponse.json({

response: aiResponse,

timestamp: new Date().toISOString(),

model: ACTIVE_MODEL,

source: 'openrouter_ai'

})

} catch (error: any) {

console.error('💥 CRITICAL ERROR:', error)

return NextResponse.json(

{

error: 'Internal Server Error',

message: error.message

},

{ status: 500 }

)

}

}

async function callOpenRouterAI(userMessage: string): Promise<string> {

console.log('🔗 Łączę z OpenRouter...')

const requestBody = {

model: ACTIVE_MODEL,

messages: [

{

role: 'system',

content: `Jesteś asystentem wellbeing w aplikacji dla młodzieży. Odpowiadaj po polsku, przyjaźnie i wspierajaco. Mow naturalnie.`

},

{

role: 'user',

content: userMessage

}

],

max_tokens: 500,

temperature: 0.7

}

// 🔥 WAŻNE: Używamy tylko ASCII w headers!

const response = await fetch(OPENROUTER_API_URL, {

method: 'POST',

headers: {

'Authorization': `Bearer ${process.env.OPENROUTER_API_KEY}`,

'Content-Type': 'application/json',

'HTTP-Referer': 'https://spokojwglowie.pl', // TYLKO ASCII

'X-Title': 'Spokoj w Glowie - Wellbeing App' // BEZ POLSKICH ZNAKÓW

},

body: JSON.stringify(requestBody)

})

console.log('📥 OpenRouter status:', response.status)

if (!response.ok) {

const errorText = await response.text()

console.error('❌ OpenRouter error:', errorText)

throw new Error(`OpenRouter API error: ${response.status}`)

}

const data = await response.json()

console.log('📄 OpenRouter response received')

const responseText = data.choices[0]?.message?.content

if (!responseText) {

console.error('❌ Brak treści w odpowiedzi:', data)

throw new Error('No response content from AI')

}

return responseText

}

export async function GET() {

return NextResponse.json({

status: 'API działa!',

model: ACTIVE_MODEL

})

}-e 

=== ./src/app/mood/page.tsx ===
'use client'

import { useState, useEffect } from 'react'
import { auth, db } from '@/lib/firebase'
import { onAuthStateChanged } from 'firebase/auth'
import { doc, onSnapshot } from 'firebase/firestore'
import userService from '@/lib/user-service'

// Import header
import Header from '@/components/layout/header'

import { ModernMoodPicker } from '@/components/ui/ModernMoodPicker'
import { MoodEntryForm } from '@/components/mood-entry-form'
import { AIMoodInsights } from '@/components/ai-mood-insights'
import { MoodChart7Days } from '@/components/ui/MoodChart7Days'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { ArrowLeft, Calendar, BarChart3, ArrowRight, Heart, Edit } from 'lucide-react'
import { cn } from '@/lib/utils'
import Link from 'next/link'

interface MoodEntry {
  id: string
  mood: number
  note?: string
  timestamp: Date
  date: string
}

type MoodView = 'mood-selection' | 'note-entry' | 'ai-insights' | 'mood-review'

export default function MoodPage() {
  const [user, setUser] = useState<any>(null)
  const [userData, setUserData] = useState<any>(null)
  const [moodEntries, setMoodEntries] = useState<MoodEntry[]>([])
  const [currentMood, setCurrentMood] = useState(50)
  const [currentView, setCurrentView] = useState<MoodView>('mood-selection')
  const [isLoading, setIsLoading] = useState(false)
  const [streakData, setStreakData] = useState({ currentStreak: 0, longestStreak: 0 })

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (usr) => {
      setUser(usr)
      if (usr) {
        const userRef = doc(db, 'users', usr.uid)
        const unsub = onSnapshot(userRef, async (docSnap) => {
          if (docSnap.exists()) {
            const data = docSnap.data()
            setUserData(data)

            const entries = data.moodEntries?.map((e: any) => ({
              id: e.timestamp?.toDate().getTime().toString() || Date.now().toString(),
              mood: e.mood,
              note: e.note,
              timestamp: e.timestamp?.toDate() || new Date(),
              date: e.date
            })) || []

            setMoodEntries(entries)

            const todayEntry = entries.find((e: any) => isToday(new Date(e.timestamp)))
            if (todayEntry) {
              setCurrentMood(todayEntry.mood)
              setCurrentView('mood-review')
            } else {
              setCurrentView('mood-selection')
            }

            const streak = await userService.calculateAdvancedStreak(usr.uid)
            setStreakData(streak)
          }
        })
        return () => unsub()
      }
    })
    return () => unsubscribe()
  }, [])

  const handleSaveMood = async (mood: number) => {
    if (!user) return
    setIsLoading(true)
    
    try {
      await userService.saveMood(user.uid, mood)
      setCurrentMood(mood)
      setCurrentView('mood-review')
    } catch (error) {
      console.error('Błąd zapisu nastroju:', error)
      alert('Błąd zapisu nastroju. Spróbuj ponownie.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleSaveWithNote = async (data: { mood: number; note?: string }) => {
    if (!user) return
    setIsLoading(true)
    
    try {
      await userService.saveMoodWithNote(user.uid, data.mood, data.note)
      setCurrentMood(data.mood)
      setCurrentView('mood-review')
    } catch (error) {
      console.error('Błąd zapisu:', error)
      alert('Błąd zapisu. Spróbuj ponownie.')
    } finally {
      setIsLoading(false)
    }
  }

  const handleAddNote = () => {
    setCurrentView('note-entry')
  }

  const handleViewNote = () => {
    setCurrentView('note-entry')
  }

  const todayEntry = moodEntries.find(entry => isToday(new Date(entry.timestamp)))
  const averageMood = calculateAverageMood(moodEntries)
  const moodTrend = calculateMoodTrend(moodEntries)
  const consistency = calculateConsistency(moodEntries)

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 to-purple-100">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500 mx-auto mb-4"></div>
          <p className="text-gray-600">Ładowanie...</p>
        </div>
      </div>
    )
  }

  return (
    <main className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100">
      {/* HEADER - dodany na górze */}
      <Header />
      
      {/* GŁÓWNA ZAWARTOŚĆ - ZWIĘKSZONE PADDINGI OD GÓRY */}
      <div className="px-4 py-8">
        <div className="container mx-auto max-w-6xl">
          {/* Nagłówek z powrotem do dashboard - POPRAWIONE TŁO */}
          <div className="flex items-center justify-between mb-8 p-4 rounded-2xl bg-white/95 backdrop-blur-sm border border-white/20 shadow-sm">
            <Link href="/dashboard">
              <Button variant="outline" className="border-gray-200 bg-white/80 hover:bg-white hover:border-gray-300 px-3 sm:px-4">
                <ArrowLeft className="h-4 w-4 mr-1 sm:mr-2" />
                <span className="text-sm sm:text-base">Powrót</span>
              </Button>
            </Link>
            
            <div className="text-center flex-1 mx-2">
              <h1 className="text-xl sm:text-2xl md:text-3xl font-light text-gray-900 leading-tight">
                {currentView === 'mood-selection' ? 'Jak się czujesz?' : 
                 currentView === 'note-entry' ? 'Dodaj notatkę' :
                 currentView === 'ai-insights' ? 'AI Insights' :
                 'Twój nastrój'}
              </h1>
            </div>
            
            <div className="w-16 sm:w-24"></div>
          </div>

          {/* Główna zawartość - ZWIĘKSZONE ODSTĘPY */}
          <div className="space-y-8">
            {/* Widok wyboru nastroju - ZWIĘKSZONY MARGINES */}
            {currentView === 'mood-selection' && (
              <div className="mt-12">
                <ModernMoodPicker
                  value={currentMood}
                  onValueChange={setCurrentMood}
                  moodEntries={moodEntries}
                  streak={streakData.currentStreak}
                  trend={moodTrend}
                  consistency={consistency}
                  averageMood={averageMood}
                  level={userData?.level || 1}
                  onSaveMood={handleSaveMood}
                  onAddNote={handleAddNote}
                  todayEntry={todayEntry}
                />
              </div>
            )}

            {/* NOWY DESIGN: Widok przeglądu nastroju (po zapisaniu) */}
            {currentView === 'mood-review' && (
              <MoodReview
                currentMood={currentMood}
                todayEntry={todayEntry}
                onEditNote={handleViewNote}
                onViewAI={() => setCurrentView('ai-insights')}
              />
            )}

            {/* Widok dodawania/edycji notatki */}
            {currentView === 'note-entry' && (
              <div className="w-full max-w-2xl mx-auto">
                <MoodEntryForm
                  currentMood={currentMood}
                  onSave={handleSaveWithNote}
                  isLoading={isLoading}
                  initialNote={todayEntry?.note}
                />
                <Button
                  onClick={() => setCurrentView('mood-review')}
                  variant="outline"
                  className="w-full mt-4 border-gray-200 bg-white/80 hover:bg-white hover:border-gray-300"
                >
                  ← Wróć do przeglądu
                </Button>
              </div>
            )}

            {/* Widok AI Insights */}
            {currentView === 'ai-insights' && (
              <AIMoodInsights
                currentMood={currentMood}
                moodEntries={moodEntries}
                streak={streakData.currentStreak}
                trend={moodTrend}
                consistency={consistency}
                averageMood={averageMood}
                level={userData?.level || 1}
                onBack={() => setCurrentView('mood-review')}
              />
            )}

            {/* Sekcja z wykresem i historią - POPRAWIONE TŁA */}
            {(currentView === 'mood-review' || currentView === 'ai-insights' || todayEntry) && (
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mt-12">
                {/* Wykres 7 dni */}
                <Card className="border-0 shadow-lg bg-white/95 backdrop-blur-sm border border-white/20">
                  <CardHeader className="pb-4">
                    <CardTitle className="flex items-center gap-2 text-base sm:text-lg font-semibold text-gray-900">
                      <BarChart3 className="h-4 w-4 sm:h-5 sm:w-5 text-blue-600" />
                      Ostatnie 7 dni
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-0">
                    <MoodChart7Days moodEntries={moodEntries} />
                  </CardContent>
                </Card>

                {/* Ostatnie wpisy */}
                <Card className="border-0 shadow-lg bg-white/95 backdrop-blur-sm border border-white/20">
                  <CardHeader className="pb-4">
                    <CardTitle className="flex items-center gap-2 text-base sm:text-lg font-semibold text-gray-900">
                      <Calendar className="h-4 w-4 sm:h-5 sm:w-5 text-blue-600" />
                      Ostatnie wpisy
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="pt-0">
                    {moodEntries.length > 0 ? (
                      <div className="space-y-3">
                        {moodEntries.slice(0, 5).map(entry => (
                          <div key={entry.id} className="flex items-center justify-between p-4 border border-gray-100 rounded-xl bg-white shadow-sm hover:shadow-md transition-shadow">
                            <div className="flex items-center gap-3">
                              <div className={cn(
                                "w-12 h-12 rounded-full flex items-center justify-center text-white font-semibold text-sm shadow-md",
                                getMoodColorClass(entry.mood)
                              )}>
                                {entry.mood}%
                              </div>
                              <div className="min-w-0 flex-1">
                                <div className="font-semibold text-gray-900 text-sm">
                                  {formatDate(entry.timestamp)}
                                </div>
                                {entry.note && (
                                  <div className="text-sm text-gray-600 line-clamp-1 mt-1">
                                    {entry.note}
                                  </div>
                                )}
                              </div>
                            </div>
                            <div className="text-2xl">
                              {getMoodEmoji(entry.mood)}
                            </div>
                          </div>
                        ))}
                        
                        {/* Link do pełnej historii */}
                        <div className="pt-4">
                          <div className="flex items-center justify-center gap-2 p-3 bg-blue-50 rounded-xl border border-blue-100 text-blue-700 hover:text-blue-800 transition-colors cursor-not-allowed opacity-50">
                            <span className="text-sm font-medium">Pełna historia (wkrótce)</span>
                            <ArrowRight className="h-4 w-4" />
                          </div>
                          <p className="text-xs text-gray-500 text-center mt-2">
                            Pełna historia nastrojów będzie dostępna wkrótce
                          </p>
                        </div>
                      </div>
                    ) : (
                      <div className="text-center py-8">
                        <Heart className="h-16 w-16 text-gray-300 mx-auto mb-4" />
                        <p className="text-gray-600 font-medium">Brak zapisanych nastrojów</p>
                        <p className="text-gray-500 text-sm mt-2">
                          Zacznij śledzić swój nastrój powyżej
                        </p>
                      </div>
                    )}
                  </CardContent>
                </Card>
              </div>
            )}
          </div>
        </div>
      </div>
    </main>
  )
}

/* ------------------ NOWY DESIGN PRZEGLĄDU NASTROJU ------------------ */
/* ------------------ POPRAWIONY DESIGN PRZEGLĄDU NASTROJU ------------------ */
function MoodReview({ currentMood, todayEntry, onEditNote, onViewAI }) {
  return (
    <div className="w-full max-w-2xl mx-auto">
      <Card className="border-0 shadow-xl bg-white/95 backdrop-blur-sm border border-white/20">
        <CardContent className="p-8">
          <div className="text-center space-y-8">
            {/* POPRAWIONY DESIGN: Emoji przesunięte niżej */}
            <div className="flex flex-col items-center space-y-6">
              {/* Duże emoji jako główny element - ZWIĘKSZONE MARGINESY */}
              <div className="text-8xl mb-18 mt-16">
                {getMoodEmoji(currentMood)}
              </div>
              
              {/* Procent jako wyraźny, ale drugoplanowy element */}
              <div className={cn(
                "px-6 py-3 rounded-2xl font-bold text-2xl",
                getMoodBackgroundClass(currentMood),
                "text-white shadow-lg"
              )}>
                {currentMood}%
              </div>
              
              {/* Opis nastroju */}
              <div className="space-y-3">
                <h3 className="text-3xl font-bold text-gray-900">
                  {getMoodLabel(currentMood)}
                </h3>
                <p className="text-gray-600 text-lg font-medium">
                  {getMoodDescription(currentMood)}
                </p>
              </div>
            </div>

            {/* Wyświetlenie notatki jeśli istnieje */}
            {todayEntry?.note && (
              <div className="bg-blue-50 rounded-2xl p-6 border border-blue-200 shadow-sm">
                <h4 className="font-bold text-blue-900 mb-4 flex items-center gap-3 text-lg">
                  <Edit className="h-5 w-5" />
                  Twoja notatka
                </h4>
                <p className="text-blue-800 text-base leading-relaxed font-medium">
                  {todayEntry.note}
                </p>
              </div>
            )}

            {/* Akcje */}
            <div className="flex flex-col sm:flex-row gap-4 pt-8">
              <Button
                onClick={onEditNote}
                variant={todayEntry?.note ? "outline" : "default"}
                className={cn(
                  "flex-1 py-4 text-base font-semibold rounded-xl",
                  todayEntry?.note 
                    ? "border-2 border-gray-300 bg-white text-gray-700 hover:bg-gray-50 hover:border-gray-400" 
                    : "bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white shadow-lg hover:shadow-xl"
                )}
              >
                <Edit className="h-5 w-5 mr-2" />
                {todayEntry?.note ? 'Edytuj notatkę' : 'Dodaj notatkę'}
              </Button>
              
              <Button
                onClick={onViewAI}
                className="flex-1 py-4 text-base font-semibold rounded-xl bg-gradient-to-r from-green-600 to-blue-600 hover:from-green-700 hover:to-blue-700 text-white shadow-lg hover:shadow-xl"
              >
                <span className="text-xl mr-2">🧠</span>
                AI Insights
              </Button>
            </div>

            {/* POPRAWIONY: Pokazuje faktyczny czas zapisu nastroju */}
            <p className="text-sm text-gray-500 text-center pt-6 font-medium">
              {todayEntry?.timestamp ? (
                <>
                  Nastrój zapisany {formatTimestamp(todayEntry.timestamp)}
                </>
              ) : (
                <>
                  Nastrój zapisany dzisiaj o {new Date().toLocaleTimeString('pl-PL', { 
                    hour: '2-digit', 
                    minute: '2-digit' 
                  })}
                </>
              )}
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

// Dodaj tę funkcję pomocniczą do formatowania timestamp
function formatTimestamp(timestamp: Date): string {
  const date = new Date(timestamp)
  const today = new Date()
  const yesterday = new Date(today)
  yesterday.setDate(yesterday.getDate() - 1)
  
  if (date.toDateString() === today.toDateString()) {
    return `dzisiaj o ${date.toLocaleTimeString('pl-PL', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })}`
  } else if (date.toDateString() === yesterday.toDateString()) {
    return `wczoraj o ${date.toLocaleTimeString('pl-PL', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })}`
  } else {
    return `${date.toLocaleDateString('pl-PL', { 
      day: 'numeric', 
      month: 'long',
      year: 'numeric'
    })} o ${date.toLocaleTimeString('pl-PL', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })}`
  }
}


// Dodaj tę funkcję pomocniczą
function getMoodBackgroundClass(mood: number): string {
  if (mood <= 20) return 'bg-gray-500'
  if (mood <= 40) return 'bg-blue-500'
  if (mood <= 60) return 'bg-green-500'
  if (mood <= 80) return 'bg-purple-500'
  return 'bg-rose-500'
}

/* ------------------ Funkcje pomocnicze ------------------ */
function isToday(date: Date) {
  const today = new Date()
  return date.toDateString() === today.toDateString()
}

function calculateAverageMood(entries: MoodEntry[]): number {
  if (!entries.length) return 0
  const last7 = entries.slice(0, 7)
  return Math.round(last7.reduce((sum, e) => sum + e.mood, 0) / last7.length)
}

function calculateMoodTrend(entries: MoodEntry[]): number {
  if (entries.length < 2) return 0
  const last7 = entries.slice(0, 7)
  if (last7.length < 2) return 0
  return Math.round(last7[0].mood - last7[1].mood)
}

function calculateConsistency(entries: MoodEntry[]): number {
  if (entries.length < 2) return 0
  const last7 = entries.slice(0, 7)
  const changes = last7.slice(1).map((e, i) => Math.abs(e.mood - last7[i].mood))
  const avgChange = changes.reduce((a, b) => a + b, 0) / changes.length
  return Math.max(0, 100 - Math.round(avgChange * 2))
}

function getMoodLabel(mood: number): string {
  if (mood <= 20) return 'Bardzo niski'
  if (mood <= 40) return 'Niski'
  if (mood <= 60) return 'Neutralny'
  if (mood <= 80) return 'Wysoki'
  return 'Bardzo wysoki'
}

function getMoodDescription(mood: number): string {
  if (mood <= 20) return 'Potrzebujesz wsparcia i troski'
  if (mood <= 40) return 'Czas na łagodną opiekę nad sobą'
  if (mood <= 60) return 'Równowaga i spokój'
  if (mood <= 80) return 'Energia i radość'
  return 'Pełnia szczęścia i spełnienia'
}

function getMoodColorClass(mood: number): string {
  if (mood <= 20) return 'bg-gray-600 shadow-gray-700/50'
  if (mood <= 40) return 'bg-blue-600 shadow-blue-700/50'
  if (mood <= 60) return 'bg-green-600 shadow-green-700/50'
  if (mood <= 80) return 'bg-purple-600 shadow-purple-700/50'
  return 'bg-rose-600 shadow-rose-700/50'
}

function getMoodEmoji(mood: number): string {
  if (mood <= 20) return '😔'
  if (mood <= 40) return '😐'
  if (mood <= 60) return '🙂'
  if (mood <= 80) return '😊'
  return '🤩'
}

function formatDate(date: Date): string {
  const today = new Date()
  const yesterday = new Date(today)
  yesterday.setDate(yesterday.getDate() - 1)
  
  if (date.toDateString() === today.toDateString()) return 'Dzisiaj'
  if (date.toDateString() === yesterday.toDateString()) return 'Wczoraj'
  
  return date.toLocaleDateString('pl-PL', { 
    day: 'numeric', 
    month: 'short' 
  })
}-e 

=== ./src/app/page.tsx ===
// src/app/page.tsx - POPRAWIONA WERSJA
'use client'
import { useAuth } from '@/components/providers/auth-provider'
import { redirect } from 'next/navigation'
import Link from 'next/link'

export default function Home() {
  const { user, loading } = useAuth()

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }
  
  if (user) {
    redirect('/dashboard')
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-100">
      <div className="container mx-auto px-4 py-16">
        <div className="text-center max-w-4xl mx-auto">
          <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-blue-500/10 border border-blue-500/20 mb-6">
            <span className="text-sm font-medium text-blue-500">Architektura Uważności</span>
          </div>
          
          <h1 className="text-5xl md:text-6xl font-bold text-gray-900 mb-6">
            Spokój w Głowie
          </h1>
          
          <p className="text-xl text-gray-600 mb-8 max-w-2xl mx-auto">
            Dołącz do tysięcy użytkowników którzy już odkryli siłę codziennej uważności i samoobserwacji.
          </p>
          
          <div className="flex gap-4 justify-center">
            <Link 
              href="/auth/register" 
              className="bg-blue-600 text-white px-8 py-4 rounded-full text-lg hover:bg-blue-700 transition-colors"
            >
              Rozpocznij Podróż
            </Link>
            <Link 
              href="/auth/login" 
              className="border border-blue-600 text-blue-600 px-8 py-4 rounded-full text-lg hover:bg-blue-50 transition-colors"
            >
              Zaloguj się
            </Link>
          </div>
        </div>
      </div>
    </div>
  )
}-e 

=== ./src/app/globals.css ===
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Leaflet CSS */
@import url('https://unpkg.com/leaflet@1.9.4/dist/leaflet.css');

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;
    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
    --secondary: 210 40% 96%;
    --secondary-foreground: 222.2 47.4% 11.2%;
    --muted: 210 40% 96%;
    --muted-foreground: 215.4 16.3% 46.9%;
    --accent: 210 40% 96%;
    --accent-foreground: 222.2 47.4% 11.2%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;
    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
    --radius: 0.5rem;
  }

  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}

@layer base {
  * {
    border-color: hsl(var(--border));
  }
  
  html {
    font-feature-settings: "cv02", "cv03", "cv04", "cv11";
  }
  
  body {
    background: hsl(var(--background));
    color: hsl(var(--foreground));
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

@layer components {
  .glass {
    background: rgba(255, 255, 255, 0.8);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .glass-card {
    @apply glass rounded-2xl shadow-sm hover:shadow-md transition-shadow duration-300;
  }

  .glass-dark {
    background: rgba(0, 0, 0, 0.25);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.1);
  }
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

/* Animacje */
@keyframes widgetAppear {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.widget-animate {
  animation: widgetAppear 0.6s ease-out;
}

/* Map styles */
.mapboxgl-marker {
  z-index: 1000 !important;
}

.mapboxgl-popup {
  z-index: 1001 !important;
}

.leaflet-container {
  height: 100%;
  width: 100%;
  z-index: 1;
}

.leaflet-marker-icon {
  z-index: 1000 !important;
}

.leaflet-popup {
  z-index: 1001 !important;
}-e 

=== ./src/app/login/page.tsx ===
// src/app/login/page.tsx - STWÓRZ TEN PLIK
import { redirect } from 'next/navigation'

export default function LoginPage() {
  redirect('/auth/login')
}-e 

=== ./src/components/ui/card.tsx ===
import * as React from 'react'

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`rounded-xl border border-gray-200 bg-white text-gray-900 shadow-sm ${className}`}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex flex-col space-y-1.5 p-6 ${className}`}
    {...props}
  />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={`text-2xl font-semibold leading-none tracking-tight ${className}`}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={`text-sm text-gray-600 ${className}`}
    {...props}
  />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={`p-6 pt-0 ${className}`} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={`flex items-center p-6 pt-0 ${className}`}
    {...props}
  />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }-e 

=== ./src/components/ui/progress.tsx ===
'use client'

import * as React from 'react'

interface ProgressProps {
  value?: number
  className?: string
}

const Progress = React.forwardRef<
  HTMLDivElement,
  ProgressProps
>(({ className, value = 0, ...props }, ref) => (
  <div
    ref={ref}
    className={`relative h-4 w-full overflow-hidden rounded-full bg-gray-200 ${className}`}
    {...props}
  >
    <div
      className="h-full w-full flex-1 bg-blue-500 transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </div>
))
Progress.displayName = 'Progress'

export { Progress }-e 

=== ./src/components/ui/mood-slider.tsx ===
'use client'

import React, { useState, useRef, useCallback, useEffect } from 'react'
import { cn } from '@/lib/utils'

interface MoodSliderProps {
  value: number
  onValueChange: (value: number) => void
  onValueCommit?: (value: number) => void
  className?: string
}

const getMoodColor = (val: number) => {
  if (val <= 20) return 'rgba(75, 85, 99, 0.8)'
  if (val <= 40) return 'rgba(59, 130, 246, 0.9)'
  if (val <= 60) return 'rgba(100, 130, 220, 0.9)'
  if (val <= 80) return 'rgba(168, 85, 230, 0.9)'
  return 'rgba(156, 39, 176, 1)'
}

const getMoodEmoji = (val: number) => {
  if (val <= 20) return '😔'
  if (val <= 40) return '😐'
  if (val <= 60) return '🙂'
  if (val <= 80) return '😊'
  return '🤩'
}

const getMoodLabel = (val: number) => {
  if (val <= 20) return 'Bardzo niski'
  if (val <= 40) return 'Niski'
  if (val <= 60) return 'Neutralny'
  if (val <= 80) return 'Wysoki'
  return 'Bardzo wysoki'
}

export const MoodSlider: React.FC<MoodSliderProps> = ({
  value,
  onValueChange,
  onValueCommit,
  className
}) => {
  const [isDragging, setIsDragging] = useState(false)
  const [localValue, setLocalValue] = useState(value)
  const sliderRef = useRef<HTMLDivElement>(null)
  const [isMobile, setIsMobile] = useState(false)

  // Sprawdź, czy jesteśmy na urządzeniu mobilnym
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768)
    }
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  // Płynna aktualizacja wartości
  useEffect(() => {
    setLocalValue(value)
  }, [value])

  const updateValue = useCallback((clientX: number) => {
    if (!sliderRef.current) return

    const rect = sliderRef.current.getBoundingClientRect()
    const x = Math.max(0, Math.min(rect.width, clientX - rect.left))
    const percentage = x / rect.width
    const newValue = Math.round(percentage * 100)
    
    setLocalValue(newValue)
    onValueChange(newValue)
  }, [onValueChange])

  const handleInteractionStart = useCallback((e: React.MouseEvent | React.TouchEvent) => {
    e.preventDefault()
    setIsDragging(true)
    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX
    updateValue(clientX)

    const handleMove = (moveEvent: MouseEvent | TouchEvent) => {
      if (!isDragging) return
      moveEvent.preventDefault()
      const moveClientX = 'touches' in moveEvent ? moveEvent.touches[0].clientX : moveEvent.clientX
      updateValue(moveClientX)
    }

    const handleEnd = () => {
      setIsDragging(false)
      onValueCommit?.(localValue)
      
      document.removeEventListener('mousemove', handleMove as EventListener)
      document.removeEventListener('touchmove', handleMove as EventListener)
      document.removeEventListener('mouseup', handleEnd)
      document.removeEventListener('touchend', handleEnd)
    }

    document.addEventListener('mousemove', handleMove as EventListener)
    document.addEventListener('touchmove', handleMove as EventListener)
    document.addEventListener('mouseup', handleEnd)
    document.addEventListener('touchend', handleEnd)
  }, [isDragging, localValue, onValueCommit, updateValue])

  return (
    <div className={cn(
      "w-full space-y-5 sm:space-y-6",
      "bg-white/80 backdrop-blur-sm rounded-2xl p-4 sm:p-5",
      "shadow-md border border-gray-100",
      className
    )}>
      {/* Wyświetlacz wartości - responsywny */}
      <div className="text-center">
        <div className="text-3xl sm:text-4xl mb-1 sm:mb-2">
          {getMoodEmoji(localValue)}
        </div>
        <div className="text-xl sm:text-2xl font-medium text-gray-900">
          {localValue}%
        </div>
        <div className="text-sm text-gray-500 mt-1 sm:mt-2">
          {getMoodLabel(localValue)}
        </div>
      </div>

      {/* Slider - z optymalizacją dla urządzeń mobilnych */}
      <div className="space-y-4">
        <div 
          ref={sliderRef}
          className="relative h-3 sm:h-2.5 rounded-full cursor-pointer touch-none"
          onMouseDown={handleInteractionStart}
          onTouchStart={handleInteractionStart}
        >
          {/* Tło slidera - subtelne i przezroczyste */}
          <div className="absolute inset-0 rounded-full bg-gray-200/50" />
          
          {/* Wypełnienie - responsywny gradient zgodny z kolorystyką aplikacji */}
          <div 
            className="absolute inset-y-0 rounded-l-full transition-all duration-300"
            style={{ 
              width: `${localValue}%`,
              backgroundColor: getMoodColor(localValue)
            }}
          />
          
          {/* Thumb - optymalizacja dla urządzeń mobilnych */}
          <div
            className={cn(
              "absolute top-1/2 transform -translate-y-1/2 -translate-x-1/2 rounded-full border-2 border-white bg-white cursor-grab",
              "transition-all duration-300 shadow-sm",
              isDragging && "cursor-grabbing scale-125",
              "group-hover:scale-110",
              isMobile ? "w-8 h-8" : "w-6 h-6"
            )}
            style={{ 
              left: `${localValue}%`,
              boxShadow: isDragging ? '0 2px 6px rgba(0,0,0,0.15)' : '0 1px 3px rgba(0,0,0,0.08)',
              transition: 'transform 0.2s ease'
            }}
          />
        </div>

        {/* Skala - odpowiednio dostosowana */}
        <div className="flex justify-between text-xs sm:text-sm text-gray-500 px-2">
          <span>Bardzo niski</span>
          <span>Neutralny</span>
          <span>Bardzo wysoki</span>
        </div>
      </div>

      {/* Szybkie presetty - responsywny układ */}
      <div className={cn(
        "flex gap-2 flex-wrap justify-center",
        isMobile ? "px-2" : ""
      )}>
        {[0, 25, 50, 75, 100].map((preset) => (
          <button
            key={preset}
            onClick={() => {
              setLocalValue(preset)
              onValueChange(preset)
              onValueCommit?.(preset)
            }}
            className={cn(
              "px-3 py-1.5 sm:px-3 sm:py-2 rounded-lg text-xs sm:text-sm transition-all duration-300",
              "bg-white border border-gray-200 text-gray-700",
              "hover:border-blue-300 hover:bg-blue-50",
              localValue === preset && cn(
                "bg-blue-500 text-white border-blue-500",
                "transform scale-105"
              ),
              isMobile && "w-14"
            )}
          >
            {preset}%
          </button>
        ))}
      </div>
    </div>
  )
}-e 

=== ./src/components/ui/CircularMoodTracker.tsx ===

'use client'

import { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'
import { getMoodLabel, getMoodEmoji, getMoodColor } from '@/lib/mood-utils'
import { MoodEntryForm } from '@/components/mood-entry-form'
import { Sparkles, Lightbulb, Brain, Target, Zap, X } from 'lucide-react'

interface MoodEntry {
  id: string
  mood: number
  note?: string
  date: string
  timestamp: Date
}

interface CircularMoodTrackerProps {
  value: number
  onValueChange: (value: number) => void
  onSaveMood: (data: { mood: number; note?: string }) => Promise<void>
  size?: number
  moodEntries?: MoodEntry[]
  streak?: number
  trend?: number
  consistency?: number
  averageMood?: number
  level?: number
}

interface AIMoodInsights {
  analysis: string
  suggestions: string[]
  pattern: string
  encouragement: string
  specialTip: string
}

export const CircularMoodTracker: React.FC<CircularMoodTrackerProps> = ({
  value,
  onValueChange,
  onSaveMood,
  size = 200,
  moodEntries = [],
  streak = 0,
  trend = 0,
  consistency = 0,
  averageMood = 50,
  level = 1
}) => {
  const [currentMood, setCurrentMood] = useState(value)
  const [isDragging, setIsDragging] = useState(false)
  const [hovered, setHovered] = useState<{id: string, content: string} | null>(null)
  const [isMobile, setIsMobile] = useState(false)
  const [showAISuggestions, setShowAISuggestions] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [saveSuccess, setSaveSuccess] = useState(false)
  const [aiInsights, setAiInsights] = useState<AIMoodInsights | null>(null)
  const [loadingAI, setLoadingAI] = useState(false)
  const ringRef = useRef<HTMLDivElement>(null)
  const modalRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    setCurrentMood(value)
  }, [value])

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768)
    }
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  // Close AI insights when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
        setShowAISuggestions(false)
      }
    }

    if (showAISuggestions) {
      document.addEventListener('mousedown', handleClickOutside)
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
      document.body.style.overflow = 'unset'
    }
  }, [showAISuggestions])

  // Get AI Insights when showing suggestions
  useEffect(() => {
    if (showAISuggestions && !aiInsights && !loadingAI) {
      fetchAIInsights()
    }
  }, [showAISuggestions])

  const fetchAIInsights = async () => {
    try {
      setLoadingAI(true)
      
      const response = await fetch('/api/ai-mood-insights', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mood: currentMood,
          streak,
          trend,
          consistency,
          averageMood,
          level,
          moodHistory: moodEntries.slice(0, 14)
        }),
      })

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)

      const data = await response.json()
      setAiInsights(data)
      
    } catch (error) {
      console.error('Error fetching AI insights:', error)
      // Fallback insights
      setAiInsights({
        analysis: "Analizuję Twój nastrój w kontekście wszystkich danych...",
        suggestions: [
          "Zrób 5 głębokich oddechów i skup się na chwili obecnej",
          "Zapisz 3 rzeczy za które jesteś wdzięczny dzisiaj",
          "Wyjdź na krótki spacer i zauważ piękno wokół siebie"
        ],
        pattern: `Konsystencja na poziomie ${consistency}% wskazuje na ${getConsistencyDescription(consistency).toLowerCase()}`,
        encouragement: "Twój streak pokazuje zaangażowanie w samoobserwację! 🌟",
        specialTip: "Dopasuj tempo do swojego samopoczucia - słuchaj siebie"
      })
    } finally {
      setLoadingAI(false)
    }
  }

  const handleDragStart = (e: React.MouseEvent | React.TouchEvent) => {
    e.preventDefault()
    setIsDragging(true)
    handleDragMove(e)
  }

  const handleDragMove = (e: React.MouseEvent | React.TouchEvent) => {
    if (!isDragging || !ringRef.current) return
    
    const rect = ringRef.current.getBoundingClientRect()
    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY
    
    const x = clientX - rect.left - rect.width / 2
    const y = clientY - rect.top - rect.height / 2
    let angle = Math.atan2(y, x) * (180 / Math.PI) + 90
    if (angle < 0) angle += 360
    let newMood = Math.round((angle / 360) * 100)
    newMood = Math.min(Math.max(newMood, 0), 100)
    
    setCurrentMood(newMood)
    onValueChange(newMood)
  }

  const handleDragEnd = () => {
    setIsDragging(false)
  }

  const handleSaveMood = async (data: { mood: number; note?: string }) => {
    setIsSaving(true)
    setSaveSuccess(false)
    try {
      await onSaveMood(data)
      setSaveSuccess(true)
      // Automatically show AI insights after 1 second
      setTimeout(() => setShowAISuggestions(true), 1000)
    } catch (error) {
      console.error('Error saving mood:', error)
    } finally {
      setIsSaving(false)
    }
  }

  useEffect(() => {
    if (isDragging) {
      const handleMove = (e: MouseEvent | TouchEvent) => {
        handleDragMove(e as any)
      }
      const handleEnd = () => handleDragEnd()

      window.addEventListener('mousemove', handleMove)
      window.addEventListener('mouseup', handleEnd)
      window.addEventListener('touchmove', handleMove)
      window.addEventListener('touchend', handleEnd)

      return () => {
        window.removeEventListener('mousemove', handleMove)
        window.removeEventListener('mouseup', handleEnd)
        window.removeEventListener('touchmove', handleMove)
        window.removeEventListener('touchend', handleEnd)
      }
    }
  }, [isDragging])

  const getRingPercentage = () => currentMood / 100
  const recentHistory = [...moodEntries].reverse().slice(0, 7).reverse()

  return (
    <>
      <div className={cn(
        "relative flex flex-col items-center justify-center select-none w-full max-w-[360px] mx-auto p-4 sm:p-5 rounded-2xl",
        "bg-white/80 backdrop-blur-sm",
        "shadow-md border border-gray-100",
        "transition-colors duration-500",
        "touch-none"
      )}>
        {/* Główne pole ringa */}
        <div className="relative w-full aspect-square mb-4">
          <div 
            ref={ringRef}
            className="w-full h-full rounded-full relative cursor-grab active:cursor-grabbing"
            onMouseDown={handleDragStart}
            onTouchStart={handleDragStart}
          >
            <div className="absolute inset-0 rounded-full bg-gray-100/50" />
            
            <div 
              className="absolute inset-0 rounded-full"
              style={{
                background: `conic-gradient(from 0deg, ${getMoodColor(currentMood)} ${getRingPercentage() * 360}deg, transparent ${getRingPercentage() * 360}deg)`,
                clipPath: 'inset(10% 10% 10% 10%)'
              }}
            />
            
            <motion.div
              className="absolute top-0 left-1/2 w-1 h-7 sm:h-8 rounded-t-full bg-white shadow-md"
              style={{ 
                transform: `translateX(-50%) rotate(${currentMood * 3.6}deg)`,
                transformOrigin: '50% 100%'
              }}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            />
            
            {/* Centrum ringa */}
            <div className="absolute inset-0 flex flex-col items-center justify-center rounded-full bg-white/80 backdrop-blur">
              <motion.div
                key={currentMood}
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ type: 'spring', stiffness: 500, damping: 30 }}
                className="text-3xl sm:text-4xl font-medium text-gray-900"
              >
                {currentMood}%
              </motion.div>
              <div className="flex items-center mt-1">
                <span>{getMoodEmoji(currentMood)}</span>
                <span className="ml-1.5 text-xs sm:text-sm text-gray-500">
                  {getMoodLabel(currentMood)}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Mood Entry Form - ZINTEGROWANY */}
        <div className="w-full mb-4">
          <MoodEntryForm
            currentMood={currentMood}
            onSave={handleSaveMood}
            isLoading={isSaving}
            isSuccess={saveSuccess}
          />
        </div>

        {/* AI Insights Button */}
        {saveSuccess && (
          <motion.div
            initial={{ opacity: 0, y: 10 }}
            animate={{ opacity: 1, y: 0 }}
            className="w-full"
          >
            <button
              onClick={() => setShowAISuggestions(true)}
              className="w-full flex items-center justify-center gap-2 py-3 px-4 rounded-xl bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 border border-blue-200 text-blue-700 font-medium transition-all duration-200 shadow-sm"
            >
              <Sparkles className="h-4 w-4" />
              Zobacz AI Insights
            </button>
          </motion.div>
        )}

        {/* Historia nastrojów */}
        <div className="w-full mb-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-xs sm:text-sm font-medium text-gray-700">Ostatnie 7 dni</span>
            <span className="text-xs text-gray-500">
              {trend > 0 ? '📈' : trend < 0 ? '📉' : '➡️'} {Math.abs(trend)}%
            </span>
          </div>
          
          <div className="w-full h-12 flex items-center">
            <div className="w-full overflow-x-auto px-1">
              <div className="flex items-center justify-between min-w-max h-full space-x-1">
                {recentHistory.map((entry, index) => {
                  const isHovered = hovered?.id === entry.id
                  
                  return (
                    <div 
                      key={entry.id}
                      className="relative flex flex-col items-center flex-shrink-0"
                      onMouseEnter={() => setHovered({
                        id: entry.id,
                        content: `${entry.mood}% • ${formatDate(entry.timestamp)}${entry.note ? `\n${entry.note}` : ''}`
                      })}
                      onMouseLeave={() => setHovered(null)}
                    >
                      <motion.div
                        className="w-2.5 h-2.5 rounded-full mb-1.5"
                        style={{ 
                          backgroundColor: getMoodColor(entry.mood),
                          boxShadow: isHovered ? `0 0 0 4px ${getMoodColor(entry.mood)}20` : 'none'
                        }}
                        initial={{ scale: 0.8, opacity: 0.7 }}
                        animate={{ 
                          scale: isHovered ? 1.3 : 1,
                          opacity: 1
                        }}
                        transition={{ type: 'spring', stiffness: 400, damping: 20 }}
                      />
                      
                      <AnimatePresence>
                        {isHovered && (
                          <motion.div
                            initial={{ opacity: 0, y: -10 }}
                            animate={{ opacity: 1, y: -15 }}
                            exit={{ opacity: 0, y: -10 }}
                            className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white text-gray-800 text-xs px-2 py-1 rounded shadow-sm border border-gray-100 whitespace-normal max-w-[180px] text-center z-40"
                          >
                            {entry.mood}%
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </div>
                  )
                })}
              </div>
            </div>
          </div>
        </div>

        {/* Wizualizacja trendu */}
        <div className="w-full h-16 mb-2">
          <div className="w-full h-px bg-gray-200" />
          <div className="w-full h-[80%] flex items-end justify-between px-1">
            {recentHistory.map((entry, index) => {
              const height = `${(entry.mood / 100) * 50}px`;
              const isToday = index === recentHistory.length - 1
              
              return (
                <div key={entry.id} className="flex flex-col items-center w-5 flex-shrink-0">
                  <motion.div
                    className="w-1.5 rounded-t-full"
                    style={{ 
                      backgroundColor: getMoodColor(entry.mood),
                      height: height
                    }}
                    initial={{ height: 0 }}
                    animate={{ height: height }}
                    transition={{ duration: 0.6, delay: index * 0.05 }}
                  />
                  {isToday && (
                    <motion.div
                      className="w-2 h-2 rounded-full bg-white mt-1 shadow-sm"
                      style={{ backgroundColor: getMoodColor(entry.mood) }}
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      transition={{ delay: 0.5 }}
                    />
                  )}
                </div>
              )
            })}
          </div>
        </div>

        {/* Statystyki */}
        <div className="w-full grid grid-cols-3 gap-2 text-xs">
          <div className="text-center p-2 bg-blue-50 rounded-lg">
            <div className="font-semibold text-blue-700">{streak}</div>
            <div className="text-blue-600">dni</div>
          </div>
          <div className="text-center p-2 bg-green-50 rounded-lg">
            <div className={`font-semibold ${trend > 0 ? 'text-green-700' : trend < 0 ? 'text-red-700' : 'text-gray-700'}`}>
              {trend > 0 ? '+' : ''}{trend}%
            </div>
            <div className="text-gray-600">trend</div>
          </div>
          <div className="text-center p-2 bg-purple-50 rounded-lg">
            <div className="font-semibold text-purple-700">{consistency}%</div>
            <div className="text-purple-600">konsyst.</div>
          </div>
        </div>
      </div>

      {/* POPRAWIONY MODAL AI INSIGHTS - IDEALNIE W ŚRODKU */}
      <AnimatePresence>
        {showAISuggestions && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50 flex items-center justify-center p-4"
              onClick={() => setShowAISuggestions(false)}
            >
              <motion.div
                ref={modalRef}
                initial={{ opacity: 0, scale: 0.9, y: 20 }}
                animate={{ opacity: 1, scale: 1, y: 0 }}
                exit={{ opacity: 0, scale: 0.9, y: 20 }}
                transition={{ type: "spring", damping: 25, stiffness: 300 }}
                className="bg-white rounded-3xl shadow-2xl border border-gray-200 w-full max-w-2xl max-h-[85vh] flex flex-col overflow-hidden"
                onClick={(e) => e.stopPropagation()}
              >
                {/* Header */}
                <div className="flex items-center justify-between p-6 border-b border-gray-100 bg-gradient-to-r from-blue-50 to-purple-50 flex-shrink-0">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-white rounded-xl shadow-sm">
                      <Brain className="h-6 w-6 text-purple-500" />
                    </div>
                    <div>
                      <h3 className="font-bold text-gray-900 text-lg">AI Analiza Twojego Nastroju</h3>
                      <p className="text-sm text-gray-600">Spersonalizowane insights bazujące na Twoich danych</p>
                    </div>
                  </div>
                  <button 
                    onClick={() => setShowAISuggestions(false)}
                    className="p-2 hover:bg-white rounded-xl transition-colors"
                  >
                    <X className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                  </button>
                </div>
                
                {/* Scrollable Content */}
                <div className="flex-1 overflow-y-auto p-6">
                  {loadingAI ? (
                    <div className="space-y-4">
                      <div className="flex items-center gap-3">
                        <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500" />
                        <div>
                          <div className="h-4 bg-gray-200 rounded w-32 mb-2 animate-pulse"></div>
                          <div className="h-3 bg-gray-200 rounded w-48 animate-pulse"></div>
                        </div>
                      </div>
                      {[1, 2, 3].map(i => (
                        <div key={i} className="animate-pulse">
                          <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                          <div className="h-3 bg-gray-200 rounded w-full mb-3"></div>
                        </div>
                      ))}
                    </div>
                  ) : aiInsights ? (
                    <div className="space-y-6">
                      {/* Analiza */}
                      <div className="p-4 bg-blue-50 rounded-xl border border-blue-100">
                        <div className="flex items-start gap-3">
                          <Target className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                          <div>
                            <p className="font-semibold text-blue-900 mb-2">Analiza Nastroju</p>
                            <p className="text-blue-800 leading-relaxed">{aiInsights.analysis}</p>
                          </div>
                        </div>
                      </div>

                      {/* Sugestie */}
                      <div>
                        <p className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                          <Zap className="h-5 w-5 text-yellow-500" />
                          Spersonalizowane Sugestie
                        </p>
                        <div className="space-y-3">
                          {aiInsights.suggestions.map((suggestion, index) => (
                            <div key={index} className="flex items-start gap-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors border border-gray-100">
                              <Lightbulb className="h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                              <span className="text-gray-700 leading-relaxed">{suggestion}</span>
                            </div>
                          ))}
                        </div>
                      </div>

                      {/* Wzorzec i Encouragement */}
                      <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        <div className="p-3 bg-green-50 rounded-lg border border-green-100">
                          <p className="text-sm font-semibold text-green-800 mb-1">🎯 Wykryty Wzorzec</p>
                          <p className="text-sm text-green-700">{aiInsights.pattern}</p>
                        </div>
                        <div className="p-3 bg-purple-50 rounded-lg border border-purple-100">
                          <p className="text-sm font-semibold text-purple-800 mb-1">💫 Motywacja</p>
                          <p className="text-sm text-purple-700">{aiInsights.encouragement}</p>
                        </div>
                      </div>

                      {/* Special Tip */}
                      {aiInsights.specialTip && (
                        <div className="p-3 bg-orange-50 rounded-lg border border-orange-100">
                          <p className="text-sm font-semibold text-orange-800 mb-1">💡 Specjalna Rada</p>
                          <p className="text-sm text-orange-700">{aiInsights.specialTip}</p>
                        </div>
                      )}

                      {/* Dane użytkownika */}
                      <div className="pt-4 border-t border-gray-100">
                        <p className="text-xs font-medium text-gray-700 mb-2">Twoje Statystyki:</p>
                        <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 text-xs">
                          <div className="text-center p-2 bg-blue-50 rounded-lg">
                            <div className="font-semibold text-blue-700">{streak}</div>
                            <div className="text-blue-600">dni streak</div>
                          </div>
                          <div className="text-center p-2 bg-green-50 rounded-lg">
                            <div className="font-semibold text-green-700">{averageMood}%</div>
                            <div className="text-green-600">średnia</div>
                          </div>
                          <div className="text-center p-2 bg-purple-50 rounded-lg">
                            <div className="font-semibold text-purple-700">{consistency}%</div>
                            <div className="text-purple-600">konsystencja</div>
                          </div>
                          <div className="text-center p-2 bg-gray-50 rounded-lg">
                            <div className={`font-semibold ${trend > 0 ? 'text-green-700' : trend < 0 ? 'text-red-700' : 'text-gray-700'}`}>
                              {trend > 0 ? '+' : ''}{trend}%
                            </div>
                            <div className="text-gray-600">trend</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  ) : null}
                </div>
                
                {/* Fixed Footer */}
                <div className="p-4 border-t border-gray-100 bg-gray-50 flex-shrink-0">
                  <button
                    onClick={() => setShowAISuggestions(false)}
                    className="w-full py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors font-medium"
                  >
                    Zamknij
                  </button>
                </div>
              </motion.div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  )
}

function formatDate(date: Date): string {
  const today = new Date()
  const yesterday = new Date(today)
  yesterday.setDate(yesterday.getDate() - 1)
  
  if (date.toDateString() === today.toDateString()) return 'Dziś'
  if (date.toDateString() === yesterday.toDateString()) return 'Wcz.'
  
  return date.toLocaleDateString('pl-PL', { 
    day: 'numeric', 
    month: 'short' 
  }).replace(' ', '')
}

function getConsistencyDescription(consistency: number): string {
  if (consistency >= 80) return 'Wysoka stabilność'
  if (consistency >= 60) return 'Umiarkowana stabilność'
  if (consistency >= 40) return 'Zmienne emocje'
  return 'Duża zmienność'
}-e 

=== ./src/components/ui/Button.module.css ===
.button {
  padding: 12px 24px;
  border: none;
  border-radius: 12px;
  font-weight: 600;
  cursor: pointer;
  font-size: 16px;
  transition: all 0.2s;
}

.primary {
  background: #007AFF;
  color: white;
}

.primary:hover {
  background: #0056CC;
}

.secondary {
  background: #F5F5F7;
  color: #1d1d1f;
}

.secondary:hover {
  background: #E5E5E7;
}-e 

=== ./src/components/ui/MoodChart7Days.tsx ===
// src/components/ui/mood-chart-7days.tsx
'use client'

import { useMemo } from 'react'
import { motion } from 'framer-motion'
import { 
  LineChart, 
  Line, 
  XAxis, 
  YAxis, 
  CartesianGrid, 
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
  AreaChart,
  Area
} from 'recharts'

// Helper functions at the TOP
const getMoodColor = (mood: number) => {
  if (mood < 25) return '#f87171'
  if (mood < 50) return '#60a5fa' 
  if (mood < 75) return '#34d399'
  return '#8b5cf6'
}

const getMoodGradient = (mood: number) => {
  if (mood < 25) return ['#fecaca', '#f87171']
  if (mood < 50) return ['#bfdbfe', '#60a5fa']
  if (mood < 75) return ['#a7f3d0', '#34d399']
  return ['#ddd6fe', '#8b5cf6']
}

interface MoodEntry {
  mood: number
  timestamp: any
  id?: string
  note?: string
}

interface MoodChart7DaysProps {
  moodEntries?: MoodEntry[]
  height?: number
  showLabels?: boolean
  showGrid?: boolean
  compact?: boolean
  variant?: 'line' | 'bar' | 'area'
  showTooltip?: boolean
  className?: string
}

interface ChartDay {
  date: string
  day: string
  fullDay: string
  mood: number | null
  index: number
  fill?: string
}

export function MoodChart7Days({ 
  moodEntries = [], 
  height = 200, 
  showLabels = true, 
  showGrid = true,
  compact = false,
  variant = 'line',
  showTooltip = true,
  className = ""
}: MoodChart7DaysProps) {
  const chartData = useMemo(() => {
    const days: ChartDay[] = []
    const dayNames = compact ? ['N', 'P', 'W', 'Ś', 'C', 'P', 'S'] : ['Nd', 'Pn', 'Wt', 'Śr', 'Cz', 'Pt', 'Sb']
    const fullDayNames = ['Niedziela', 'Poniedziałek', 'Wtorek', 'Środa', 'Czwartek', 'Piątek', 'Sobota']
    
    // Generate last 7 days
    for (let i = 6; i >= 0; i--) {
      const date = new Date()
      date.setDate(date.getDate() - i)
      const dateString = date.toISOString().split('T')[0]
      const dayIndex = date.getDay()
      
      // Initialize day data
      const dayData: ChartDay = {
        date: dateString,
        day: dayNames[dayIndex],
        fullDay: fullDayNames[dayIndex],
        mood: null,
        index: 6 - i
      }

      // Try to find matching mood entry
      try {
        const matchingEntry = moodEntries.find(entry => {
          let entryDate: Date
          
          // Handle different timestamp formats
          if (entry.timestamp?.toDate) {
            entryDate = entry.timestamp.toDate()
          } else if (entry.timestamp instanceof Date) {
            entryDate = entry.timestamp
          } else if (typeof entry.timestamp === 'string') {
            entryDate = new Date(entry.timestamp)
          } else if (entry.timestamp?.seconds) {
            entryDate = new Date(entry.timestamp.seconds * 1000)
          } else {
            return false
          }

          if (isNaN(entryDate.getTime())) return false
          
          const entryDateString = entryDate.toISOString().split('T')[0]
          return entryDateString === dateString
        })

        if (matchingEntry) {
          const moodValue = Math.max(0, Math.min(100, matchingEntry.mood || 50))
          dayData.mood = moodValue
          dayData.fill = getMoodColor(moodValue)
        }
      } catch (error) {
        console.error('Error processing mood entry:', error)
      }

      days.push(dayData)
    }

    return days
  }, [moodEntries, compact])

  const CustomTooltip = ({ active, payload, label }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0].payload
      return (
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-white/95 backdrop-blur-sm p-3 rounded-lg border border-slate-200 shadow-xl"
        >
          <p className="font-semibold text-slate-800 text-sm">{data.fullDay}</p>
          <p className="text-slate-600 text-sm mt-1">
            Nastrój: <span className="font-bold" style={{ color: getMoodColor(payload[0].value) }}>
              {payload[0].value}%
            </span>
          </p>
          {data.date && (
            <p className="text-slate-500 text-xs mt-1">
              {new Date(data.date).toLocaleDateString('pl-PL')}
            </p>
          )}
        </motion.div>
      )
    }
    return null
  }

  const CustomizedDot = (props: any) => {
    const { cx, cy, payload } = props

    if (payload.mood === null) return null

    return (
      <motion.circle
        initial={{ scale: 0, opacity: 0 }}
        animate={{ scale: 1, opacity: 1 }}
        transition={{ duration: 0.5, delay: payload.index * 0.1 }}
        whileHover={{ scale: 1.5 }}
        cx={cx}
        cy={cy}
        r={4}
        fill={getMoodColor(payload.mood)}
        stroke="#fff"
        strokeWidth={2}
        className="cursor-pointer"
      />
    )
  }

  // Check if we have any data
  const hasData = chartData.some(day => day.mood !== null)
  const dataWithValues = chartData.filter(day => day.mood !== null)

  // If no data, show empty state
  if (!hasData || dataWithValues.length === 0) {
    return (
      <EmptyChartState 
        height={height} 
        compact={compact}
        className={className}
      />
    )
  }

  // For single data point, we need to handle it differently
  const isSinglePoint = dataWithValues.length === 1

  return (
    <div 
      className={`w-full ${className}`}
      style={{ height }}
    >
      <ResponsiveContainer width="100%" height="100%">
        {variant === 'line' ? (
          <LineChart 
            data={isSinglePoint ? [dataWithValues[0], dataWithValues[0]] : chartData} 
            margin={{ top: 10, right: 10, left: 0, bottom: compact ? 0 : 10 }}
          >
            {showGrid && (
              <CartesianGrid 
                strokeDasharray="3 3" 
                stroke="#f1f5f9"
                horizontal={true}
                vertical={false}
              />
            )}
            
            <XAxis 
              dataKey="day"
              axisLine={false}
              tickLine={false}
              tick={{ 
                fontSize: compact ? 10 : 12, 
                fill: '#64748b',
                fontWeight: 500 
              }}
              tickMargin={8}
              interval={0}
            />
            
            {showLabels && (
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ 
                  fontSize: compact ? 10 : 12, 
                  fill: '#64748b' 
                }}
                tickMargin={8}
                domain={[0, 100]}
                tickFormatter={(value) => compact ? `${value}` : `${value}%`}
                width={compact ? 20 : 30}
              />
            )}
            
            {showTooltip && <Tooltip content={<CustomTooltip />} />}
            
            <Line
              type={isSinglePoint ? "linear" : "monotone"}
              dataKey="mood"
              stroke="#8b5cf6"
              strokeWidth={2}
              dot={<CustomizedDot />}
              activeDot={{ 
                r: 6, 
                fill: '#7c3aed',
                stroke: '#fff',
                strokeWidth: 2
              }}
              connectNulls={false}
            />
          </LineChart>
        ) : variant === 'area' ? (
          <AreaChart 
            data={isSinglePoint ? [dataWithValues[0], dataWithValues[0]] : chartData}
            margin={{ top: 10, right: 10, left: 0, bottom: compact ? 0 : 10 }}
          >
            {showGrid && (
              <CartesianGrid 
                strokeDasharray="3 3" 
                stroke="#f1f5f9"
                horizontal={true}
                vertical={false}
              />
            )}
            
            <XAxis 
              dataKey="day"
              axisLine={false}
              tickLine={false}
              tick={{ 
                fontSize: compact ? 10 : 12, 
                fill: '#64748b',
                fontWeight: 500 
              }}
              tickMargin={8}
              interval={0}
            />
            
            {showLabels && (
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ 
                  fontSize: compact ? 10 : 12, 
                  fill: '#64748b' 
                }}
                tickMargin={8}
                domain={[0, 100]}
                tickFormatter={(value) => compact ? `${value}` : `${value}%`}
                width={compact ? 20 : 30}
              />
            )}
            
            {showTooltip && <Tooltip content={<CustomTooltip />} />}
            
            <defs>
              <linearGradient id="moodAreaGradient" x1="0" y1="0" x2="0" y2="1">
                <stop offset="5%" stopColor="#8b5cf6" stopOpacity={0.3}/>
                <stop offset="95%" stopColor="#8b5cf6" stopOpacity={0}/>
              </linearGradient>
            </defs>
            
            <Area
              type="monotone"
              dataKey="mood"
              stroke="#8b5cf6"
              strokeWidth={2}
              fill="url(#moodAreaGradient)"
              dot={<CustomizedDot />}
              activeDot={{ 
                r: 6, 
                fill: '#7c3aed',
                stroke: '#fff',
                strokeWidth: 2
              }}
              connectNulls={false}
            />
          </AreaChart>
        ) : (
          // Bar Chart
          <BarChart 
            data={chartData}
            margin={{ top: 10, right: 10, left: 0, bottom: compact ? 0 : 10 }}
          >
            {showGrid && (
              <CartesianGrid 
                strokeDasharray="3 3" 
                stroke="#f1f5f9"
                horizontal={true}
                vertical={false}
              />
            )}
            
            <XAxis 
              dataKey="day"
              axisLine={false}
              tickLine={false}
              tick={{ 
                fontSize: compact ? 10 : 12, 
                fill: '#64748b',
                fontWeight: 500 
              }}
              tickMargin={8}
              interval={0}
            />
            
            {showLabels && (
              <YAxis 
                axisLine={false}
                tickLine={false}
                tick={{ 
                  fontSize: compact ? 10 : 12, 
                  fill: '#64748b' 
                }}
                tickMargin={8}
                domain={[0, 100]}
                tickFormatter={(value) => compact ? `${value}` : `${value}%`}
                width={compact ? 20 : 30}
              />
            )}
            
            {showTooltip && <Tooltip content={<CustomTooltip />} />}
            
            <Bar 
              dataKey="mood" 
              fill="#8b5cf6"
              radius={[4, 4, 0, 0]}
              className="transition-all duration-300 hover:opacity-80"
            />
          </BarChart>
        )}
      </ResponsiveContainer>
    </div>
  )
}

// Empty state component
function EmptyChartState({ height, compact, className }: { height: number, compact: boolean, className: string }) {
  return (
    <div 
      className={`flex flex-col items-center justify-center text-slate-400 ${className}`}
      style={{ height }}
    >
      <motion.div
        initial={{ opacity: 0, scale: 0.8 }}
        animate={{ opacity: 1, scale: 1 }}
        transition={{ duration: 0.5 }}
        className="text-center"
      >
        <div className="text-3xl mb-3">📊</div>
        <p className={`${compact ? 'text-xs' : 'text-sm'} font-medium`}>
          {compact ? 'Brak danych' : 'Brak danych z ostatnich 7 dni'}
        </p>
        {!compact && (
          <p className="text-xs text-slate-500 mt-1">
            Dodaj wpisy nastroju, aby zobaczyć wykres
          </p>
        )}
      </motion.div>
    </div>
  )
}

// Simple compact version for small widgets
export function SimpleMoodChart({ 
  moodEntries = [], 
  height = 60,
  variant = 'bar'
}: MoodChart7DaysProps) {
  const chartData = useMemo(() => {
    const days: any[] = []
    const dayNames = ['N', 'P', 'W', 'Ś', 'C', 'P', 'S']
    
    for (let i = 6; i >= 0; i--) {
      const date = new Date()
      date.setDate(date.getDate() - i)
      const dateString = date.toISOString().split('T')[0]
      
      const dayData: any = {
        day: dayNames[date.getDay()],
        mood: null
      }

      try {
        const matchingEntry = moodEntries.find(entry => {
          let entryDate: Date
          
          if (entry.timestamp?.toDate) {
            entryDate = entry.timestamp.toDate()
          } else if (entry.timestamp instanceof Date) {
            entryDate = entry.timestamp
          } else if (typeof entry.timestamp === 'string') {
            entryDate = new Date(entry.timestamp)
          } else if (entry.timestamp?.seconds) {
            entryDate = new Date(entry.timestamp.seconds * 1000)
          } else {
            return false
          }

          if (isNaN(entryDate.getTime())) return false
          return entryDate.toISOString().split('T')[0] === dateString
        })

        if (matchingEntry) {
          dayData.mood = Math.max(0, Math.min(100, matchingEntry.mood || 50))
        }
      } catch (error) {
        console.error('Error processing mood entry:', error)
      }

      days.push(dayData)
    }

    return days
  }, [moodEntries])

  const hasData = chartData.some(day => day.mood !== null)

  if (!hasData) {
    return (
      <div style={{ height }} className="flex items-center justify-center text-slate-300">
        <span className="text-xs">-</span>
      </div>
    )
  }

  return (
    <div style={{ height }} className="w-full">
      <ResponsiveContainer width="100%" height="100%">
        {variant === 'line' ? (
          <LineChart data={chartData} margin={{ top: 2, right: 2, left: 2, bottom: 2 }}>
            <Line
              type="monotone"
              dataKey="mood"
              stroke="#8b5cf6"
              strokeWidth={2}
              dot={false}
              activeDot={false}
            />
          </LineChart>
        ) : (
          <BarChart data={chartData} margin={{ top: 5, right: 0, left: 0, bottom: 0 }}>
            <Bar 
              dataKey="mood" 
              fill="#8b5cf6"
              radius={[2, 2, 0, 0]}
            />
          </BarChart>
        )}
      </ResponsiveContainer>
    </div>
  )
}

// Mini sparkline version for really small spaces
export function MoodSparkline({ moodEntries = [], height = 20 }: MoodChart7DaysProps) {
  const chartData = useMemo(() => {
    const days: any[] = []
    
    for (let i = 6; i >= 0; i--) {
      const date = new Date()
      date.setDate(date.getDate() - i)
      const dateString = date.toISOString().split('T')[0]
      
      const dayData: any = {
        mood: null
      }

      try {
        const matchingEntry = moodEntries.find(entry => {
          let entryDate: Date
          
          if (entry.timestamp?.toDate) {
            entryDate = entry.timestamp.toDate()
          } else if (entry.timestamp instanceof Date) {
            entryDate = entry.timestamp
          } else if (typeof entry.timestamp === 'string') {
            entryDate = new Date(entry.timestamp)
          } else if (entry.timestamp?.seconds) {
            entryDate = new Date(entry.timestamp.seconds * 1000)
          } else {
            return false
          }

          if (isNaN(entryDate.getTime())) return false
          return entryDate.toISOString().split('T')[0] === dateString
        })

        if (matchingEntry) {
          dayData.mood = Math.max(0, Math.min(100, matchingEntry.mood || 50))
        }
      } catch (error) {
        console.error('Error processing mood entry:', error)
      }

      days.push(dayData)
    }

    return days
  }, [moodEntries])

  const hasData = chartData.some(day => day.mood !== null)

  if (!hasData) {
    return (
      <div style={{ height }} className="flex items-center justify-center">
        <div className="w-full h-1 bg-slate-200 rounded-full"></div>
      </div>
    )
  }

  return (
    <div style={{ height }} className="w-full">
      <ResponsiveContainer width="100%" height="100%">
        <LineChart data={chartData} margin={{ top: 0, right: 0, left: 0, bottom: 0 }}>
          <Line
            type="monotone"
            dataKey="mood"
            stroke="#8b5cf6"
            strokeWidth={1.5}
            dot={false}
            activeDot={false}
          />
        </LineChart>
      </ResponsiveContainer>
    </div>
  )
}

export default MoodChart7Days-e 

=== ./src/components/ui/avatar.tsx ===
// src/components/ui/avatar.tsx
import React from 'react';

interface AvatarProps {
  className?: string;
  children?: React.ReactNode;
}

export const Avatar: React.FC<AvatarProps> = ({ className, children }) => (
  <div className={`relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full ${className}`}>
    {children}
  </div>
);

export const AvatarImage: React.FC<{ src: string; alt: string }> = ({ src, alt }) => (
  <img src={src} alt={alt} className="aspect-square h-full w-full" />
);

export const AvatarFallback: React.FC<{ className?: string }> = ({ className, children }) => (
  <div className={`flex h-full w-full items-center justify-center rounded-full bg-muted ${className}`}>
    {children}
  </div>
);-e 

=== ./src/components/ui/badge.tsx ===
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }-e 

=== ./src/components/ui/button.tsx ===
import * as React from 'react'

interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {
  variant?: 'primary' | 'secondary' | 'outline'
  size?: 'sm' | 'md' | 'lg'
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = 'primary', size = 'md', ...props }, ref) => {
    return (
      <button
        className={`
          inline-flex items-center justify-center rounded-lg font-medium transition-colors
          ${variant === 'primary' ? 'bg-primary text-white hover:bg-primary/90' : ''}
          ${variant === 'secondary' ? 'bg-surface text-text-primary hover:bg-surface/80' : ''}
          ${variant === 'outline' ? 'border border-border-light bg-background hover:bg-surface' : ''}
          ${size === 'sm' ? 'h-9 px-3 text-sm' : ''}
          ${size === 'md' ? 'h-10 px-4 py-2' : ''}
          ${size === 'lg' ? 'h-11 px-8' : ''}
          ${className}
        `}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button }-e 

=== ./src/components/ui/textarea.tsx ===
// src/components/ui/textarea.tsx
import * as React from "react"
import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm",
          "placeholder:text-gray-500",
          "focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent",
          "disabled:cursor-not-allowed disabled:opacity-50",
          "transition-colors duration-200",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }-e 

=== ./src/components/ui/input.tsx ===
import * as React from 'react'

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={
          `flex h-10 w-full rounded-lg border border-gray-300 bg-white px-3 py-2 text-sm ring-offset-white file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`
        }
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = 'Input'

export { Input }-e 

=== ./src/components/ui/ModernMoodPicker.tsx ===
'use client'

import { useState, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'
import { Sparkles, Brain, Zap, Target, Heart, Smartphone } from 'lucide-react'

interface MoodEntry {
  id: string
  mood: number
  note?: string
  timestamp: Date
  date: string
}

interface ModernMoodPickerProps {
  value: number
  onValueChange?: (value: number) => void
  moodEntries?: MoodEntry[]
  streak?: number
  trend?: number
  consistency?: number
  averageMood?: number
  level?: number
  onSaveMood?: (mood: number) => void
  onAddNote?: () => void
  todayEntry?: MoodEntry | null
}

interface AIMoodInsights {
  analysis: string
  suggestions: string[]
  pattern: string
  encouragement: string
  specialTip: string
}

// System kolorów
const getMoodColor = (value: number) => {
  if (value <= 20) return 'from-gray-400 to-gray-500'
  if (value <= 40) return 'from-blue-400 to-blue-500'
  if (value <= 60) return 'from-green-400 to-green-500'
  if (value <= 80) return 'from-purple-400 to-purple-500'
  return 'from-rose-400 to-rose-500'
}

const getMoodGradient = (value: number) => {
  if (value <= 20) return 'bg-gradient-to-br from-gray-100 to-gray-200'
  if (value <= 40) return 'bg-gradient-to-br from-blue-50 to-blue-100'
  if (value <= 60) return 'bg-gradient-to-br from-green-50 to-green-100'
  if (value <= 80) return 'bg-gradient-to-br from-purple-50 to-purple-100'
  return 'bg-gradient-to-br from-rose-50 to-rose-100'
}

const MoodEmoji = ({ mood, size = "text-3xl" }: { mood: number; size?: string }) => {
  if (mood <= 20) return <span className={size}>😔</span>
  if (mood <= 40) return <span className={size}>😐</span>
  if (mood <= 60) return <span className={size}>🙂</span>
  if (mood <= 80) return <span className={size}>😊</span>
  return <span className={size}>🤩</span>
}

const getMoodLabel = (mood: number): string => {
  if (mood <= 20) return 'B. niski'
  if (mood <= 40) return 'Niski'
  if (mood <= 60) return 'Neutralny'
  if (mood <= 80) return 'Wysoki'
  return 'B. wysoki'
}

const getMoodDescription = (mood: number): string => {
  if (mood <= 20) return 'Potrzebujesz wsparcia'
  if (mood <= 40) return 'Czas na opiekę nad sobą'
  if (mood <= 60) return 'Równowaga i spokój'
  if (mood <= 80) return 'Energia i radość'
  return 'Pełnia szczęścia'
}

export const ModernMoodPicker: React.FC<ModernMoodPickerProps> = ({
  value,
  onValueChange,
  moodEntries = [],
  streak = 0,
  trend = 0,
  consistency = 0,
  averageMood = 50,
  level = 1,
  onSaveMood,
  onAddNote,
  todayEntry
}) => {
  const [currentMood, setCurrentMood] = useState(value)
  const [selectedMood, setSelectedMood] = useState<number | null>(null)
  const [showAISuggestions, setShowAISuggestions] = useState(false)
  const [aiInsights, setAiInsights] = useState<AIMoodInsights | null>(null)
  const [loadingAI, setLoadingAI] = useState(false)
  const [isMobile, setIsMobile] = useState(false)

  const moodLevels = [20, 40, 60, 80, 100]

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768)
    }
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  useEffect(() => {
    setCurrentMood(value)
  }, [value])

  const handleMoodSelect = (mood: number) => {
    setSelectedMood(mood)
    setCurrentMood(mood)
    onValueChange?.(mood)
  }

  const handleSave = () => {
    if (selectedMood !== null) {
      onSaveMood?.(selectedMood)
      setSelectedMood(null)
    }
  }

  const fetchAIInsights = async () => {
    try {
      setLoadingAI(true)
      
      const response = await fetch('/api/ai-mood-insights', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mood: currentMood,
          streak,
          trend,
          consistency,
          averageMood,
          level,
          moodHistory: moodEntries.slice(0, 14)
        }),
      })

      if (!response.ok) throw new Error('AI unavailable')
      
      const data = await response.json()
      setAiInsights(data)
      
    } catch (error) {
      console.error('Error fetching AI insights:', error)
      setAiInsights({
        analysis: "Analizuję Twój nastrój w kontekście codziennych doświadczeń...",
        suggestions: [
          "Zrób 5 głębokich oddechów i skup się na chwili obecnej",
          "Zapisz 3 rzeczy za które jesteś wdzięczny dzisiaj", 
          "Wyjdź na krótki spacer i zauważ piękno wokół siebie"
        ],
        pattern: `Konsystencja na poziomie ${consistency}% wskazuje na ${getConsistencyDescription(consistency).toLowerCase()}`,
        encouragement: "Twój streak pokazuje zaangażowanie w samoobserwację! 🌟",
        specialTip: "Dopasuj tempo do swojego samopoczucia - słuchaj siebie"
      })
    } finally {
      setLoadingAI(false)
    }
  }

  return (
    <div className="w-full max-w-4xl mx-auto">
      {/* Główny kontener - ZWIĘKSZONE PADDINGI */}
      <div className={cn(
        "rounded-3xl p-6 sm:p-8 md:p-10 backdrop-blur-sm border border-white/20 shadow-2xl",
        getMoodGradient(currentMood)
      )}>
        {/* Nagłówek - ZWIĘKSZONE MARGINESY */}
        <div className="text-center mb-8 sm:mb-12">
          <motion.h2 
            className="text-2xl sm:text-3xl md:text-4xl font-light text-gray-800 mb-4 sm:mb-6"
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
          >
            {todayEntry ? 'Twój dzisiejszy nastrój' : 'Jak się dziś czujesz?'}
          </motion.h2>
          <motion.p 
            className="text-gray-600 text-base sm:text-lg md:text-xl font-medium"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ delay: 0.1 }}
          >
            {getMoodDescription(currentMood)}
          </motion.p>
        </div>

        {/* Mood Selector - POPRAWIONE ODSTĘPY */}
        <div className="mb-8 sm:mb-12">
          {/* Mood buttons - WIĘKSZE ODSTĘPY */}
          <div className="flex sm:grid sm:grid-cols-5 gap-3 sm:gap-4 md:gap-6 mb-6 sm:mb-10 overflow-x-auto pb-3 sm:pb-0 hide-scrollbar">
            {moodLevels.map((mood) => (
              <motion.button
                key={mood}
                className={cn(
                  "relative group rounded-2xl sm:rounded-3xl p-4 sm:p-5 md:p-6 transition-all duration-300 transform hover:scale-105 flex-shrink-0",
                  "border-2 backdrop-blur-sm min-w-[80px] sm:min-w-0 flex flex-col items-center justify-between",
                  selectedMood === mood || currentMood === mood
                    ? `border-white shadow-xl sm:shadow-2xl scale-105 ${getMoodGradient(mood)}`
                    : `border-transparent ${getMoodGradient(mood)} opacity-70 hover:opacity-100`
                )}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => handleMoodSelect(mood)}
              >
                {/* Emoji - WIĘKSZE MARGINESY */}
                <div className="text-center mb-3 sm:mb-4">
                  <MoodEmoji 
                    mood={mood} 
                    size={isMobile ? "text-3xl" : "text-4xl sm:text-5xl"} 
                  />
                </div>
                
                {/* Label i procent - OPTYMALNE ODSTĘPY */}
                <div className="text-center space-y-2 w-full">
                  <div className={cn(
                    "text-sm sm:text-base font-semibold transition-colors",
                    selectedMood === mood || currentMood === mood 
                      ? "text-gray-900" 
                      : "text-gray-700"
                  )}>
                    {getMoodLabel(mood)}
                  </div>
                  <div className="text-xs sm:text-sm text-gray-600 bg-white/60 rounded-full px-3 py-1.5 backdrop-blur-sm border border-white/30 font-medium">
                    {mood}%
                  </div>
                </div>

                {/* Active Indicator */}
                {(selectedMood === mood || currentMood === mood) && (
                  <motion.div
                    className="absolute -top-2 -right-2 w-3 h-3 sm:w-4 sm:h-4 rounded-full bg-white shadow-lg border border-gray-200"
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    transition={{ type: "spring", stiffness: 500, damping: 30 }}
                  />
                )}
              </motion.button>
            ))}
          </div>

          {/* Current Mood Display - ZWIĘKSZONE ODSTĘPY */}
          <motion.div 
            className="text-center mb-6 sm:mb-8"
            initial={{ opacity: 0, scale: 0.9 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.2 }}
          >
            <div className="inline-flex items-center gap-4 sm:gap-6 px-6 sm:px-8 py-4 sm:py-5 rounded-2xl sm:rounded-3xl bg-white/90 backdrop-blur-sm border border-white/30 shadow-xl">
              <MoodEmoji 
                mood={currentMood} 
                size={isMobile ? "text-3xl" : "text-4xl"} 
              />
              <div className="text-left space-y-1">
                <div className="text-lg sm:text-xl font-bold text-gray-900">
                  {getMoodLabel(currentMood)}
                </div>
                <div className="text-sm sm:text-base text-gray-700 flex items-center gap-3">
                  <span className="bg-gray-100 rounded-full px-3 py-1.5 border border-gray-200 font-medium">
                    {currentMood}%
                  </span>
                  <span className="text-gray-500">•</span>
                  <span>{getMoodDescription(currentMood)}</span>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Action Buttons - WIĘKSZE PRZYCISKI I ODSTĘPY */}
          {!todayEntry && (
            <motion.div 
              className="flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.3 }}
            >
              <button
                onClick={handleSave}
                disabled={selectedMood === null}
                className={cn(
                  "px-6 sm:px-8 md:px-10 py-4 sm:py-5 rounded-2xl font-semibold text-white transition-all duration-300 transform hover:scale-105",
                  "shadow-xl flex items-center justify-center gap-3 text-base sm:text-lg min-h-[60px]",
                  selectedMood === null 
                    ? "bg-gray-400 cursor-not-allowed" 
                    : `bg-gradient-to-r ${getMoodColor(currentMood)} hover:shadow-2xl`
                )}
              >
                <Zap className="h-5 w-5 sm:h-6 sm:w-6" />
                {isMobile ? 'Zapisz' : 'Zapisz nastrój'}
              </button>
              
              <button
                onClick={onAddNote}
                className="px-6 sm:px-8 md:px-10 py-4 sm:py-5 rounded-2xl font-semibold border-2 border-gray-300 text-gray-700 transition-all duration-300 transform hover:scale-105 hover:border-gray-400 flex items-center justify-center gap-3 text-base sm:text-lg min-h-[60px] bg-white/80 backdrop-blur-sm hover:bg-white"
              >
                <Heart className="h-5 w-5 sm:h-6 sm:w-6" />
                {isMobile ? 'Notatka' : 'Dodaj notatkę'}
              </button>

              <button
                onClick={() => {
                  setShowAISuggestions(true)
                  fetchAIInsights()
                }}
                className="px-6 sm:px-8 md:px-10 py-4 sm:py-5 rounded-2xl font-semibold bg-white/80 backdrop-blur-sm border-2 border-blue-200 text-blue-700 transition-all duration-300 transform hover:scale-105 hover:bg-white flex items-center justify-center gap-3 text-base sm:text-lg min-h-[60px]"
              >
                <Brain className="h-5 w-5 sm:h-6 sm:w-6" />
                {isMobile ? 'AI' : 'AI Insights'}
              </button>
            </motion.div>
          )}
        </div>

        {/* Quick Stats - WIĘKSZE KARTY I ODSTĘPY */}
        <motion.div 
          className="grid grid-cols-2 sm:grid-cols-4 gap-4 sm:gap-6"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.4 }}
        >
          <div className="text-center p-4 sm:p-5 rounded-xl sm:rounded-2xl bg-white/70 backdrop-blur-sm border border-white/30 shadow-lg">
            <div className="text-xl sm:text-2xl font-bold text-blue-600 mb-2">{streak}</div>
            <div className="text-sm text-gray-700 font-medium">dni streak</div>
          </div>
          <div className="text-center p-4 sm:p-5 rounded-xl sm:rounded-2xl bg-white/70 backdrop-blur-sm border border-white/30 shadow-lg">
            <div className="text-xl sm:text-2xl font-bold text-green-600 mb-2">{averageMood}%</div>
            <div className="text-sm text-gray-700 font-medium">średnia</div>
          </div>
          <div className="text-center p-4 sm:p-5 rounded-xl sm:rounded-2xl bg-white/70 backdrop-blur-sm border border-white/30 shadow-lg">
            <div className={`text-xl sm:text-2xl font-bold mb-2 ${trend > 0 ? 'text-green-600' : trend < 0 ? 'text-red-600' : 'text-gray-600'}`}>
              {trend > 0 ? '+' : ''}{trend}%
            </div>
            <div className="text-sm text-gray-700 font-medium">trend</div>
          </div>
          <div className="text-center p-4 sm:p-5 rounded-xl sm:rounded-2xl bg-white/70 backdrop-blur-sm border border-white/30 shadow-lg">
            <div className="text-xl sm:text-2xl font-bold text-purple-600 mb-2">{consistency}%</div>
            <div className="text-sm text-gray-700 font-medium">konsystencja</div>
          </div>
        </motion.div>
      </div>

      {/* AI Insights Modal - POPRAWIONE ODSTĘPY */}
      <AnimatePresence>
        {showAISuggestions && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
              onClick={() => setShowAISuggestions(false)}
            />
            
            <motion.div
              initial={{ opacity: 0, scale: 0.9, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 20 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 w-[95vw] sm:w-[90vw] max-w-2xl max-h-[90vh] sm:max-h-[85vh] overflow-hidden bg-white rounded-3xl shadow-2xl border border-gray-200"
            >
              <div className="flex items-center justify-between p-6 sm:p-8 border-b border-gray-100 bg-gradient-to-r from-blue-50 to-purple-50">
                <div className="flex items-center gap-3 sm:gap-4">
                  <div className="p-3 bg-white rounded-xl shadow-sm">
                    <Sparkles className="h-6 w-6 sm:h-7 sm:w-7 text-purple-500" />
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-900 text-lg sm:text-xl">AI Analiza Twojego Nastroju</h3>
                    <p className="text-gray-600 text-sm sm:text-base">Spersonalizowane insights</p>
                  </div>
                </div>
                <button 
                  onClick={() => setShowAISuggestions(false)}
                  className="p-3 hover:bg-white rounded-xl transition-colors"
                >
                  <span className="text-2xl sm:text-3xl text-gray-400 hover:text-gray-600">×</span>
                </button>
              </div>
              
              <div className="p-6 sm:p-8 max-h-[65vh] sm:max-h-[60vh] overflow-y-auto">
                {loadingAI ? (
                  <div className="space-y-6 text-center py-8 sm:py-12">
                    <div className="animate-spin rounded-full h-12 w-12 sm:h-14 sm:w-14 border-b-2 border-blue-500 mx-auto"></div>
                    <p className="text-gray-600 text-base sm:text-lg">AI analizuje Twój nastrój...</p>
                  </div>
                ) : aiInsights ? (
                  <div className="space-y-6 sm:space-y-8">
                    {/* Analiza */}
                    <div className="p-5 sm:p-6 bg-blue-50 rounded-2xl border border-blue-100">
                      <div className="flex items-start gap-4 sm:gap-5">
                        <Target className="h-6 w-6 sm:h-7 sm:w-7 text-blue-500 mt-0.5 flex-shrink-0" />
                        <div className="space-y-3">
                          <p className="font-bold text-blue-900 text-lg sm:text-xl">Analiza Nastroju</p>
                          <p className="text-blue-800 leading-relaxed text-base sm:text-lg">{aiInsights.analysis}</p>
                        </div>
                      </div>
                    </div>

                    {/* Sugestie */}
                    <div className="space-y-4">
                      <p className="font-bold text-gray-900 text-lg sm:text-xl flex items-center gap-3">
                        <Zap className="h-6 w-6 sm:h-7 sm:w-7 text-yellow-500" />
                        Spersonalizowane Sugestie
                      </p>
                      <div className="space-y-4">
                        {aiInsights.suggestions.map((suggestion, index) => (
                          <div key={index} className="flex items-start gap-4 p-4 sm:p-5 rounded-xl bg-gray-50 hover:bg-gray-100 transition-colors border border-gray-100">
                            <Heart className="h-5 w-5 sm:h-6 sm:w-6 text-rose-500 mt-0.5 flex-shrink-0" />
                            <span className="text-gray-700 leading-relaxed text-base sm:text-lg flex-1">{suggestion}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Wzorzec i Encouragement */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                      <div className="p-4 sm:p-5 bg-green-50 rounded-xl border border-green-100">
                        <p className="text-sm sm:text-base font-bold text-green-800 mb-2">🎯 Wykryty Wzorzec</p>
                        <p className="text-sm sm:text-base text-green-700">{aiInsights.pattern}</p>
                      </div>
                      <div className="p-4 sm:p-5 bg-purple-50 rounded-xl border border-purple-100">
                        <p className="text-sm sm:text-base font-bold text-purple-800 mb-2">💫 Motywacja</p>
                        <p className="text-sm sm:text-base text-purple-700">{aiInsights.encouragement}</p>
                      </div>
                    </div>

                    {/* Special Tip */}
                    {aiInsights.specialTip && (
                      <div className="p-4 sm:p-5 bg-orange-50 rounded-xl border border-orange-100">
                        <p className="text-sm sm:text-base font-bold text-orange-800 mb-2">💡 Specjalna Rada</p>
                        <p className="text-sm sm:text-base text-orange-700">{aiInsights.specialTip}</p>
                      </div>
                    )}
                  </div>
                ) : null}
              </div>
              
              <div className="p-6 sm:p-8 border-t border-gray-100 bg-gray-50">
                <button
                  onClick={() => setShowAISuggestions(false)}
                  className="w-full py-4 sm:py-5 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors font-semibold text-lg shadow-lg"
                >
                  Zamknij
                </button>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>

      {/* CSS dla ukrycia scrollbara na mobile */}
      <style jsx>{`
        .hide-scrollbar {
          -ms-overflow-style: none;
          scrollbar-width: none;
        }
        .hide-scrollbar::-webkit-scrollbar {
          display: none;
        }
      `}</style>
    </div>
  )
}

function getConsistencyDescription(consistency: number): string {
  if (consistency >= 80) return 'Wysoka stabilność'
  if (consistency >= 60) return 'Umiarkowana stabilność'
  if (consistency >= 40) return 'Zmienne emocje'
  return 'Duża zmienność'
}-e 

=== ./src/components/error-boundary.tsx ===
'use client'

import { useState, useEffect, useRef, useCallback, useMemo } from 'react'
import { motion } from 'framer-motion'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Brain, Target, Zap, X, Sparkles, Clock, RefreshCw, GraduationCap, Activity, Lightbulb } from 'lucide-react'
import { cn } from '@/lib/utils'

// Cache dla komponentu
const componentCache = new Map()

// Prawdziwe wywołanie AI - używamy twojego działającego endpointu
const fetchAIAnalysis = async (userData: any) => {
  const cacheKey = JSON.stringify({
    mood: userData.currentMood,
    streak: userData.streak,
    trend: userData.trend,
    consistency: userData.consistency,
    level: userData.level,
    entriesCount: userData.moodEntries?.length || 0,
    notesCount: userData.userNotes?.length || 0
  })

  // Sprawdź cache
  if (componentCache.has(cacheKey)) {
    const cached = componentCache.get(cacheKey)
    if (Date.now() - cached.timestamp < 5 * 60 * 1000) {
      console.log('💾 Using component cache')
      return cached.data
    }
  }

  try {
    const moodEntries = userData.moodEntries || []
    const userNotes = userData.userNotes || []
    
    // Przygotuj dane dla AI
    const moodDescription = getMoodDescription(userData.currentMood || 50)
    const recentMoods = moodEntries.slice(-5).map((e: any) => e.mood || 50)
    const averageRecentMood = recentMoods.length > 0 
      ? Math.round(recentMoods.reduce((a: number, b: number) => a + b, 0) / recentMoods.length)
      : 50

    // Stwórz prompt dla analizy nastroju
    const analysisPrompt = `Jesteś asystentem wellbeing w aplikacji "Spokój w Głowie" dla młodzieży.

DANE UŻYTKOWNIKA:
- Aktualny nastrój: ${userData.currentMood || 50}/100 (${moodDescription})
- Streak: ${userData.streak || 0} dni
- Poziom: ${userData.level || 1}
- Trend nastroju: ${userData.trend || 0}%
- Stabilność: ${userData.consistency || 50}%
- Średni nastrój: ${userData.averageMood || 50}%
- Liczba wpisów: ${moodEntries.length}
- Ostatnie nastroje: ${recentMoods.join(', ')}
- Średni z ostatnich 5 dni: ${averageRecentMood}%

PROSZĘ O ANALIZĘ W TYM FORMACIE:
{
"deepAnalysis": "2-3 zdania analizy obecnego nastroju i trendów",
"personalizedChallenge": "krótkie wyzwanie na dziś (max 8 słów)",
"scienceBackedTool": "konkretna technika wellbeing (max 6 słów)", 
"supportEcosystem": "strategia wsparcia (max 8 słów)",
"breakthroughInsight": "motywujący wgląd o nastoju",
"immediateBreakthrough": "natychmiastowa akcja (max 5 słów)"
}

Bądź:
- Konkretny i praktyczny
- Wspierający ale nie infantylny
- Dopasowany do nastroju i streak
- W języku polskim
- Max 200 znaków w każdym polu`

    console.log('🔍 Fetching AI analysis from chat endpoint...')

    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 15000)

    // Używamy twojego działającego endpointu /api/ai-chat
    const response = await fetch('/api/ai-chat', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      signal: controller.signal,
      body: JSON.stringify({ 
        message: analysisPrompt 
      })
    })
    
    clearTimeout(timeoutId)

    if (!response.ok) {
      throw new Error(`AI API failed: ${response.status}`)
    }

    const data = await response.json()
    console.log('📄 AI Response received:', data)

    // Parsujemy odpowiedź tekstową na obiekt
    const aiResponse = parseAIResponse(data.response, userData)
    const result = transformAIResponse(aiResponse, userData)
    
    // Zapisz w cache
    componentCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    })
    
    return result
    
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('⏰ Request timeout')
    } else {
      console.error('AI fetch failed:', error)
    }
    return generateLocalAIAnalysis(userData)
  }
}

// Funkcja do parsowania odpowiedzi AI
const parseAIResponse = (responseText: string, userData: any) => {
  try {
    // Spróbuj znaleźć JSON w odpowiedzi
    const jsonMatch = responseText.match(/\{[\s\S]*\}/)
    if (jsonMatch) {
      const jsonString = jsonMatch[0]
      return JSON.parse(jsonString)
    }
    
    // Jeśli nie ma JSON, użyj fallback
    throw new Error('No JSON found in response')
  } catch (error) {
    console.log('❌ Could not parse AI response as JSON, using text analysis')
    // Analizujemy tekst i tworzymy strukturę na podstawie treści
    return createAnalysisFromText(responseText, userData)
  }
}

// Tworzy strukturę analizy z tekstowej odpowiedzi AI
const createAnalysisFromText = (text: string, userData: any) => {
  const sentences = text.split('.').filter(s => s.trim().length > 0)
  
  return {
    deepAnalysis: sentences[0] || "Analiza Twojego nastroju w trakcie...",
    personalizedChallenge: sentences[1] || "Zrób 3 głębokie oddechy",
    scienceBackedTool: "Technika oddechu 4-7-8",
    supportEcosystem: "Poranna rutyna z 3 oddechami", 
    breakthroughInsight: sentences[2] || "Małe kroki prowadzą do wielkich zmian",
    immediateBreakthrough: "Zrób pauzę na oddech",
    isRealAI: true
  }
}

// Transformacja odpowiedzi AI
const transformAIResponse = (aiData: any, userData: any) => {
  const safeUserData = {
    currentMood: userData.currentMood || 50,
    consistency: userData.consistency || 50,
    trend: userData.trend || 0,
    streak: userData.streak || 0
  }
  
  return {
    deepAnalysis: aiData.deepAnalysis || "AI analizuje Twój nastrój w kontekście codziennych doświadczeń...",
    sections: [
      {
        icon: <Target className="h-5 w-5" />,
        title: "🎯 Analiza Profilu",
        subtitle: "Twój unikalny profil emocjonalny", 
        content: aiData.deepAnalysis || "Przeanalizuj swój nastrój w kontekście codziennych doświadczeń.",
        color: "purple",
        duration: "Refleksja",
        priority: "high",
        type: "analysis"
      },
      {
        icon: <Zap className="h-5 w-5" />,
        title: "🚀 Wyzwanie",
        subtitle: "Dopasowane do Ciebie",
        content: aiData.personalizedChallenge || "Stwórz codzienny rytuał samoobserwacji przez 5 dni.",
        color: "blue", 
        duration: "5 dni",
        priority: "high",
        type: "challenge"
      },
      {
        icon: <GraduationCap className="h-5 w-5" />,
        title: "🧠 Technika",
        subtitle: "Naukowa metoda",
        content: aiData.scienceBackedTool || "Technika oddechu 4-7-8: 4s wdech, 7s pauza, 8s wydech.",
        color: "green",
        duration: "5-10 min", 
        priority: "high",
        type: "tool"
      },
      {
        icon: <Activity className="h-5 w-5" />,
        title: "💫 Strategia",
        subtitle: "Twój ekosystem wsparcia",
        content: aiData.supportEcosystem || "Poranny rytuał: 3 głębokie oddechy + intencja na dzień.",
        color: "orange",
        duration: "Codziennie",
        priority: "medium",
        type: "strategy"
      },
      {
        icon: <Lightbulb className="h-5 w-5" />,
        title: "🔍 Wgląd", 
        subtitle: "Odkrycie o sobie",
        content: aiData.breakthroughInsight || "Regularność w obserwacji nastroju sama w sobie jest terapią.",
        color: "pink",
        duration: "Przemyślenia",
        priority: "medium",
        type: "insight"
      },
      {
        icon: <Sparkles className="h-5 w-5" />,
        title: "⚡ Akcja",
        subtitle: "Zacznij teraz",
        content: aiData.immediateBreakthrough || "Zrób 2-minutową pauzę na świadomy oddech.",
        color: "red",
        duration: "15 min",
        priority: "high", 
        type: "action"
      }
    ],
    isRealAI: aiData.isRealAI !== false,
    timestamp: new Date().toISOString(),
    profileType: getProfileType(
      safeUserData.currentMood, 
      safeUserData.consistency, 
      safeUserData.trend, 
      safeUserData.streak
    )
  }
}

// Lokalna generacja tylko jako fallback
const generateLocalAIAnalysis = (userData: any) => {
  const currentMood = userData.currentMood || 50
  const streak = userData.streak || 0
  const trend = userData.trend || 0
  const consistency = userData.consistency || 50
  
  return {
    deepAnalysis: `AI analizuje Twój nastrój ${currentMood}% w kontekście ${streak}-dniowej praktyki. Trend ${trend}% i stabilność ${consistency}% tworzą unikalny wzorzec emocjonalny.`,
    personalizedChallenge: `Przez 3-5 dni praktykuj uważną obserwację swoich reakcji emocjonalnych w kluczowych momentach dnia.`,
    scienceBackedTool: "Technika oddechu 4-7-8: 4s wdech, 7s pauza, 8s wydech. Reguluje system nerwowy.",
    supportEcosystem: "Stwórz codzienny rytuał samoobserwacji wykorzystujący Twoje obecne nawyki.",
    breakthroughInsight: "Twoja regularność w zapisywaniu nastroju sama w sobie jest potężnym narzędziem samopoznania.",
    immediateBreakthrough: "Zrób 2-minutową pauzę na świadomy oddech i zauważ jak wpływa na Twój nastrój.",
    isRealAI: false,
    timestamp: new Date().toISOString(),
    sections: [
      {
        icon: <Target className="h-5 w-5" />,
        title: "🎯 Analiza Profilu",
        subtitle: "Twój unikalny profil emocjonalny", 
        content: `AI analizuje Twój nastrój ${currentMood}% w kontekście ${streak}-dniowej praktyki.`,
        color: "purple",
        duration: "Refleksja",
        priority: "high",
        type: "analysis"
      },
      {
        icon: <Zap className="h-5 w-5" />,
        title: "🚀 Wyzwanie",
        subtitle: "Dopasowane do Ciebie",
        content: "Przez 3-5 dni praktykuj uważną obserwację swoich reakcji emocjonalnych.",
        color: "blue", 
        duration: "5 dni",
        priority: "high",
        type: "challenge"
      },
      {
        icon: <GraduationCap className="h-5 w-5" />,
        title: "🧠 Technika",
        subtitle: "Naukowa metoda",
        content: "Technika oddechu 4-7-8: 4s wdech, 7s pauza, 8s wydech.",
        color: "green",
        duration: "5-10 min", 
        priority: "high",
        type: "tool"
      },
      {
        icon: <Activity className="h-5 w-5" />,
        title: "💫 Strategia",
        subtitle: "Twój ekosystem wsparcia",
        content: "Stwórz codzienny rytuał samoobserwacji wykorzystujący Twoje obecne nawyki.",
        color: "orange",
        duration: "Codziennie",
        priority: "medium",
        type: "strategy"
      },
      {
        icon: <Lightbulb className="h-5 w-5" />,
        title: "🔍 Wgląd", 
        subtitle: "Odkrycie o sobie",
        content: "Twoja regularność w zapisywaniu nastroju sama w sobie jest potężnym narzędziem samopoznania.",
        color: "pink",
        duration: "Przemyślenia",
        priority: "medium",
        type: "insight"
      },
      {
        icon: <Sparkles className="h-5 w-5" />,
        title: "⚡ Akcja",
        subtitle: "Zacznij teraz",
        content: "Zrób 2-minutową pauzę na świadomy oddech i zauważ jak wpływa na Twój nastrój.",
        color: "red",
        duration: "15 min",
        priority: "high", 
        type: "action"
      }
    ],
    profileType: getProfileType(currentMood, consistency, trend, streak)
  }
}

function getMoodDescription(mood: number): string {
  if (mood <= 20) return 'bardzo niski'
  if (mood <= 40) return 'niski'
  if (mood <= 60) return 'neutralny'
  if (mood <= 80) return 'wysoki'
  return 'bardzo wysoki'
}

function getProfileType(mood: number, consistency: number, trend: number, streak: number): string {
  if (consistency > 70 && trend > 0) return 'STABILNY WZROST'
  if (consistency > 70 && trend < 0) return 'STABILNA REFLEKSJA' 
  if (consistency < 50 && trend > 0) return 'DYNAMICZNY WZROST'
  if (consistency < 50 && trend < 0) return 'WRAŻLIWOŚĆ'
  if (streak > 7) return 'ZAAWANSOWANY'
  return 'ŚWIADOMY'
}

interface AIMoodInsightsProps {
  currentMood?: number
  moodEntries?: any[]
  streak?: number
  trend?: number
  consistency?: number
  averageMood?: number
  level?: number
  onBack: () => void
  userNotes?: any[]
}

export const AIMoodInsights = ({
  currentMood = 50,
  moodEntries = [],
  streak = 0,
  trend = 0,
  consistency = 50,
  averageMood = 50,
  level = 1,
  onBack,
  userNotes = []
}: AIMoodInsightsProps) => {
  const [aiData, setAiData] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const modalRef = useRef<HTMLDivElement>(null)
  const isMounted = useRef(true)
  const requestInProgress = useRef(false)

  // Stabilizuj dane użytkownika
  const userData = useMemo(() => ({
    currentMood,
    moodEntries,
    streak,
    trend,
    consistency,
    averageMood,
    level,
    userNotes
  }), [currentMood, streak, trend, consistency, level, 
      moodEntries.length,
      userNotes.length
  ])

  const loadAIAnalysis = useCallback(async () => {
    if (requestInProgress.current) {
      console.log('🛑 Request already in progress, skipping...')
      return
    }

    requestInProgress.current = true
    
    try {
      setIsLoading(true)
      setError(null)
      
      console.log('🚀 Starting AI analysis...')
      const analysis = await fetchAIAnalysis(userData)
      
      if (isMounted.current) {
        setAiData(analysis)
        console.log('✅ AI analysis completed')
      }
    } catch (err) {
      console.error('❌ AI analysis failed:', err)
      if (isMounted.current) {
        setError('Nie udało się załadować analizy AI')
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false)
      }
      requestInProgress.current = false
    }
  }, [userData])

  useEffect(() => {
    isMounted.current = true
    
    // Uruchom tylko raz przy montowaniu
    loadAIAnalysis()

    return () => {
      isMounted.current = false
    }
  }, [loadAIAnalysis])

  const getColorClasses = (color: string, type = 'card') => {
    const colorMap: any = {
      purple: {
        card: 'bg-purple-50/80 border-purple-200',
        icon: 'bg-purple-100 text-purple-600',
        text: 'text-purple-900',
        badge: 'bg-purple-100 text-purple-700'
      },
      blue: {
        card: 'bg-blue-50/80 border-blue-200', 
        icon: 'bg-blue-100 text-blue-600',
        text: 'text-blue-900',
        badge: 'bg-blue-100 text-blue-700'
      },
      green: {
        card: 'bg-green-50/80 border-green-200',
        icon: 'bg-green-100 text-green-600',
        text: 'text-green-900',
        badge: 'bg-green-100 text-green-700'
      },
      orange: {
        card: 'bg-orange-50/80 border-orange-200',
        icon: 'bg-orange-100 text-orange-600',
        text: 'text-orange-900',
        badge: 'bg-orange-100 text-orange-700'
      },
      pink: {
        card: 'bg-pink-50/80 border-pink-200',
        icon: 'bg-pink-100 text-pink-600',
        text: 'text-pink-900',
        badge: 'bg-pink-100 text-pink-700'
      },
      red: {
        card: 'bg-red-50/80 border-red-200',
        icon: 'bg-red-100 text-red-600',
        text: 'text-red-900',
        badge: 'bg-red-100 text-red-700'
      }
    }
    return colorMap[color]?.[type] || colorMap.blue[type]
  }

  const handleRefresh = async () => {
    if (requestInProgress.current) {
      console.log('🛑 Request in progress, please wait...')
      return
    }

    // Wyczyść cache dla obecnych parametrów
    const cacheKey = JSON.stringify({
      mood: currentMood,
      streak: streak,
      trend: trend,
      consistency: consistency,
      level: level,
      entriesCount: moodEntries.length,
      notesCount: userNotes.length
    })
    componentCache.delete(cacheKey)

    setIsLoading(true)
    setError(null)
    
    await loadAIAnalysis()
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/40 backdrop-blur-sm">
      <motion.div
        ref={modalRef}
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-white rounded-2xl shadow-xl border border-gray-200 w-full max-w-6xl max-h-[95vh] overflow-hidden flex flex-col"
      >
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-100 bg-gradient-to-r from-blue-50/50 to-purple-50/50">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-white rounded-xl shadow-sm border border-gray-100">
              <Brain className="h-6 w-6 text-purple-500" />
            </div>
            <div>
              <h2 className="font-bold text-gray-900">Spokój AI</h2>
              <p className="text-xs text-gray-600">Personalizowana analiza Twojego nastroju</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {aiData?.isRealAI && (
              <div className="flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs">
                <Sparkles className="h-3 w-3" />
                AI Premium
              </div>
            )}
            <Button
              onClick={onBack}
              variant="ghost"
              size="sm"
              className="h-8 w-8 p-0 hover:bg-gray-100"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-16 space-y-4">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                className="w-12 h-12 border-3 border-blue-200 border-t-blue-600 rounded-full"
              />
              <div className="text-center">
                <p className="font-semibold text-gray-900">AI analizuje Twój nastrój...</p>
                <p className="text-sm text-gray-600 mt-1">To potrwa tylko chwilę</p>
              </div>
            </div>
          ) : error ? (
            <div className="flex flex-col items-center justify-center py-16 space-y-4">
              <div className="text-red-500 text-lg">❌</div>
              <p className="text-gray-900">{error}</p>
              <Button onClick={handleRefresh} variant="outline">
                Spróbuj ponownie
              </Button>
            </div>
          ) : aiData ? (
            <div className="p-6 space-y-6">
              {/* Stats Grid */}
              <div className="grid grid-cols-4 gap-3">
                <CompactStatCard icon="😊" value={currentMood} label="Nastrój" />
                <CompactStatCard icon="🔥" value={streak} label="Streak" />
                <CompactStatCard icon="📈" value={`${trend > 0 ? '+' : ''}${trend}%`} label="Trend" />
                <CompactStatCard icon="💪" value={`${consistency}%`} label="Stabilność" />
              </div>

              {/* Profile Badge */}
              {aiData.profileType && (
                <div className="flex justify-center">
                  <div className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-2 rounded-full text-sm font-medium shadow-sm">
                    👤 Profil: {aiData.profileType}
                  </div>
                </div>
              )}

              {/* Główna analiza */}
              <Card className="border-0 bg-gradient-to-r from-blue-50 to-purple-50 shadow-sm">
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <div className="p-2 bg-white rounded-lg shadow-xs border border-blue-200">
                      <Target className="h-4 w-4 text-blue-600" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900 text-sm mb-2">Analiza AI</h3>
                      <p className="text-gray-700 text-sm leading-relaxed">{aiData.deepAnalysis}</p>
                      <div className="flex items-center gap-3 mt-3 text-xs text-gray-500">
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          {new Date(aiData.timestamp).toLocaleTimeString('pl-PL')}
                        </div>
                        {aiData.isRealAI && (
                          <div className="flex items-center gap-1">
                            <Sparkles className="h-3 w-3" />
                            AI Premium
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Sekcje AI */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {aiData.sections?.map((section: any, index: number) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className={cn(
                      "border-0 shadow-xs hover:shadow-sm transition-all duration-200 h-full",
                      getColorClasses(section.color, 'card')
                    )}>
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <div className={cn(
                              "p-1.5 rounded-lg",
                              getColorClasses(section.color, 'icon')
                            )}>
                              {section.icon}
                            </div>
                            <div>
                              <h4 className={cn(
                                "font-semibold text-sm",
                                getColorClasses(section.color, 'text')
                              )}>
                                {section.title}
                              </h4>
                              <p className="text-xs text-gray-600">{section.subtitle}</p>
                            </div>
                          </div>
                          <span className={cn(
                            "text-xs px-2 py-1 rounded-full whitespace-nowrap",
                            getColorClasses(section.color, 'badge')
                          )}>
                            {section.duration}
                          </span>
                        </div>

                        <p className={cn(
                          "text-sm leading-relaxed",
                          getColorClasses(section.color, 'text')
                        )}>
                          {section.content}
                        </p>

                        {section.priority === 'high' && (
                          <div className="flex items-center gap-1 mt-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                            <span className="text-xs text-red-600 font-medium">Wysoki priorytet</span>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            </div>
          ) : null}
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-100 bg-gray-50/50">
          <div className="flex gap-3">
            <Button
              onClick={onBack}
              variant="outline"
              className="flex-1 border-gray-300"
            >
              Wróć
            </Button>
            <Button
              onClick={handleRefresh}
              disabled={isLoading}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              {isLoading ? 'Ładowanie...' : 'Nowa Analiza'}
            </Button>
          </div>
        </div>
      </motion.div>
    </div>
  )
}

function CompactStatCard({ icon, value, label }: { icon: string, value: string | number, label: string }) {
  return (
    <div className="text-center p-3 bg-white rounded-lg border border-gray-200 shadow-xs">
      <div className="text-lg mb-1">{icon}</div>
      <div className="font-bold text-gray-900 text-sm">{value}</div>
      <div className="text-xs text-gray-600">{label}</div>
    </div>
  )
}-e 

=== ./src/components/protected-route.tsx ===
// src/components/protected-route.tsx
'use client'
import { useAuth } from '@/components/providers/auth-provider'
import { redirect } from 'next/navigation'

export default function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { user, loading } = useAuth()

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
      </div>
    )
  }

  if (!user) {
    redirect('/login')
  }

  return <>{children}</>
}-e 

=== ./src/components/chat/ChatButton.tsx ===
'use client'

import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { MessageCircle } from 'lucide-react'
import { ChatInterface } from './ChatInterface'

export function ChatButton() {
  const [isChatOpen, setIsChatOpen] = useState(false)

  return (
    <>
      <Button
        onClick={() => setIsChatOpen(true)}
        className="fixed bottom-6 right-6 w-14 h-14 rounded-full shadow-2xl bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 z-40"
        size="icon"
      >
        <MessageCircle className="h-6 w-6 text-white" />
      </Button>

      <ChatInterface 
        isOpen={isChatOpen} 
        onClose={() => setIsChatOpen(false)} 
      />
    </>
  )
}-e 

=== ./src/components/chat/ChatInterface.tsx ===
'use client'

import { useState, useEffect, useRef } from 'react'
import { useAuth } from '@/components/providers/auth-provider'
import { chatService, type Conversation, type ChatMessage } from '@/lib/chat-service'
import userService from '@/lib/user-service'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { 
  MessageCircle, 
  Send, 
  Users, 
  Search,
  X,
  Clock
} from 'lucide-react'
import { cn } from '@/lib/utils'
import { motion, AnimatePresence } from 'framer-motion'

interface ChatInterfaceProps {
  isOpen: boolean
  onClose: () => void
}

export function ChatInterface({ isOpen, onClose }: ChatInterfaceProps) {
  const { user } = useAuth()
  const [conversations, setConversations] = useState<Conversation[]>([])
  const [activeConversation, setActiveConversation] = useState<string | null>(null)
  const [messages, setMessages] = useState<ChatMessage[]>([])
  const [newMessage, setNewMessage] = useState('')
  const [loading, setLoading] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const [userProfiles, setUserProfiles] = useState<Map<string, any>>(new Map())

  // Ładuj konwersacje
  useEffect(() => {
    if (!user?.uid || !isOpen) return

    const unsubscribe = chatService.subscribeToConversations(user.uid, async (convs) => {
      setConversations(convs)
      
      // Pobierz profile użytkowników
      const profiles = new Map()
      for (const conv of convs) {
        for (const participantId of conv.participants) {
          if (participantId !== user.uid && !profiles.has(participantId)) {
            const profile = await userService.getUserProfile(participantId)
            if (profile) {
              profiles.set(participantId, profile)
            }
          }
        }
      }
      setUserProfiles(profiles)
    })

    return () => unsubscribe()
  }, [user?.uid, isOpen])

  // Ładuj wiadomości gdy konwersacja aktywna
  useEffect(() => {
    if (!activeConversation || !user?.uid) return

    const unsubscribe = chatService.subscribeToMessages(activeConversation, (msgs) => {
      setMessages(msgs)
      // Oznacz jako przeczytane
      chatService.markMessagesAsRead(activeConversation, user.uid!)
    })

    return () => unsubscribe()
  }, [activeConversation, user?.uid])

  // Scroll do najnowszej wiadomości
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' })
  }, [messages])

  const handleSendMessage = async () => {
    if (!newMessage.trim() || !activeConversation || !user?.uid) return

    const otherUserId = activeConversation.split('_').find(id => id !== user.uid)!
    
    setLoading(true)
    try {
      await chatService.sendMessage(activeConversation, user.uid, otherUserId, newMessage)
      setNewMessage('')
    } catch (error) {
      console.error('Błąd wysyłania wiadomości:', error)
    } finally {
      setLoading(false)
    }
  }

  const startNewConversation = async (friendId: string) => {
    if (!user?.uid) return
    
    const conversationId = await chatService.createConversation(user.uid, friendId)
    setActiveConversation(conversationId)
  }

  const getOtherParticipant = (conversation: Conversation) => {
    return conversation.participants.find(id => id !== user?.uid)!
  }

  const getParticipantName = (participantId: string) => {
    const profile = userProfiles.get(participantId)
    return profile?.displayName || 'Nieznany użytkownik'
  }

  if (!isOpen) return null

  return (
    <div className="fixed bottom-4 right-4 w-96 h-[600px] bg-white rounded-2xl shadow-2xl border border-gray-200 flex flex-col z-50">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-gradient-to-r from-blue-500 to-purple-500 text-white rounded-t-2xl">
        <div className="flex items-center gap-2">
          <MessageCircle className="h-5 w-5" />
          <span className="font-semibold">Wiadomości</span>
          {conversations.some(conv => conv.unreadCount > 0) && (
            <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
              {conversations.reduce((acc, conv) => acc + conv.unreadCount, 0)}
            </span>
          )}
        </div>
        <Button
          variant="ghost"
          size="sm"
          onClick={onClose}
          className="text-white hover:bg-white/20"
        >
          <X className="h-4 w-4" />
        </Button>
      </div>

      {/* Content */}
      <div className="flex-1 flex">
        {/* Lista konwersacji */}
        {!activeConversation ? (
          <div className="flex-1 flex flex-col">
            <div className="p-4 border-b border-gray-100">
              <Input
                placeholder="Szukaj konwersacji..."
                className="w-full"
              />
            </div>
            
            <div className="flex-1 overflow-y-auto">
              {conversations.length === 0 ? (
                <div className="text-center py-8 text-gray-500">
                  <Users className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                  <p>Brak konwersacji</p>
                  <p className="text-sm">Rozpocznij czat z znajomym!</p>
                </div>
              ) : (
                conversations.map(conversation => (
                  <ConversationItem
                    key={conversation.id}
                    conversation={conversation}
                    userProfiles={userProfiles}
                    currentUserId={user?.uid!}
                    isActive={activeConversation === conversation.id}
                    onClick={() => setActiveConversation(conversation.id)}
                  />
                ))
              )}
            </div>
          </div>
        ) : (
          /* Czat */
          <div className="flex-1 flex flex-col">
            {/* Header czatu */}
            <div className="p-3 border-b border-gray-100 flex items-center gap-3">
              <Button
                variant="ghost"
                size="sm"
                onClick={() => setActiveConversation(null)}
                className="text-gray-600"
              >
                ←
              </Button>
              <div className="flex-1">
                <div className="font-semibold text-gray-900">
                  {getParticipantName(getOtherParticipant(
                    conversations.find(c => c.id === activeConversation)!
                  ))}
                </div>
              </div>
            </div>

            {/* Wiadomości */}
            <div className="flex-1 overflow-y-auto p-4 space-y-3">
              {messages.map(message => (
                <MessageBubble
                  key={message.id}
                  message={message}
                  isOwn={message.senderId === user?.uid}
                  senderName={getParticipantName(message.senderId)}
                />
              ))}
              <div ref={messagesEndRef} />
            </div>

            {/* Input wiadomości */}
            <div className="p-3 border-t border-gray-100">
              <div className="flex gap-2">
                <Input
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                  placeholder="Napisz wiadomość..."
                  disabled={loading}
                  className="flex-1"
                />
                <Button
                  onClick={handleSendMessage}
                  disabled={!newMessage.trim() || loading}
                  className="bg-blue-500 hover:bg-blue-600"
                >
                  <Send className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  )
}

function ConversationItem({ conversation, userProfiles, currentUserId, isActive, onClick }: any) {
  const otherUserId = conversation.participants.find((id: string) => id !== currentUserId)!
  const profile = userProfiles.get(otherUserId)
  
  return (
    <div
      onClick={onClick}
      className={cn(
        "p-3 border-b border-gray-100 cursor-pointer hover:bg-gray-50 transition-colors",
        isActive && "bg-blue-50 border-blue-200"
      )}
    >
      <div className="flex items-center gap-3">
        <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold">
          {profile?.displayName?.charAt(0) || 'U'}
        </div>
        <div className="flex-1 min-w-0">
          <div className="font-semibold text-gray-900 truncate">
            {profile?.displayName || 'Nieznany użytkownik'}
          </div>
          <div className="text-sm text-gray-600 truncate">
            {conversation.lastMessage || 'Brak wiadomości'}
          </div>
        </div>
        <div className="text-right">
          <div className="text-xs text-gray-500">
            {conversation.lastMessageTime.toLocaleTimeString('pl-PL', { 
              hour: '2-digit', 
              minute: '2-digit' 
            })}
          </div>
          {conversation.unreadCount > 0 && (
            <div className="bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center mt-1">
              {conversation.unreadCount}
            </div>
          )}
        </div>
      </div>
    </div>
  )
}

function MessageBubble({ message, isOwn, senderName }: any) {
  return (
    <div className={cn(
      "flex",
      isOwn ? "justify-end" : "justify-start"
    )}>
      <div className={cn(
        "max-w-xs lg:max-w-md px-4 py-2 rounded-2xl",
        isOwn 
          ? "bg-blue-500 text-white rounded-br-none" 
          : "bg-gray-100 text-gray-900 rounded-bl-none"
      )}>
        {!isOwn && (
          <div className="text-xs font-medium text-blue-600 mb-1">
            {senderName}
          </div>
        )}
        <div className="text-sm">{message.content}</div>
        <div className={cn(
          "text-xs mt-1",
          isOwn ? "text-blue-100" : "text-gray-500"
        )}>
          {message.timestamp.toLocaleTimeString('pl-PL', { 
            hour: '2-digit', 
            minute: '2-digit' 
          })}
        </div>
      </div>
    </div>
  )
}-e 

=== ./src/components/layout/card.tsx ===
import * as React from 'react'
import { cn } from '@/lib/utils'

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-2xl border border-border-light bg-background text-text-primary shadow-sm',
      className
    )}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-text-secondary', className)}
    {...props}
  />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }-e 

=== ./src/components/layout/slider.tsx ===
'use client'

import * as React from 'react'
import * as SliderPrimitive from '@radix-ui/react-slider'
import { cn } from '@/lib/utils'

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex w-full touch-none select-none items-center',
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-surface">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }-e 

=== ./src/components/layout/progress.tsx ===
'use client'

import * as React from 'react'
import { cn } from '@/lib/utils'

interface ProgressProps {
  value?: number
  className?: string
}

const Progress = React.forwardRef<
  HTMLDivElement,
  ProgressProps
>(({ className, value = 0, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'relative h-4 w-full overflow-hidden rounded-full bg-surface',
      className
    )}
    {...props}
  >
    <div
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </div>
))
Progress.displayName = 'Progress'

export { Progress }-e 

=== ./src/components/layout/main-layout.tsx ===
import { ReactNode } from 'react'
import Header from './header'
import Footer from './footer'

interface MainLayoutProps {
  children: ReactNode
}

export default function MainLayout({ children }: MainLayoutProps) {
  return (
    <div className="min-h-screen bg-white">
      <Header />
      <main className="container mx-auto px-4 py-8">
        {children}
      </main>
      <Footer />
    </div>
  )
}-e 

=== ./src/components/layout/footer.tsx ===
export default function Footer() {
  return (
    <footer className="border-t border-gray-200 bg-white/80 backdrop-blur-xl">
      <div className="container mx-auto px-4 sm:px-6 py-8">
        <div className="flex flex-col md:flex-row justify-between items-center gap-4">
          
          {/* Logo i copyright */}
          <div className="flex items-center gap-3">
            <div className="flex h-6 w-6 items-center justify-center rounded-lg bg-gradient-to-br from-blue-500 to-purple-600">
              <span className="text-xs font-bold text-white">S</span>
            </div>
            <span className="text-sm text-gray-600">
              © 2024 Spokój w głowie. Wszelkie prawa zastrzeżone.
            </span>
          </div>

          {/* Links */}
          <div className="flex items-center gap-6 text-sm">
            <a href="#" className="text-gray-600 hover:text-gray-900 transition-colors">
              Polityka prywatności
            </a>
            <a href="#" className="text-gray-600 hover:text-gray-900 transition-colors">
              Warunki użytkowania
            </a>
            <a href="#" className="text-gray-600 hover:text-gray-900 transition-colors">
              Wsparcie
            </a>
          </div>
        </div>
      </div>
    </footer>
  )
}-e 

=== ./src/components/layout/header.tsx ===
'use client'

import Link from 'next/link'
import { useAuth } from '@/components/providers/auth-provider'
import { useRouter, usePathname } from 'next/navigation'
import { Button } from '@/components/ui/button'
import { LogOut, User, Sparkles, Menu, X, Home, BarChart3, Heart, MapPin, Users, BookOpen, Shield, FileText } from 'lucide-react'
import { signOut } from 'firebase/auth'
import { auth } from '@/lib/firebase'
import { useState, useEffect, useRef } from 'react'
import { cn } from '@/lib/utils'

export default function Header({ onClick }: { onClick?: () => void }) {
  const { user, loading } = useAuth()
  const router = useRouter()
  const pathname = usePathname()
  const [isMobile, setIsMobile] = useState(false)
  const [isMenuOpen, setIsMenuOpen] = useState(false)
  const [isScrolled, setIsScrolled] = useState(false)
  const menuRef = useRef<HTMLDivElement>(null)

  // Sprawdz scroll i rozmiar ekranu
  useEffect(() => {
    const checkMobile = () => setIsMobile(window.innerWidth <= 768)
    const handleScroll = () => setIsScrolled(window.scrollY > 10)
    
    checkMobile()
    handleScroll()
    
    window.addEventListener('resize', checkMobile)
    window.addEventListener('scroll', handleScroll, { passive: true })
    
    return () => {
      window.removeEventListener('resize', checkMobile)
      window.removeEventListener('scroll', handleScroll)
    }
  }, [])

  // Zamknij menu po zmianie na desktop lub route
  useEffect(() => {
    setIsMenuOpen(false)
  }, [pathname, isMobile])

  // Zamknij menu po kliknięciu na zewnątrz
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
        setIsMenuOpen(false)
      }
    }

    document.addEventListener('mousedown', handleClickOutside)
    return () => document.removeEventListener('mousedown', handleClickOutside)
  }, [])

  const handleLogout = async () => {
    try {
      await signOut(auth)
      router.push('/')
    } catch (error) {
      console.error('Błąd wylogowania:', error)
      router.push('/')
    }
  }

  const toggleMenu = () => {
    setIsMenuOpen(!isMenuOpen)
  }

  const isActiveRoute = (route: string) => {
    return pathname === route
  }

  return (
    <>
      <header 
        className={cn(
          "border-b bg-white/95 backdrop-blur-xl sticky top-0 z-50 transition-all duration-500 ease-out",
          isScrolled 
            ? "border-gray-100/80 shadow-sm shadow-black/5" 
            : "border-transparent"
        )}
        onClick={onClick}
      >
        <div className="container mx-auto px-4 sm:px-6">
          <div className="flex items-center justify-between h-16">
            
            {/* Logo z micro-interactions */}
            <Link 
              href={user ? "/dashboard" : "/"} 
              className="flex items-center gap-3 group flex-shrink-0 relative"
            >
              {/* Animated logo container */}
              <div className="relative">
                <div className={cn(
                  "w-8 h-8 sm:w-10 sm:h-10 rounded-xl flex items-center justify-center shadow-sm transition-all duration-500 group-hover:shadow-md",
                  "bg-gradient-to-br from-gray-900 to-gray-800 group-hover:from-gray-800 group-hover:to-gray-700"
                )}>
                  {/* Animated logo icon */}
                  <div className="w-4 h-4 sm:w-6 sm:h-6 bg-gradient-to-br from-white to-white/80 rounded-lg transition-transform duration-300 group-hover:scale-110"/>
                  
                  {/* Subtle shine effect */}
                  <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-white/10 to-transparent"/>
                </div>
                
                {/* Hover pulse effect */}
                <div className="absolute inset-0 rounded-xl bg-gray-900/20 scale-0 group-hover:scale-100 transition-transform duration-500 opacity-0 group-hover:opacity-100"/>
              </div>
              
              {/* Text container */}
              <div className="flex flex-col">
                <span className="text-lg sm:text-xl font-semibold bg-gradient-to-br from-gray-900 to-gray-700 bg-clip-text text-transparent leading-tight">
                  Spokój w Głowie
                </span>
                <span className="text-xs text-gray-500 leading-tight hidden sm:block transition-opacity duration-300 group-hover:opacity-80">
                  Architektura Uważności
                </span>
              </div>
            </Link>

            {/* Desktop Navigation */}
            <nav className="hidden lg:flex items-center gap-2" ref={menuRef}>
              {loading ? (
                // Skeleton loading z lepszą animacją
                <div className="flex items-center gap-3">
                  {[...Array(6)].map((_, i) => (
                    <div 
                      key={i}
                      className="w-24 h-10 bg-gradient-to-r from-gray-100 to-gray-200 rounded-xl animate-pulse"
                      style={{ animationDelay: `${i * 0.1}s` }}
                    />
                  ))}
                </div>
              ) : user ? (
                <div className="flex items-center gap-2">
                  
                  {/* Dashboard */}
                  <Link 
                    href="/dashboard"
                    className={cn(
                      "flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 border",
                      "relative group overflow-hidden",
                      isActiveRoute('/dashboard')
                        ? "bg-blue-50 border-blue-200 text-blue-700 shadow-sm"
                        : "bg-white/80 border-gray-100 text-gray-700 hover:border-gray-200 hover:shadow-sm"
                    )}
                  >
                    <Home className={cn(
                      "h-4 w-4 transition-transform duration-300",
                      isActiveRoute('/dashboard') ? "scale-110" : "group-hover:scale-110"
                    )} />
                    <span className="text-sm font-medium">Dashboard</span>
                    
                    {/* Active indicator */}
                    {isActiveRoute('/dashboard') && (
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-blue-500 rounded-full" />
                    )}
                  </Link>

                  {/* Dziennik Nastroju */}
                  <Link 
                    href="/mood"
                    className={cn(
                      "flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 border",
                      "relative group overflow-hidden",
                      isActiveRoute('/mood')
                        ? "bg-purple-50 border-purple-200 text-purple-700 shadow-sm"
                        : "bg-white/80 border-gray-100 text-gray-700 hover:border-gray-200 hover:shadow-sm"
                    )}
                  >
                    <BarChart3 className={cn(
                      "h-4 w-4 transition-transform duration-300",
                      isActiveRoute('/mood') ? "scale-110" : "group-hover:scale-110"
                    )} />
                    <span className="text-sm font-medium">Nastrój</span>
                    
                    {/* Active indicator */}
                    {isActiveRoute('/mood') && (
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-purple-500 rounded-full" />
                    )}
                  </Link>

                  {/* Artykuły - DLA WSZYSTKICH UŻYTKOWNIKÓW */}
                  <Link 
                    href="/articles"
                    className={cn(
                      "flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 border",
                      "relative group overflow-hidden",
                      isActiveRoute('/articles')
                        ? "bg-amber-50 border-amber-200 text-amber-700 shadow-sm"
                        : "bg-white/80 border-gray-100 text-gray-700 hover:border-gray-200 hover:shadow-sm"
                    )}
                  >
                    <BookOpen className={cn(
                      "h-4 w-4 transition-transform duration-300",
                      isActiveRoute('/articles') ? "scale-110" : "group-hover:scale-110"
                    )} />
                    <span className="text-sm font-medium">Artykuły</span>
                    
                    {/* Active indicator */}
                    {isActiveRoute('/articles') && (
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-amber-500 rounded-full" />
                    )}
                  </Link>

                  {/* Artykuły Admina - TYLKO DLA ADMINÓW */}
                  {user?.role === 'admin' && (
                    <Link 
                      href="/admin/articles"
                      className={cn(
                        "flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 border",
                        "relative group overflow-hidden",
                        isActiveRoute('/admin/articles')
                          ? "bg-green-50 border-green-200 text-green-700 shadow-sm"
                          : "bg-white/80 border-gray-100 text-gray-700 hover:border-gray-200 hover:shadow-sm"
                      )}
                    >
                      <FileText className={cn(
                        "h-4 w-4 transition-transform duration-300",
                        isActiveRoute('/admin/articles') ? "scale-110" : "group-hover:scale-110"
                      )} />
                      <span className="text-sm font-medium">Artykuły Admina</span>
                      
                      {/* Active indicator */}
                      {isActiveRoute('/admin/articles') && (
                        <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-green-500 rounded-full" />
                      )}
                    </Link>
                  )}

                  {/* Mapa Wsparcia */}
                  <Link 
                    href="/map"
                    className={cn(
                      "flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 border",
                      "relative group overflow-hidden",
                      isActiveRoute('/map')
                        ? "bg-green-50 border-green-200 text-green-700 shadow-sm"
                        : "bg-white/80 border-gray-100 text-gray-700 hover:border-gray-200 hover:shadow-sm"
                    )}
                  >
                    <MapPin className={cn(
                      "h-4 w-4 transition-transform duration-300",
                      isActiveRoute('/map') ? "scale-110" : "group-hover:scale-110"
                    )} />
                    <span className="text-sm font-medium">Mapa Wsparcia</span>
                    
                    {/* Active indicator */}
                    {isActiveRoute('/map') && (
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-green-500 rounded-full" />
                    )}
                  </Link>

                  {/* Przyjaciele */}
                  <Link 
                    href="/dashboard/friends"
                    className={cn(
                      "flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 border",
                      "relative group overflow-hidden",
                      isActiveRoute('/dashboard/friends')
                        ? "bg-orange-50 border-orange-200 text-orange-700 shadow-sm"
                        : "bg-white/80 border-gray-100 text-gray-700 hover:border-gray-200 hover:shadow-sm"
                    )}
                  >
                    <Users className={cn(
                      "h-4 w-4 transition-transform duration-300",
                      isActiveRoute('/dashboard/friends') ? "scale-110" : "group-hover:scale-110"
                    )} />
                    <span className="text-sm font-medium">Przyjaciele</span>
                    
                    {/* Active indicator */}
                    {isActiveRoute('/dashboard/friends') && (
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-1 h-1 bg-orange-500 rounded-full" />
                    )}
                  </Link>

                  {/* Pomoc AI z glow effect */}
                  <div className="relative group">
                    <Link 
                      href="/ai"
                      className={cn(
                        "flex items-center gap-2 px-4 py-2.5 rounded-xl transition-all duration-300 border",
                        "relative overflow-hidden",
                        isActiveRoute('/ai')
                          ? "bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200 text-blue-700 shadow-sm"
                          : "bg-white/80 border-gray-100 text-gray-700 hover:border-blue-200 hover:shadow-sm"
                      )}
                    >
                      <Sparkles className={cn(
                        "h-4 w-4 transition-transform duration-300",
                        isActiveRoute('/ai') ? "scale-110" : "group-hover:scale-110"
                      )} />
                      <span className="text-sm font-medium">Pomoc AI</span>
                      
                      {/* Subtle gradient glow */}
                      <div className={cn(
                        "absolute inset-0 rounded-xl bg-gradient-to-r from-blue-500/5 to-purple-500/5 opacity-0 transition-opacity duration-300",
                        isActiveRoute('/ai') ? "opacity-100" : "group-hover:opacity-100"
                      )} />
                    </Link>
                    
                    {/* Animated tooltip */}
                    <div className="absolute -top-12 left-1/2 transform -translate-x-1/2 bg-gray-900 text-white text-xs rounded-lg px-3 py-2 opacity-0 group-hover:opacity-100 transition-all duration-300 pointer-events-none shadow-lg">
                      Twoje dzisiejsze wsparcie AI
                      <div className="absolute bottom-0 left-1/2 transform -translate-x-1/2 translate-y-1 w-2 h-2 bg-gray-900 rotate-45" />
                    </div>
                  </div>

                  {/* User Menu z avatar */}
                  <div className="flex items-center gap-2 pl-2 border-l border-gray-100 ml-2">
                    <Link href="/dashboard/profile">
                      <Button 
                        variant="outline" 
                        size="sm"
                        className={cn(
                          "rounded-xl border-gray-200 transition-all duration-300 relative overflow-hidden group",
                          "hover:border-gray-300 hover:shadow-sm"
                        )}
                      >
                        <User className="h-4 w-4 mr-2 transition-transform duration-300 group-hover:scale-110"/>
                        <span className="text-sm font-medium">Profil</span>
                      </Button>
                    </Link>
                    
                    <Button 
                      variant="outline" 
                      size="sm" 
                      onClick={handleLogout}
                      className={cn(
                        "rounded-xl transition-all duration-300 relative overflow-hidden group",
                        "border-gray-200 hover:border-red-300 hover:text-red-600 hover:shadow-sm"
                      )}
                    >
                      <LogOut className="h-4 w-4 mr-2 transition-transform duration-300 group-hover:scale-110"/>
                      <span className="text-sm font-medium">Wyloguj</span>
                    </Button>
                  </div>
                </div>
              ) : (
                <div className="flex items-center gap-3">
                  <Link href="/auth/login">
                    <Button 
                      variant="outline" 
                      size="sm"
                      className="rounded-xl border-gray-200 hover:border-gray-300 transition-all duration-300 hover:shadow-sm"
                    >
                      Zaloguj się
                    </Button>
                  </Link>
                  <Link href="/auth/register">
                    <Button 
                      size="sm"
                      className="rounded-xl bg-gradient-to-r from-gray-900 to-gray-800 text-white hover:from-gray-800 hover:to-gray-700 transition-all duration-300 shadow-sm hover:shadow-md"
                    >
                      Rozpocznij podróż
                    </Button>
                  </Link>
                </div>
              )}
            </nav>

            {/* Mobile Menu Button z lepszą animacją */}
            <div className="lg:hidden">
              <Button
                variant="ghost"
                size="sm"
                onClick={toggleMenu}
                className={cn(
                  "p-2 rounded-xl transition-all duration-300 relative",
                  "hover:bg-gray-100 border border-transparent hover:border-gray-200",
                  isMenuOpen && "bg-gray-100 border-gray-200"
                )}
              >
                {isMenuOpen ? (
                  <X className="h-5 w-5 transition-transform duration-300 rotate-90 scale-110" />
                ) : (
                  <Menu className="h-5 w-5 transition-transform duration-300" />
                )}
              </Button>
            </div>
          </div>
        </div>

        {/* Premium Mobile Menu */}
        {isMenuOpen && (
          <div 
            ref={menuRef}
            className="lg:hidden absolute top-full left-0 right-0 bg-white/95 backdrop-blur-xl border-b border-gray-100 shadow-xl shadow-black/10 animate-in slide-in-from-top duration-300"
          >
            <div className="container mx-auto px-4 py-4">
              {loading ? (
                <div className="space-y-3">
                  {[...Array(7)].map((_, i) => (
                    <div 
                      key={i}
                      className="h-12 bg-gradient-to-r from-gray-100 to-gray-200 rounded-xl animate-pulse"
                      style={{ animationDelay: `${i * 0.1}s` }}
                    />
                  ))}
                </div>
              ) : user ? (
                <div className="space-y-2">
                  {[
                    { href: '/dashboard', icon: Home, label: 'Dashboard', active: isActiveRoute('/dashboard') },
                    { href: '/mood', icon: BarChart3, label: 'Dziennik Nastroju', active: isActiveRoute('/mood') },
                    { href: '/articles', icon: BookOpen, label: 'Artykuły', active: isActiveRoute('/articles') },
                    ...(user?.role === 'admin' ? [{ href: '/admin/articles', icon: FileText, label: 'Artykuły Admina', active: isActiveRoute('/admin/articles') }] : []),
                    { href: '/map', icon: MapPin, label: 'Mapa Wsparcia', active: isActiveRoute('/map') },
                    { href: '/dashboard/friends', icon: Users, label: 'Przyjaciele', active: isActiveRoute('/dashboard/friends') },
                    { href: '/ai', icon: Sparkles, label: 'Pomoc AI', active: isActiveRoute('/ai') },
                    { href: '/dashboard/profile', icon: User, label: 'Profil', active: isActiveRoute('/dashboard/profile') },
                  ].map((item) => (
                    <Link 
                      key={item.href}
                      href={item.href}
                      className={cn(
                        "flex items-center gap-4 px-4 py-3 rounded-xl transition-all duration-300 w-full group",
                        "border-2 backdrop-blur-sm",
                        item.active
                          ? item.href === '/map' 
                            ? "bg-green-50 border-green-200 text-green-700 shadow-sm"
                            : item.href === '/dashboard'
                            ? "bg-blue-50 border-blue-200 text-blue-700 shadow-sm"
                            : item.href === '/mood'
                            ? "bg-purple-50 border-purple-200 text-purple-700 shadow-sm"
                            : item.href === '/articles'
                            ? "bg-amber-50 border-amber-200 text-amber-700 shadow-sm"
                            : item.href === '/admin/articles'
                            ? "bg-green-50 border-green-200 text-green-700 shadow-sm"
                            : item.href === '/dashboard/friends'
                            ? "bg-orange-50 border-orange-200 text-orange-700 shadow-sm"
                            : "bg-gradient-to-r from-blue-50 to-purple-50 border-blue-200 text-blue-700 shadow-sm"
                          : "bg-white/80 border-gray-100 text-gray-700 hover:border-gray-200 hover:shadow-sm"
                      )}
                      onClick={() => setIsMenuOpen(false)}
                    >
                      <item.icon className={cn(
                        "h-5 w-5 transition-transform duration-300",
                        item.active ? "scale-110" : "group-hover:scale-110"
                      )} />
                      <span className="text-base font-medium flex-1">{item.label}</span>
                      
                      {/* Active dot */}
                      {item.active && (
                        <div className={cn(
                          "w-2 h-2 rounded-full",
                          item.href === '/map' ? "bg-green-500" :
                          item.href === '/dashboard' ? "bg-blue-500" :
                          item.href === '/mood' ? "bg-purple-500" :
                          item.href === '/articles' ? "bg-amber-500" :
                          item.href === '/admin/articles' ? "bg-green-500" :
                          item.href === '/dashboard/friends' ? "bg-orange-500" :
                          "bg-blue-500"
                        )} />
                      )}
                    </Link>
                  ))}
                  
                  {/* Logout button */}
                  <Button 
                    variant="outline" 
                    className="w-full justify-start gap-4 px-4 py-3 rounded-xl border-2 border-gray-200 text-gray-700 hover:border-red-300 hover:text-red-600 transition-all duration-300 mt-4"
                    onClick={() => {
                      setIsMenuOpen(false)
                      setTimeout(handleLogout, 200)
                    }}
                  >
                    <LogOut className="h-5 w-5"/>
                    <span className="text-base font-medium">Wyloguj</span>
                  </Button>
                </div>
              ) : (
                <div className="space-y-3">
                  <Link 
                    href="/auth/login"
                    className={cn(
                      "flex items-center justify-center px-4 py-3 rounded-xl transition-all duration-300 w-full",
                      "border-2 border-gray-200 text-gray-700 hover:border-gray-300 hover:shadow-sm font-medium"
                    )}
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Zaloguj się
                  </Link>
                  <Link 
                    href="/auth/register"
                    className={cn(
                      "flex items-center justify-center px-4 py-3 rounded-xl transition-all duration-300 w-full",
                      "bg-gradient-to-r from-gray-900 to-gray-800 text-white hover:from-gray-800 hover:to-gray-700 shadow-sm hover:shadow-md font-medium"
                    )}
                    onClick={() => setIsMenuOpen(false)}
                  >
                    Rozpocznij podróż
                  </Link>
                </div>
              )}
            </div>
          </div>
        )}
      </header>

      {/* Premium Overlay dla mobile menu */}
      {isMenuOpen && (
        <div 
          className="fixed inset-0 bg-black/30 backdrop-blur-sm z-40 lg:hidden animate-in fade-in duration-300"
          onClick={() => setIsMenuOpen(false)}
        />
      )}
    </>
  )
}-e 

=== ./src/components/layout/dialog.tsx ===
'use client'

import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'
import { cn } from '@/lib/utils'

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      'fixed inset-0 z-50 bg-black/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        'fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border border-gray-200 bg-white p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-2xl',
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-1.5 text-center sm:text-left',
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = 'DialogHeader'

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      'text-lg font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn('text-sm text-gray-600', className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}-e 

=== ./src/components/layout/button.tsx ===
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-lg text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        primary: 'bg-primary text-white hover:bg-primary/90',
        secondary: 'bg-surface text-text-primary hover:bg-surface/80',
        outline: 'border border-border-light bg-background hover:bg-surface',
        ghost: 'hover:bg-surface hover:text-text-primary',
        success: 'bg-accent-green text-white hover:bg-accent-green/90',
        warning: 'bg-accent-orange text-white hover:bg-accent-orange/90',
        error: 'bg-accent-red text-white hover:bg-accent-red/90',
        glass: 'glass-card text-text-primary hover:bg-white/90',
      },
      size: {
        sm: 'h-9 px-3',
        md: 'h-10 px-4 py-2',
        lg: 'h-11 px-8',
        xl: 'h-12 px-10 text-base',
        icon: 'h-10 w-10',
      },
    },
    defaultVariants: {
      variant: 'primary',
      size: 'md',
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }-e 

=== ./src/components/layout/input.tsx ===
import * as React from 'react'
import { cn } from '@/lib/utils'

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-lg border border-border-light bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-text-tertiary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = 'Input'

export { Input }-e 

=== ./src/components/layout/skeleton.tsx ===
import { cn } from '@/lib/utils'

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn('animate-pulse rounded-md bg-surface', className)}
      {...props}
    />
  )
}

export { Skeleton }-e 

=== ./src/components/providers/auth-provider.tsx ===
// src/components/providers/auth-provider.tsx
'use client'

import React, { createContext, useContext, useEffect, useState } from 'react'
import { User } from 'firebase/auth'
import { onAuthStateChanged } from 'firebase/auth'
import { doc, getDoc } from 'firebase/firestore'
import { auth, db } from '@/lib/firebase'

interface AuthUser extends User {
  role?: 'user' | 'admin'
  isAdmin?: boolean
}

interface AuthContextType {
  user: AuthUser | null
  loading: boolean
}

const AuthContext = createContext<AuthContextType>({ user: null, loading: true })

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [user, setUser] = useState<AuthUser | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {
      if (firebaseUser) {
        // Pobierz dodatkowe dane użytkownika z Firestore
        try {
          const userDoc = await getDoc(doc(db, 'users', firebaseUser.uid))
          const userData = userDoc.data()
          
          const authUser: AuthUser = {
            ...firebaseUser,
            role: userData?.role || 'user',
            isAdmin: userData?.role === 'admin'
          }
          
          setUser(authUser)
        } catch (error) {
          console.error('Error fetching user data:', error)
          // Jeśli nie ma danych w Firestore, ustaw domyślne wartości
          const authUser: AuthUser = {
            ...firebaseUser,
            role: 'user',
            isAdmin: false
          }
          setUser(authUser)
        }
      } else {
        setUser(null)
      }
      setLoading(false)
    })

    return () => unsubscribe()
  }, [])

  return (
    <AuthContext.Provider value={{ user, loading }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  return useContext(AuthContext)
}-e 

=== ./src/components/ai-mood-insights.tsx ===
'use client'

import { useState, useEffect, useRef, useCallback, useMemo } from 'react'
import { motion } from 'framer-motion'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Brain, Target, Zap, X, Sparkles, Clock, RefreshCw, GraduationCap, Activity, Lightbulb } from 'lucide-react'
import { cn } from '@/lib/utils'

// Cache dla komponentu
const componentCache = new Map()

// Funkcje pomocnicze
const getMoodDescription = (mood: number): string => {
  if (mood <= 20) return 'bardzo niski'
  if (mood <= 40) return 'niski'
  if (mood <= 60) return 'neutralny'
  if (mood <= 80) return 'wysoki'
  return 'bardzo wysoki'
}

const getProfileType = (mood: number, consistency: number, trend: number, streak: number): string => {
  if (consistency > 70 && trend > 0) return 'STABILNY WZROST'
  if (consistency > 70 && trend < 0) return 'STABILNA REFLEKSJA' 
  if (consistency < 50 && trend > 0) return 'DYNAMICZNY WZROST'
  if (consistency < 50 && trend < 0) return 'WRAŻLIWOŚĆ'
  if (streak > 7) return 'ZAAWANSOWANY'
  return 'ŚWIADOMY'
}

// Główna funkcja fetch AI
const fetchAIAnalysis = async (userData: any) => {
  const cacheKey = JSON.stringify({
    mood: userData.currentMood,
    streak: userData.streak,
    trend: userData.trend,
    consistency: userData.consistency,
    level: userData.level,
    entriesCount: userData.moodEntries?.length || 0,
    notesCount: userData.userNotes?.length || 0
  })

  // Sprawdź cache
  if (componentCache.has(cacheKey)) {
    const cached = componentCache.get(cacheKey)
    if (Date.now() - cached.timestamp < 5 * 60 * 1000) {
      console.log('💾 Using component cache')
      return cached.data
    }
  }

  try {
    const moodEntries = userData.moodEntries || []
    const userNotes = userData.userNotes || []
    
    // Przygotuj dane dla AI
    const moodDescription = getMoodDescription(userData.currentMood || 50)
    const recentMoods = moodEntries.slice(-5).map((e: any) => e.mood || 50)
    const averageRecentMood = recentMoods.length > 0 
      ? Math.round(recentMoods.reduce((a: number, b: number) => a + b, 0) / recentMoods.length)
      : 50

    // Prompt dla AI
    const analysisPrompt = `Jesteś asystentem wellbeing w aplikacji "Spokój w Głowie" dla młodzieży.

DANE UŻYTKOWNIKA:
- Aktualny nastrój: ${userData.currentMood || 50}/100 (${moodDescription})
- Streak: ${userData.streak || 0} dni
- Poziom: ${userData.level || 1}
- Trend nastroju: ${userData.trend || 0}%
- Stabilność: ${userData.consistency || 50}%
- Średni nastrój: ${userData.averageMood || 50}%
- Liczba wpisów: ${moodEntries.length}
- Ostatnie nastroje: ${recentMoods.join(', ')}
- Średni z ostatnich 5 dni: ${averageRecentMood}%

PROSZĘ O ANALIZĘ W TYM FORMACIE:
{
"deepAnalysis": "2-3 zdania analizy obecnego nastroju i trendów",
"personalizedChallenge": "krótkie wyzwanie na dziś (max 8 słów)",
"scienceBackedTool": "konkretna technika wellbeing (max 6 słów)", 
"supportEcosystem": "strategia wsparcia (max 8 słów)",
"breakthroughInsight": "motywujący wgląd o nastoju",
"immediateBreakthrough": "natychmiastowa akcja (max 5 słów)"
}

Bądź:
- Konkretny i praktyczny
- Wspierający ale nie infantylny
- Dopasowany do nastroju i streak
- W języku polskim
- Max 200 znaków w każdym polu`

    console.log('🔍 Fetching AI analysis from chat endpoint...')

    const controller = new AbortController()
    const timeoutId = setTimeout(() => controller.abort(), 15000)

    const response = await fetch('/api/ai-recommendations', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      signal: controller.signal,
      body: JSON.stringify({ 
        message: analysisPrompt 
      })
    })
    
    clearTimeout(timeoutId)

    if (!response.ok) {
      throw new Error(`AI API failed: ${response.status}`)
    }

    const data = await response.json()
    console.log('📄 AI Response received:', data)

    // Parsujemy odpowiedź tekstową
    const aiResponse = parseAIResponse(data.response, userData)
    const result = transformAIResponse(aiResponse, userData)
    
    // Zapisz w cache
    componentCache.set(cacheKey, {
      data: result,
      timestamp: Date.now()
    })
    
    return result
    
  } catch (error) {
    if (error.name === 'AbortError') {
      console.log('⏰ Request timeout')
    } else {
      console.error('AI fetch failed:', error)
    }
    return generateLocalAIAnalysis(userData)
  }
}

// Funkcja do parsowania odpowiedzi AI
const parseAIResponse = (responseText: string, userData: any) => {
  console.log('📝 Raw AI response:', responseText)
  
  try {
    // Spróbuj bezpośrednio sparsować całą odpowiedź jako JSON
    const directParse = JSON.parse(responseText)
    if (directParse && typeof directParse === 'object') {
      console.log('✅ Direct JSON parse successful')
      return directParse
    }
  } catch (directError) {
    console.log('⚠️ Direct parse failed, trying extracted JSON...')
  }

  try {
    // Spróbuj znaleźć JSON w odpowiedzi (usuń ```json i ```)
    const cleanText = responseText
      .replace(/```json\s*/g, '')
      .replace(/```\s*/g, '')
      .trim()

    // Spróbuj sparsować oczyszczony tekst
    const jsonMatch = cleanText.match(/\{[\s\S]*\}/)
    if (jsonMatch) {
      const jsonString = jsonMatch[0]
      console.log('✅ Extracted JSON:', jsonString)
      return JSON.parse(jsonString)
    }
    
    throw new Error('No JSON found in response')
  } catch (error) {
    console.log('❌ JSON parse failed, using text analysis')
    return createAnalysisFromText(responseText, userData)
  }
}

// Tworzy strukturę analizy z tekstowej odpowiedzi AI
const createAnalysisFromText = (text: string, userData: any) => {
  console.log('🔄 Creating analysis from text fallback')
  
  const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 10)
  
  return {
    deepAnalysis: sentences[0]?.trim() + '.' || "Analiza Twojego nastroju wskazuje na potrzebę większej samoobserwacji.",
    personalizedChallenge: "Zrób 3 głębokie oddechy i zapisz jedną myśl",
    scienceBackedTool: "Technika oddechu 4-7-8",
    supportEcosystem: "Poranna rutyna z 3 oddechami", 
    breakthroughInsight: sentences[1]?.trim() + '.' || "Regularna obserwacja nastroju prowadzi do większej samoświadomości.",
    immediateBreakthrough: "Zrób pauzę na oddech",
    isRealAI: false
  }
}

// Transformacja odpowiedzi AI
const transformAIResponse = (aiData: any, userData: any) => {
  const safeUserData = {
    currentMood: userData.currentMood || 50,
    consistency: userData.consistency || 50,
    trend: userData.trend || 0,
    streak: userData.streak || 0
  }
  
  return {
    deepAnalysis: aiData.deepAnalysis || "AI analizuje Twój nastrój w kontekście codziennych doświadczeń...",
    sections: [
      {
        icon: <Target className="h-5 w-5" />,
        title: "🎯 Analiza Profilu",
        subtitle: "Twój unikalny profil emocjonalny", 
        content: aiData.deepAnalysis || "Przeanalizuj swój nastrój w kontekście codziennych doświadczeń.",
        color: "purple",
        duration: "Refleksja",
        priority: "high",
        type: "analysis"
      },
      {
        icon: <Zap className="h-5 w-5" />,
        title: "🚀 Wyzwanie",
        subtitle: "Dopasowane do Ciebie",
        content: aiData.personalizedChallenge || "Stwórz codzienny rytuał samoobserwacji przez 5 dni.",
        color: "blue", 
        duration: "5 dni",
        priority: "high",
        type: "challenge"
      },
      {
        icon: <GraduationCap className="h-5 w-5" />,
        title: "🧠 Technika",
        subtitle: "Naukowa metoda",
        content: aiData.scienceBackedTool || "Technika oddechu 4-7-8: 4s wdech, 7s pauza, 8s wydech.",
        color: "green",
        duration: "5-10 min", 
        priority: "high",
        type: "tool"
      },
      {
        icon: <Activity className="h-5 w-5" />,
        title: "💫 Strategia",
        subtitle: "Twój ekosystem wsparcia",
        content: aiData.supportEcosystem || "Poranny rytuał: 3 głębokie oddechy + intencja na dzień.",
        color: "orange",
        duration: "Codziennie",
        priority: "medium",
        type: "strategy"
      },
      {
        icon: <Lightbulb className="h-5 w-5" />,
        title: "🔍 Wgląd", 
        subtitle: "Odkrycie o sobie",
        content: aiData.breakthroughInsight || "Regularność w obserwacji nastroju sama w sobie jest terapią.",
        color: "pink",
        duration: "Przemyślenia",
        priority: "medium",
        type: "insight"
      },
      {
        icon: <Sparkles className="h-5 w-5" />,
        title: "⚡ Akcja",
        subtitle: "Zacznij teraz",
        content: aiData.immediateBreakthrough || "Zrób 2-minutową pauzę na świadomy oddech.",
        color: "red",
        duration: "15 min",
        priority: "high", 
        type: "action"
      }
    ],
    isRealAI: aiData.isRealAI !== false,
    timestamp: new Date().toISOString(),
    profileType: getProfileType(
      safeUserData.currentMood, 
      safeUserData.consistency, 
      safeUserData.trend, 
      safeUserData.streak
    )
  }
}

// Lokalna generacja tylko jako fallback
const generateLocalAIAnalysis = (userData: any) => {
  const currentMood = userData.currentMood || 50
  const streak = userData.streak || 0
  const trend = userData.trend || 0
  const consistency = userData.consistency || 50
  
  return {
    deepAnalysis: `AI analizuje Twój nastrój ${currentMood}% w kontekście ${streak}-dniowej praktyki. Trend ${trend}% i stabilność ${consistency}% tworzą unikalny wzorzec emocjonalny.`,
    personalizedChallenge: `Przez 3-5 dni praktykuj uważną obserwację swoich reakcji emocjonalnych w kluczowych momentach dnia.`,
    scienceBackedTool: "Technika oddechu 4-7-8: 4s wdech, 7s pauza, 8s wydech. Reguluje system nerwowy.",
    supportEcosystem: "Stwórz codzienny rytuał samoobserwacji wykorzystujący Twoje obecne nawyki.",
    breakthroughInsight: "Twoja regularność w zapisywaniu nastroju sama w sobie jest potężnym narzędziem samopoznania.",
    immediateBreakthrough: "Zrób 2-minutową pauzę na świadomy oddech i zauważ jak wpływa na Twój nastrój.",
    isRealAI: false,
    timestamp: new Date().toISOString(),
    sections: [
      {
        icon: <Target className="h-5 w-5" />,
        title: "🎯 Analiza Profilu",
        subtitle: "Twój unikalny profil emocjonalny", 
        content: `AI analizuje Twój nastrój ${currentMood}% w kontekście ${streak}-dniowej praktyki.`,
        color: "purple",
        duration: "Refleksja",
        priority: "high",
        type: "analysis"
      },
      {
        icon: <Zap className="h-5 w-5" />,
        title: "🚀 Wyzwanie",
        subtitle: "Dopasowane do Ciebie",
        content: "Przez 3-5 dni praktykuj uważną obserwację swoich reakcji emocjonalnych.",
        color: "blue", 
        duration: "5 dni",
        priority: "high",
        type: "challenge"
      },
      {
        icon: <GraduationCap className="h-5 w-5" />,
        title: "🧠 Technika",
        subtitle: "Naukowa metoda",
        content: "Technika oddechu 4-7-8: 4s wdech, 7s pauza, 8s wydech.",
        color: "green",
        duration: "5-10 min", 
        priority: "high",
        type: "tool"
      },
      {
        icon: <Activity className="h-5 w-5" />,
        title: "💫 Strategia",
        subtitle: "Twój ekosystem wsparcia",
        content: "Stwórz codzienny rytuał samoobserwacji wykorzystujący Twoje obecne nawyki.",
        color: "orange",
        duration: "Codziennie",
        priority: "medium",
        type: "strategy"
      },
      {
        icon: <Lightbulb className="h-5 w-5" />,
        title: "🔍 Wgląd", 
        subtitle: "Odkrycie o sobie",
        content: "Twoja regularność w zapisywaniu nastroju sama w sobie jest potężnym narzędziem samopoznania.",
        color: "pink",
        duration: "Przemyślenia",
        priority: "medium",
        type: "insight"
      },
      {
        icon: <Sparkles className="h-5 w-5" />,
        title: "⚡ Akcja",
        subtitle: "Zacznij teraz",
        content: "Zrób 2-minutową pauzę na świadomy oddech i zauważ jak wpływa na Twój nastrój.",
        color: "red",
        duration: "15 min",
        priority: "high", 
        type: "action"
      }
    ],
    profileType: getProfileType(currentMood, consistency, trend, streak)
  }
}

interface AIMoodInsightsProps {
  currentMood?: number
  moodEntries?: any[]
  streak?: number
  trend?: number
  consistency?: number
  averageMood?: number
  level?: number
  onBack: () => void
  userNotes?: any[]
}

export const AIMoodInsights = ({
  currentMood = 50,
  moodEntries = [],
  streak = 0,
  trend = 0,
  consistency = 50,
  averageMood = 50,
  level = 1,
  onBack,
  userNotes = []
}: AIMoodInsightsProps) => {
  const [aiData, setAiData] = useState<any>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [usedToday, setUsedToday] = useState(false)
  const [lastUsedDate, setLastUsedDate] = useState<string | null>(null)
  const modalRef = useRef<HTMLDivElement>(null)
  const isMounted = useRef(true)
  const requestInProgress = useRef(false)

  // Sprawdzanie czy już użyto dzisiaj
  useEffect(() => {
    const today = new Date().toDateString()
    const lastUsed = localStorage.getItem('ai-insights-last-used')
    
    if (lastUsed === today) {
      setUsedToday(true)
    }
    setLastUsedDate(lastUsed)
  }, [])

  // Zapisywanie użycia
  const markAsUsedToday = () => {
    const today = new Date().toDateString()
    localStorage.setItem('ai-insights-last-used', today)
    setUsedToday(true)
    setLastUsedDate(today)
  }

  // Sprawdzamy, czy jesteśmy w przeglądarce (client-side)
  const [isClient, setIsClient] = useState(false)
  useEffect(() => {
    setIsClient(true)
  }, [])

  // Stabilizuj dane użytkownika
  const userData = useMemo(() => ({
    currentMood,
    moodEntries,
    streak,
    trend,
    consistency,
    averageMood,
    level,
    userNotes
  }), [currentMood, streak, trend, consistency, level, 
      moodEntries.length,
      userNotes.length
  ])

  const loadAIAnalysis = useCallback(async () => {
    if (usedToday) {
      setError('Dzisiejsza analiza AI została już wykorzystana. Wróć jutro!')
      setIsLoading(false)
      return
    }

    if (requestInProgress.current) {
      console.log('🛑 Request already in progress, skipping...')
      return
    }

    requestInProgress.current = true
    
    try {
      setIsLoading(true)
      setError(null)
      
      console.log('🚀 Starting AI analysis...')
      const analysis = await fetchAIAnalysis(userData)
      
      if (isMounted.current) {
        setAiData(analysis)
        markAsUsedToday() // ✅ Oznacz jako użyte
        console.log('✅ AI analysis completed')
      }
    } catch (err) {
      console.error('❌ AI analysis failed:', err)
      if (isMounted.current) {
        setError('Nie udało się załadować analizy AI')
      }
    } finally {
      if (isMounted.current) {
        setIsLoading(false)
      }
      requestInProgress.current = false
    }
  }, [userData, usedToday])

  useEffect(() => {
    isMounted.current = true
    
    // Uruchom tylko raz przy montowaniu
    if (!usedToday) {
      loadAIAnalysis()
    } else {
      setIsLoading(false)
    }

    return () => {
      isMounted.current = false
    }
  }, [loadAIAnalysis, usedToday])

  const getColorClasses = (color: string, type = 'card') => {
    const colorMap: any = {
      purple: {
        card: 'bg-purple-50/80 border-purple-200',
        icon: 'bg-purple-100 text-purple-600',
        text: 'text-purple-900',
        badge: 'bg-purple-100 text-purple-700'
      },
      blue: {
        card: 'bg-blue-50/80 border-blue-200', 
        icon: 'bg-blue-100 text-blue-600',
        text: 'text-blue-900',
        badge: 'bg-blue-100 text-blue-700'
      },
      green: {
        card: 'bg-green-50/80 border-green-200',
        icon: 'bg-green-100 text-green-600',
        text: 'text-green-900',
        badge: 'bg-green-100 text-green-700'
      },
      orange: {
        card: 'bg-orange-50/80 border-orange-200',
        icon: 'bg-orange-100 text-orange-600',
        text: 'text-orange-900',
        badge: 'bg-orange-100 text-orange-700'
      },
      pink: {
        card: 'bg-pink-50/80 border-pink-200',
        icon: 'bg-pink-100 text-pink-600',
        text: 'text-pink-900',
        badge: 'bg-pink-100 text-pink-700'
      },
      red: {
        card: 'bg-red-50/80 border-red-200',
        icon: 'bg-red-100 text-red-600',
        text: 'text-red-900',
        badge: 'bg-red-100 text-red-700'
      }
    }
    return colorMap[color]?.[type] || colorMap.blue[type]
  }

  const handleRefresh = async () => {
    if (usedToday) {
      setError('Dzisiejsza analiza AI została już wykorzystana. Wróć jutro!')
      return
    }

    if (requestInProgress.current) {
      console.log('🛑 Request in progress, please wait...')
      return
    }

    // Wyczyść cache dla obecnych parametrów
    const cacheKey = JSON.stringify({
      mood: currentMood,
      streak: streak,
      trend: trend,
      consistency: consistency,
      level: level,
      entriesCount: moodEntries.length,
      notesCount: userNotes.length
    })
    componentCache.delete(cacheKey)

    setIsLoading(true)
    setError(null)
    
    await loadAIAnalysis()
  }

  const handleResetLimit = () => {
    localStorage.removeItem('ai-insights-last-used')
    setUsedToday(false)
    setLastUsedDate(null)
    setError(null)
  }

  if (!isClient) {
    return <div>Ładowanie...</div>
  }

  // Ekran gdy wykorzystano dzisiejszy limit
  if (usedToday && !aiData) {
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/40 backdrop-blur-sm">
        <motion.div
          initial={{ opacity: 0, scale: 0.95 }}
          animate={{ opacity: 1, scale: 1 }}
          className="bg-white rounded-2xl shadow-xl border border-gray-200 w-full max-w-md p-6 text-center"
        >
          <div className="w-16 h-16 bg-yellow-100 rounded-full flex items-center justify-center mx-auto mb-4">
            <Clock className="h-8 w-8 text-yellow-600" />
          </div>
          
          <h3 className="text-lg font-semibold text-gray-900 mb-2">
            Dzienna analiza wykorzystana
          </h3>
          
          <p className="text-gray-600 mb-4">
            Twoja dzienna analiza AI została już wykorzystana. Możesz skorzystać z nowej analizy jutro.
          </p>

          {lastUsedDate && (
            <div className="bg-gray-50 rounded-lg p-3 mb-4">
              <p className="text-sm text-gray-600">
                Ostatnia analiza: <strong>{new Date(lastUsedDate).toLocaleDateString('pl-PL')}</strong>
              </p>
            </div>
          )}

          <div className="flex gap-3">
            <Button
              onClick={onBack}
              variant="outline"
              className="flex-1 border-gray-300"
            >
              Wróć
            </Button>
            <Button
              onClick={handleResetLimit}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
            >
              Resetuj Limit
            </Button>
          </div>
        </motion.div>
      </div>
    )
  }

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center p-4 bg-black/40 backdrop-blur-sm">
      <motion.div
        ref={modalRef}
        initial={{ opacity: 0, scale: 0.95 }}
        animate={{ opacity: 1, scale: 1 }}
        className="bg-white rounded-2xl shadow-xl border border-gray-200 w-full max-w-6xl max-h-[95vh] overflow-hidden flex flex-col"
      >
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-100 bg-gradient-to-r from-blue-50/50 to-purple-50/50">
          <div className="flex items-center gap-3">
            <div className="p-2 bg-white rounded-xl shadow-sm border border-gray-100">
              <Brain className="h-6 w-6 text-purple-500" />
            </div>
            <div>
              <h2 className="font-bold text-gray-900">Spokój AI</h2>
              <p className="text-xs text-gray-600">Personalizowana analiza Twojego nastroju</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            {usedToday ? (
              <div className="flex items-center gap-1 px-2 py-1 bg-yellow-100 text-yellow-700 rounded-full text-xs">
                <Clock className="h-3 w-3" />
                Wykorzystano dziś
              </div>
            ) : (
              <div className="flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs">
                <Sparkles className="h-3 w-3" />
                Dostępna
              </div>
            )}
            {aiData?.isRealAI && (
              <div className="flex items-center gap-1 px-2 py-1 bg-green-100 text-green-700 rounded-full text-xs">
                <Sparkles className="h-3 w-3" />
                AI Premium
              </div>
            )}
            <Button
              onClick={onBack}
              variant="ghost"
              size="sm"
              className="h-8 w-8 p-0 hover:bg-gray-100"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>

        {/* Content */}
        <div className="flex-1 overflow-y-auto">
          {isLoading ? (
            <div className="flex flex-col items-center justify-center py-16 space-y-4">
              <motion.div
                animate={{ rotate: 360 }}
                transition={{ duration: 2, repeat: Infinity, ease: "linear" }}
                className="w-12 h-12 border-3 border-blue-200 border-t-blue-600 rounded-full"
              />
              <div className="text-center">
                <p className="font-semibold text-gray-900">AI analizuje Twój nastrój...</p>
                <p className="text-sm text-gray-600 mt-1">To potrwa tylko chwilę</p>
              </div>
            </div>
          ) : error ? (
            <div className="flex flex-col items-center justify-center py-16 space-y-4">
              <div className="text-red-500 text-lg">❌</div>
              <p className="text-gray-900">{error}</p>
              <Button onClick={handleRefresh} variant="outline" disabled={usedToday}>
                Spróbuj ponownie
              </Button>
            </div>
          ) : aiData ? (
            <div className="p-6 space-y-6">
              {/* Stats Grid */}
              <div className="grid grid-cols-4 gap-3">
                <CompactStatCard icon="😊" value={currentMood} label="Nastrój" />
                <CompactStatCard icon="🔥" value={streak} label="Streak" />
                <CompactStatCard icon="📈" value={`${trend > 0 ? '+' : ''}${trend}%`} label="Trend" />
                <CompactStatCard icon="💪" value={`${consistency}%`} label="Stabilność" />
              </div>

              {/* Profile Badge */}
              {aiData.profileType && (
                <div className="flex justify-center">
                  <div className="bg-gradient-to-r from-purple-500 to-blue-500 text-white px-4 py-2 rounded-full text-sm font-medium shadow-sm">
                    👤 Profil: {aiData.profileType}
                  </div>
                </div>
              )}

              {/* Główna analiza */}
              <Card className="border-0 bg-gradient-to-r from-blue-50 to-purple-50 shadow-sm">
                <CardContent className="p-4">
                  <div className="flex items-start gap-3">
                    <div className="p-2 bg-white rounded-lg shadow-xs border border-blue-200">
                      <Target className="h-4 w-4 text-blue-600" />
                    </div>
                    <div className="flex-1">
                      <h3 className="font-semibold text-gray-900 text-sm mb-2">Analiza AI</h3>
                      <p className="text-gray-700 text-sm leading-relaxed">{aiData.deepAnalysis}</p>
                      <div className="flex items-center gap-3 mt-3 text-xs text-gray-500">
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          {new Date(aiData.timestamp).toLocaleTimeString('pl-PL')}
                        </div>
                        {aiData.isRealAI && (
                          <div className="flex items-center gap-1">
                            <Sparkles className="h-3 w-3" />
                            AI Premium
                          </div>
                        )}
                      </div>
                    </div>
                  </div>
                </CardContent>
              </Card>

              {/* Sekcje AI */}
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {aiData.sections?.map((section: any, index: number) => (
                  <motion.div
                    key={index}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <Card className={cn(
                      "border-0 shadow-xs hover:shadow-sm transition-all duration-200 h-full",
                      getColorClasses(section.color, 'card')
                    )}>
                      <CardContent className="p-4">
                        <div className="flex items-start justify-between mb-3">
                          <div className="flex items-center gap-2">
                            <div className={cn(
                              "p-1.5 rounded-lg",
                              getColorClasses(section.color, 'icon')
                            )}>
                              {section.icon}
                            </div>
                            <div>
                              <h4 className={cn(
                                "font-semibold text-sm",
                                getColorClasses(section.color, 'text')
                              )}>
                                {section.title}
                              </h4>
                              <p className="text-xs text-gray-600">{section.subtitle}</p>
                            </div>
                          </div>
                          <span className={cn(
                            "text-xs px-2 py-1 rounded-full whitespace-nowrap",
                            getColorClasses(section.color, 'badge')
                          )}>
                            {section.duration}
                          </span>
                        </div>

                        <p className={cn(
                          "text-sm leading-relaxed",
                          getColorClasses(section.color, 'text')
                        )}>
                          {section.content}
                        </p>

                        {section.priority === 'high' && (
                          <div className="flex items-center gap-1 mt-3">
                            <div className="w-2 h-2 bg-red-500 rounded-full animate-pulse" />
                            <span className="text-xs text-red-600 font-medium">Wysoki priorytet</span>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </div>
            </div>
          ) : null}
        </div>

        {/* Footer */}
        <div className="p-4 border-t border-gray-100 bg-gray-50/50">
          <div className="flex gap-3">
            <Button
              onClick={onBack}
              variant="outline"
              className="flex-1 border-gray-300"
            >
              Wróć
            </Button>
            <Button
              onClick={handleRefresh}
              disabled={isLoading || usedToday}
              className="flex-1 bg-blue-600 hover:bg-blue-700"
            >
              <RefreshCw className="h-4 w-4 mr-2" />
              {isLoading ? 'Ładowanie...' : usedToday ? 'Wykorzystano dziś' : 'Nowa Analiza'}
            </Button>
          </div>
        </div>
      </motion.div>
    </div>
  )
}

const CompactStatCard = ({ icon, value, label }: { icon: string, value: string | number, label: string }) => {
  return (
    <div className="text-center p-3 bg-white rounded-lg border border-gray-200 shadow-xs">
      <div className="text-lg mb-1">{icon}</div>
      <div className="font-bold text-gray-900 text-sm">{value}</div>
      <div className="text-xs text-gray-600">{label}</div>
    </div>
  )
}-e 

=== ./src/components/articles/ArticleCard.jsx ===
import React from 'react';
import { useUser } from '../../hooks/useUser';
import './ArticleCard.css';

export const ArticleCard = ({ article, onRead }) => {
  const { user, canReadArticle, readArticle } = useUser();

  const handleRead = () => {
    if (readArticle(article.id)) {
      onRead?.(article.id);
    }
  };

  return (
    <div className="article-card">
      <div className="article-header">
        <h3 className="article-title">{article.title}</h3>
        <span className="article-date">
          {new Date(article.createdAt).toLocaleDateString()}
        </span>
      </div>
      
      <p className="article-excerpt">{article.excerpt}</p>
      
      <div className="article-footer">
        <span className="article-views">👁️ {article.views} wyświetleń</span>
        
        {user && (
          <button 
            className={`read-button ${!canReadArticle(article.id) ? 'read' : ''}`}
            onClick={handleRead}
            disabled={!canReadArticle(article.id)}
          >
            {canReadArticle(article.id) ? '📖 Przeczytaj (+10 pkt)' : '✅ Przeczytane'}
          </button>
        )}
      </div>
    </div>
  );
};-e 

=== ./src/components/articles/article-list.tsx ===
// src/components/articles/article-list.tsx
import { Article } from '@/hooks/useArticles'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { BookOpen, Clock, Eye } from 'lucide-react'
import Link from 'next/link'
import { Button } from '@/components/ui/button'

interface ArticleListProps {
  articles: Article[]
  loading: boolean
  user: { id: string; role: 'user' | 'admin' } | null
  onArticleRead: (id: string) => void
}

export function ArticleList({ articles, loading, user, onArticleRead }: ArticleListProps) {
  if (loading) {
    return <div className="text-center py-10">Ładowanie artykułów...</div>
  }

  if (articles.length === 0) {
    return (
      <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
        <CardContent className="p-8 text-center">
          <BookOpen className="h-16 w-16 text-gray-300 mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-900 mb-2">Brak artykułów</h3>
          <p className="text-gray-600">
            {user?.role === 'admin'
              ? 'Dodaj pierwszy artykuł w panelu administratora.'
              : 'Wkrótce pojawią się nowe treści!'}
          </p>
        </CardContent>
      </Card>
    )
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {articles.map((article) => (
        <Card key={article.id} className="border-0 shadow-lg bg-white/90 hover:shadow-xl transition-shadow">
          <CardHeader>
            <CardTitle className="text-lg font-bold line-clamp-2">{article.title}</CardTitle>
            <div className="text-sm text-gray-600 mt-1">{article.category}</div>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 text-sm mb-4 line-clamp-3">{article.excerpt}</p>
            <div className="flex items-center gap-4 text-xs text-gray-500 mb-4">
              <span className="flex items-center gap-1"><Clock className="h-3 w-3" /> {article.readTime} min</span>
              <span className="flex items-center gap-1"><Eye className="h-3 w-3" /> {article.views}</span>
            </div>
            <Link href={`/articles/${article.id}`} onClick={() => onArticleRead(article.id)}>
              <Button variant="outline" className="w-full">
                Czytaj artykuł
              </Button>
            </Link>
          </CardContent>
        </Card>
      ))}
    </div>
  )
}-e 

=== ./src/components/articles/page.tsx ===
// src/app/articles/page.tsx
'use client'

import { useEffect, useState } from 'react'
import { useAuth } from '@/components/providers/auth-provider'
import { ArticleList } from '@/components/articles/article-list'

export default function ArticlesPage() {
  const { user: authUser } = useAuth()
  const [userData, setUserData] = useState<{
    id: string
    role: 'user' | 'admin'
  } | null>(null)

  useEffect(() => {
    if (authUser) {
      setUserData({
        id: authUser.uid,
        role: authUser.role || 'user',
      })
    } else {
      setUserData({
        id: 'guest',
        role: 'user',
      })
    }
  }, [authUser])

  const handleArticleRead = (articleId: string) => {
    // Ta funkcja zostanie rozbudowana później (np. zapis do Firestore / localStorage)
    console.log('Artykuł przeczytany:', articleId)
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10 py-8">
      <div className="container mx-auto px-4 max-w-7xl">
        <ArticleList 
          user={userData}
          onArticleRead={handleArticleRead}
        />
      </div>
    </div>
  )
}-e 

=== ./src/components/Admin/ArticleForm.jsx ===
// src/components/Admin/ArticleForm.jsx
import { useState } from 'react';
import { useArticles } from '@/hooks/useArticles';
import { useAuth } from '@/components/providers/auth-provider';

export const ArticleForm = () => {
  const { user } = useAuth();
  const { addArticle } = useArticles('admin', user?.uid);

  const [formData, setFormData] = useState({
    title: '',
    excerpt: '',
    content: '',
    category: 'Stres',
    tags: '',
    readTime: 5,
  });

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      await addArticle({
        ...formData,
        tags: formData.tags.split(',').map(t => t.trim()).filter(Boolean),
        readTime: Number(formData.readTime),
      });
      alert('✅ Artykuł został dodany!');
      setFormData({ title: '', excerpt: '', content: '', category: 'Stres', tags: '', readTime: 5 });
    } catch (err) {
      alert('❌ Błąd: ' + err.message);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4">
      <input
        value={formData.title}
        onChange={(e) => setFormData({ ...formData, title: e.target.value })}
        placeholder="Tytuł"
        required
        className="w-full p-3 border rounded"
      />
      <textarea
        value={formData.excerpt}
        onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}
        placeholder="Opis"
        required
        className="w-full p-3 border rounded"
        rows="3"
      />
      <textarea
        value={formData.content}
        onChange={(e) => setFormData({ ...formData, content: e.target.value })}
        placeholder="Treść artykułu"
        required
        className="w-full p-3 border rounded"
        rows="10"
      />
      {/* reszta pól... */}
      <button
        type="submit"
        className="bg-blue-600 text-white px-6 py-3 rounded hover:bg-blue-700"
      >
        Dodaj artykuł
      </button>
    </form>
  );
};-e 

=== ./src/components/Admin/articles/page.tsx ===
// src/app/admin/articles/page.tsx
'use client';

import { useAuth } from '@/components/providers/auth-provider';
import { useAdminArticles } from '@/hooks/useAdminArticles';
import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { ArticleForm } from '@/components/Admin/ArticleForm';
import { ArticleList } from '@/components/Admin/ArticleList';
import { Card, CardContent } from '@/components/ui/card';
import { Shield } from 'lucide-react';

export default function AdminArticlesPage() {
  const { user, loading: authLoading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    if (!authLoading && (!user || user.role !== 'admin')) {
      router.push('/articles');
    }
  }, [user, authLoading, router]);

  if (authLoading || !user) {
    return <div className="min-h-screen flex items-center justify-center">Ładowanie...</div>;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50/20 to-purple-50/10 py-8">
      <div className="container mx-auto px-4 max-w-7xl">
        <div className="text-center mb-8">
          <div className="flex items-center justify-center gap-3 mb-4">
            <div className="p-3 rounded-2xl bg-gradient-to-r from-blue-500 to-purple-500 shadow-lg">
              <Shield className="h-8 w-8 text-white" />
            </div>
            <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-800 to-slate-600 bg-clip-text text-transparent">
              Panel Administratora
            </h1>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Formularz dodawania */}
          <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
            <CardContent className="p-6">
              <ArticleForm adminUid={user.uid} />
            </CardContent>
          </Card>

          {/* Lista artykułów */}
          <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm">
            <CardContent className="p-6">
              <ArticleList adminUid={user.uid} />
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
}-e 

=== ./src/components/Admin/ArticleFormModal.tsx ===
// src/components/Admin/ArticleFormModal.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { useArticles } from '@/hooks/useArticles'
import { Button } from '@/components/ui/button'
import { Upload, X, BookOpen } from 'lucide-react'
import ReactQuill from 'react-quill'
import 'react-quill/dist/quill.snow.css'
import { motion, AnimatePresence } from 'framer-motion'

const CATEGORIES = [
  'Stres', 'Lęki', 'Matura', 'Nauka', 'Relacje', 'Samopoczucie',
  'Sen', 'Motywacja', 'Prokrastynacja', 'Wsparcie'
]

interface ArticleFormModalProps {
  isOpen: boolean
  onClose: () => void
  uid: string
}

export function ArticleFormModal({ isOpen, onClose, uid }: ArticleFormModalProps) {
  const { addArticle } = useArticles('admin', uid)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const [formData, setFormData] = useState({
    title: '',
    excerpt: '',
    content: '',
    category: 'Stres',
    tags: '',
    readTime: 5,
    status: 'draft' as 'draft' | 'published',
    isFeatured: false,
    isTrending: false,
  })

  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [imageFile, setImageFile] = useState<File | null>(null)

  useEffect(() => {
    if (!isOpen) {
      setFormData({
        title: '',
        excerpt: '',
        content: '',
        category: 'Stres',
        tags: '',
        readTime: 5,
        status: 'draft',
        isFeatured: false,
        isTrending: false,
      })
      setImagePreview(null)
      setImageFile(null)
    }
  }, [isOpen])

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      if (!file.type.startsWith('image/')) {
        alert('Wybierz plik obrazu (jpg, png, itp.)')
        return
      }
      setImageFile(file)
      setImagePreview(URL.createObjectURL(file))
    }
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    setIsSubmitting(true)
    try {
      await addArticle(formData, imageFile || undefined)
      alert('✅ Artykuł został dodany!')
      onClose()
    } catch (err) {
      console.error(err)
      alert('❌ Błąd: ' + (err as Error).message)
    } finally {
      setIsSubmitting(false)
    }
  }

  if (!isOpen) return null

  return (
    <AnimatePresence>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        exit={{ opacity: 0 }}
        className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4"
        onClick={onClose}
      >
        <motion.div
          initial={{ scale: 0.9, opacity: 0, y: 20 }}
          animate={{ scale: 1, opacity: 1, y: 0 }}
          exit={{ scale: 0.9, opacity: 0, y: 20 }}
          className="bg-white rounded-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto shadow-2xl"
          onClick={(e) => e.stopPropagation()}
        >
          <div className="flex items-center justify-between p-6 border-b">
            <h2 className="text-xl font-bold flex items-center gap-2">
              <BookOpen className="h-5 w-5" />
              Dodaj nowy artykuł
            </h2>
            <button
              onClick={onClose}
              className="p-2 hover:bg-gray-100 rounded-full"
            >
              <X className="h-5 w-5" />
            </button>
          </div>

          <form onSubmit={handleSubmit} className="p-6 space-y-6">
            {/* Tytuł */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Tytuł artykułu *
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                required
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* Kategoria */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Kategoria
              </label>
              <select
                value={formData.category}
                onChange={(e) => setFormData({ ...formData, category: e.target.value })}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                {CATEGORIES.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>

            {/* Opis */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Krótki opis *
              </label>
              <textarea
                value={formData.excerpt}
                onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}
                required
                rows={2}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            {/* Treść – PROFESJONALNY EDYTOR */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Treść artykułu
              </label>
              <ReactQuill
                value={formData.content}
                onChange={(value) => setFormData({ ...formData, content: value })}
                modules={{
                  toolbar: [
                    [{ 'header': [1, 2, 3, false] }],
                    ['bold', 'italic', 'underline', 'strike'],
                    [{ 'list': 'ordered' }, { 'list': 'bullet' }],
                    ['link', 'image', 'blockquote', 'code-block'],
                    [{ 'color': [] }, { 'background': [] }],
                    ['clean']
                  ]
                }}
                formats={[
                  'header',
                  'bold', 'italic', 'underline', 'strike',
                  'list', 'bullet', 'ordered',
                  'link', 'image', 'blockquote', 'code-block',
                  'color', 'background'
                ]}
                className="h-96 mb-4"
              />
            </div>

            {/* Obrazek okładki */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Okładka artykułu (opcjonalnie)
              </label>
              {imagePreview ? (
                <div className="relative inline-block mt-2">
                  <img src={imagePreview} alt="Podgląd" className="w-full max-w-xs h-32 object-cover rounded" />
                  <button
                    type="button"
                    onClick={() => {
                      setImagePreview(null)
                      setImageFile(null)
                      if (fileInputRef.current) fileInputRef.current.value = ''
                    }}
                    className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1"
                  >
                    <X className="h-4 w-4" />
                  </button>
                </div>
              ) : (
                <div
                  onClick={() => fileInputRef.current?.click()}
                  className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer mt-2"
                >
                  <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
                  <p className="text-sm text-gray-600">Kliknij, aby dodać zdjęcie</p>
                </div>
              )}
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleImageChange}
                className="hidden"
              />
            </div>

            {/* Opcje */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Czas czytania (min)
                </label>
                <input
                  type="number"
                  min="1"
                  value={formData.readTime}
                  onChange={(e) => setFormData({ ...formData, readTime: Number(e.target.value) })}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Status
                </label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value as any })}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg"
                >
                  <option value="draft">Szkic</option>
                  <option value="published">Opublikowany</option>
                </select>
              </div>

              <div className="flex items-center gap-2 pt-6">
                <input
                  type="checkbox"
                  id="featured"
                  checked={formData.isFeatured}
                  onChange={(e) => setFormData({ ...formData, isFeatured: e.target.checked })}
                  className="h-4 w-4"
                />
                <label htmlFor="featured" className="text-sm font-medium text-gray-700">
                  Wyróżniony
                </label>
              </div>
            </div>

            {/* Przyciski */}
            <div className="flex justify-end gap-3 pt-4">
              <button
                type="button"
                onClick={onClose}
                className="px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50"
              >
                Anuluj
              </button>
              <button
                type="submit"
                disabled={isSubmitting}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                {isSubmitting ? 'Zapisywanie...' : 'Dodaj artykuł'}
              </button>
            </div>
          </form>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  )
}-e 

=== ./src/components/Admin/RichTextEditor.tsx ===
// src/components/Admin/RichTextEditor.tsx
'use client'

import { useState, forwardRef } from 'react'
import ReactQuill, { Quill } from 'react-quill'
import 'react-quill/dist/quill.snow.css'

// Dodaj moduł tabel (Quill nie ma go domyślnie)
const Table = Quill.import('formats/table')
const TableRow = Quill.import('formats/table-row')
const TableCell = Quill.import('formats/table-cell')

Quill.register({ 'formats/table': Table })
Quill.register({ 'formats/table-row': TableRow })
Quill.register({ 'formats/table-cell': TableCell })

interface RichTextEditorProps {
  value: string
  onChange: (value: string) => void
}

const RichTextEditor = forwardRef<HTMLDivElement, RichTextEditorProps>(({ value, onChange }, ref) => {
  const [editorRef, setEditorRef] = useState<ReactQuill | null>(null)

  const insertTable = () => {
    if (!editorRef) return
    const editor = editorRef.getEditor()
    const range = editor.getSelection()
    if (!range) return

    // Wstaw prostą tabelę 2x2 jako HTML
    const tableHTML = `
      <table class="table-auto w-full border-collapse">
        <tbody>
          <tr><td class="border p-2">Komórka 1</td><td class="border p-2">Komórka 2</td></tr>
          <tr><td class="border p-2">Komórka 3</td><td class="border p-2">Komórka 4</td></tr>
        </tbody>
      </table>
    `
    editor.clipboard.dangerouslyPasteHTML(range.index, tableHTML)
  }

  const modules = {
    toolbar: {
      container: [
        [{ 'header': [1, 2, 3, false] }],
        ['bold', 'italic', 'underline', 'strike'],
        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
        ['link', 'image', 'blockquote', 'code-block'],
        [{ 'color': [] }, { 'background': [] }],
        ['clean'],
        ['table'] // niestandardowy przycisk
      ],
      handlers: {
        table: insertTable
      }
    }
  }

  const formats = [
    'header',
    'bold', 'italic', 'underline', 'strike',
    'list', 'bullet', 'ordered',
    'link', 'image', 'blockquote', 'code-block',
    'color', 'background',
    'table'
  ]

  return (
    <div ref={ref}>
      <ReactQuill
        ref={setEditorRef}
        value={value}
        onChange={onChange}
        modules={modules}
        formats={formats}
        className="h-96"
      />
    </div>
  )
})

RichTextEditor.displayName = 'RichTextEditor'
export default RichTextEditor-e 

=== ./src/components/Admin/ArticleForm.tsx ===
// src/components/Admin/ArticleForm.tsx
'use client'

import { useState, useRef } from 'react'
import { useArticles } from '@/hooks/useArticles'
import { useAuth } from '@/components/providers/auth-provider'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'
import { Image as ImageIcon, Upload, X } from 'lucide-react'

const CATEGORIES = [
  'Stres', 'Lęki', 'Matura', 'Nauka', 'Relacje', 'Samopoczucie',
  'Sen', 'Motywacja', 'Prokrastynacja', 'Wsparcie'
]

export function ArticleForm() {
  const { user } = useAuth()
  const { addArticle } = useArticles('admin')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const [formData, setFormData] = useState({
    title: '',
    excerpt: '',
    content: '',
    category: 'Stres',
    tags: '',
    readTime: 5,
  })

  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [imageFile, setImageFile] = useState<File | null>(null)

  const handleImageChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0]
    if (file) {
      if (!file.type.startsWith('image/')) {
        alert('Wybierz plik obrazu (jpg, png, itp.)')
        return
      }
      setImageFile(file)
      setImagePreview(URL.createObjectURL(file))
    }
  }

  const removeImage = () => {
    setImagePreview(null)
    setImageFile(null)
    if (fileInputRef.current) fileInputRef.current.value = ''
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    if (!user) return

    setIsSubmitting(true)
    try {
      await addArticle(
        {
          ...formData,
          tags: formData.tags.split(',').map(t => t.trim()).filter(Boolean),
          readTime: Number(formData.readTime),
          status: 'draft',
          isFeatured: false,
          isTrending: false,
        },
        user.uid,
        imageFile || undefined
      )
      alert('✅ Artykuł został dodany!')
      // Reset formularza
      setFormData({ title: '', excerpt: '', content: '', category: 'Stres', tags: '', readTime: 5 })
      removeImage()
    } catch (err) {
      console.error(err)
      alert('❌ Błąd: ' + (err as Error).message)
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      {/* Tytuł */}
      <Input
        placeholder="Tytuł artykułu"
        value={formData.title}
        onChange={(e) => setFormData({ ...formData, title: e.target.value })}
        required
      />

      {/* Obrazek */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Okładka artykułu (opcjonalnie)
        </label>
        {imagePreview ? (
          <div className="relative inline-block">
            <img
              src={imagePreview}
              alt="Podgląd okładki"
              className="w-full max-w-xs h-32 object-cover rounded-lg border"
            />
            <button
              type="button"
              onClick={removeImage}
              className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-600"
            >
              <X className="h-4 w-4" />
            </button>
          </div>
        ) : (
          <div
            onClick={() => fileInputRef.current?.click()}
            className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-blue-400 transition-colors"
          >
            <Upload className="h-8 w-8 text-gray-400 mx-auto mb-2" />
            <p className="text-sm text-gray-600">Kliknij, aby dodać zdjęcie</p>
          </div>
        )}
        <input
          ref={fileInputRef}
          type="file"
          accept="image/*"
          onChange={handleImageChange}
          className="hidden"
        />
      </div>

      {/* Opis */}
      <Textarea
        placeholder="Krótki opis"
        value={formData.excerpt}
        onChange={(e) => setFormData({ ...formData, excerpt: e.target.value })}
        required
        rows={2}
      />

      {/* Treść */}
      <Textarea
        placeholder="Treść artykułu"
        value={formData.content}
        onChange={(e) => setFormData({ ...formData, content: e.target.value })}
        required
        rows={10}
      />

      {/* Kategoria */}
      <select
        value={formData.category}
        onChange={(e) => setFormData({ ...formData, category: e.target.value })}
        className="w-full p-3 border rounded"
      >
        {CATEGORIES.map(cat => (
          <option key={cat} value={cat}>{cat}</option>
        ))}
      </select>

      {/* Tagi */}
      <Input
        placeholder="Tagi (oddzielone przecinkami)"
        value={formData.tags}
        onChange={(e) => setFormData({ ...formData, tags: e.target.value })}
      />

      {/* Czas czytania */}
      <Input
        type="number"
        min="1"
        max="30"
        placeholder="Czas czytania (minuty)"
        value={formData.readTime}
        onChange={(e) => setFormData({ ...formData, readTime: Number(e.target.value) })}
      />

      {/* Przycisk */}
      <Button type="submit" disabled={isSubmitting} className="w-full">
        {isSubmitting ? 'Zapisywanie...' : 'Dodaj artykuł'}
      </Button>
    </form>
  )
}-e 

=== ./src/components/mood-selector.tsx ===

'use client'

import { useState } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Card, CardContent } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Sparkles, Heart, Zap, Cloud, Sun, CloudRain } from 'lucide-react'
import { cn } from '@/lib/utils'

interface MoodSelectorProps {
  onMoodSelect: (mood: number) => void
  onAddNote: () => void
  currentMood?: number
}

const moodOptions = [
  {
    level: 20,
    label: 'Bardzo niski',
    emoji: '😔',
    description: 'Czuję się przygnębiony',
    color: 'from-gray-500 to-gray-600',
    icon: CloudRain,
    tips: ['Zrób głęboki oddech', 'Porozmawiaj z kimś', 'Zrób coś miłego dla siebie']
  },
  {
    level: 40,
    label: 'Niski',
    emoji: '😐',
    description: 'Mam gorszy dzień',
    color: 'from-blue-500 to-blue-600',
    icon: Cloud,
    tips: ['Wyjdź na spacer', 'Posłuchaj ulubionej muzyki', 'Zrób mały krok naprzód']
  },
  {
    level: 60,
    label: 'Neutralny',
    emoji: '🙂',
    description: 'Jest ok',
    color: 'from-green-500 to-green-600',
    icon: Sun,
    tips: ['Doceniaj małe rzeczy', 'Planuj dalsze kroki', 'Ciesz się spokojem']
  },
  {
    level: 80,
    label: 'Wysoki',
    emoji: '😊',
    description: 'Czuję się dobrze',
    color: 'from-purple-500 to-purple-600',
    icon: Zap,
    tips: ['Podziel się energią', 'Zrób coś kreatywnego', 'Pomóż komuś']
  },
  {
    level: 100,
    label: 'Bardzo wysoki',
    emoji: '🤩',
    description: 'Fantastycznie!',
    color: 'from-rose-500 to-rose-600',
    icon: Heart,
    tips: ['Ciesz się momentem', 'Zarażaj pozytywną energią', 'Zapisuj dobre chwile']
  }
]

export const MoodSelector: React.FC<MoodSelectorProps> = ({
  onMoodSelect,
  onAddNote,
  currentMood
}) => {
  const [selectedMood, setSelectedMood] = useState<number | null>(currentMood || null)
  const [showTips, setShowTips] = useState(false)

  const handleMoodSelect = (moodLevel: number) => {
    setSelectedMood(moodLevel)
    setShowTips(true)
  }

  const handleConfirm = () => {
    if (selectedMood !== null) {
      onMoodSelect(selectedMood)
    }
  }

  const selectedOption = moodOptions.find(opt => opt.level === selectedMood)

  return (
    <div className="w-full max-w-4xl mx-auto space-y-6">
      {/* Nagłówek */}
      <div className="text-center space-y-3">
        <motion.div
          initial={{ scale: 0.8, opacity: 0 }}
          animate={{ scale: 1, opacity: 1 }}
          className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-white/80 backdrop-blur-sm border border-gray-100"
        >
          <Sparkles className="h-4 w-4 text-blue-500" />
          <span className="text-sm font-medium text-gray-700">Jak się dziś czujesz?</span>
        </motion.div>
        <h2 className="text-2xl sm:text-3xl font-light text-gray-900">
          Wybierz swój nastrój
        </h2>
        <p className="text-gray-600 max-w-2xl mx-auto">
          Ta decyzja pomoże nam lepiej zrozumieć Twój dzień i dostarczyć spersonalizowane insights
        </p>
      </div>

      {/* Opcje nastroju */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-3">
        {moodOptions.map((mood, index) => (
          <motion.div
            key={mood.level}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
          >
            <Card
              className={cn(
                "cursor-pointer transition-all duration-300 border-2 backdrop-blur-sm",
                selectedMood === mood.level
                  ? "border-blue-500 shadow-lg scale-105 bg-white/90"
                  : "border-gray-200 bg-white/80 hover:border-gray-300 hover:shadow-md"
              )}
              onClick={() => handleMoodSelect(mood.level)}
            >
              <CardContent className="p-4 text-center">
                <div className="text-3xl mb-2">{mood.emoji}</div>
                <div className={cn(
                  "text-xs font-medium px-2 py-1 rounded-full mb-2",
                  selectedMood === mood.level 
                    ? "bg-blue-100 text-blue-700" 
                    : "bg-gray-100 text-gray-700"
                )}>
                  {mood.label}
                </div>
                <p className="text-xs text-gray-600 leading-tight">
                  {mood.description}
                </p>
              </CardContent>
            </Card>
          </motion.div>
        ))}
      </div>

      {/* Wybrane tipsy i akcje */}
      <AnimatePresence>
        {selectedMood !== null && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="space-y-4"
          >
            {/* Tipsy */}
            {showTips && selectedOption && (
              <motion.div
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-2xl p-4 border border-blue-100"
              >
                <h4 className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                  <Sparkles className="h-4 w-4 text-blue-500" />
                  Szybkie wsparcie dla Ciebie:
                </h4>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-2">
                  {selectedOption.tips.map((tip, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, x: -10 }}
                      animate={{ opacity: 1, x: 0 }}
                      transition={{ delay: index * 0.1 }}
                      className="flex items-center gap-2 p-2 bg-white/80 rounded-lg text-sm text-gray-700"
                    >
                      <div className="w-2 h-2 rounded-full bg-blue-500 flex-shrink-0" />
                      {tip}
                    </motion.div>
                  ))}
                </div>
              </motion.div>
            )}

            {/* Akcje */}
            <div className="flex gap-3">
              <Button
                onClick={handleConfirm}
                className="flex-1 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 py-3 rounded-xl font-medium text-white shadow-lg hover:shadow-xl transition-all duration-200"
                size="lg"
              >
                <Sparkles className="h-4 w-4 mr-2" />
                Zapisz nastrój i zobacz AI Insights
              </Button>
              
              <Button
                onClick={onAddNote}
                variant="outline"
                className="border-gray-300 text-gray-700 hover:border-gray-400 hover:bg-gray-50 py-3 rounded-xl font-medium"
                size="lg"
              >
                + Dodaj notatkę
              </Button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  )
}-e 

=== ./src/components/map/WarsawMap.tsx ===
'use client'

import { useState, useMemo } from 'react'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Filter, Phone, Clock, MapPin, Heart, School, Users, Shield, Church, AlertTriangle, Home } from 'lucide-react'
import { cn } from '@/lib/utils'

// Typy danych
interface SupportPlace {
  id: string
  name: string
  type: 'psychologist' | 'hotline' | 'ngo' | 'school' | 'hospital' | 'family' | 'senior' | 'crisis' | 'religious' | 'victim'
  address: string
  phone?: string
  hours?: string
  description?: string
  website?: string
  email?: string
}

// KOMPLETNA BAZA WSPARCIA PSYCHOLOGICZNEGO W WARSZAWIE
const WARSAW_SUPPORT_PLACES: SupportPlace[] = [
  // WSPARCIE PSYCHOLOGICZNE
  {
    id: 'syntonia',
    name: 'Stowarzyszenie Syntonia',
    type: 'psychologist',
    address: 'Warszawa',
    phone: '792 810 820, 792 810 180',
    hours: 'Pon 9:00-13:00, Wt-Śr 9:00-12:00',
    email: 'wsparcieopiekunow@gmail.com, zapisy@syntonia.org.pl',
    description: 'Wsparcie psychologiczne online'
  },
  {
    id: 'pck',
    name: 'Polski Czerwony Krzyż',
    type: 'psychologist',
    address: 'Warszawa',
    phone: '607 050 655',
    hours: 'Pon-Pt 9:00-14:00, Pon 8:00-20:00, Czw 18:00-20:00',
    description: 'Porady psychologiczne'
  },
  {
    id: 'razem',
    name: 'Fundacja Razem',
    type: 'psychologist',
    address: 'Warszawa',
    phone: '733 563 311',
    hours: 'Pon-Pt 10:00-18:00',
    description: 'Wsparcie psychologiczne'
  },

  // TELEFONY ZAUFANIA
  {
    id: 'mali-bracia',
    name: 'Stowarzyszenie Mali Bracia Ubogich',
    type: 'hotline',
    address: 'Warszawa',
    phone: '22 635 09 54',
    hours: 'Pon-Pt 17:00-20:00',
    description: 'Telefon zaufania dla seniorów'
  },
  {
    id: 'znajdz-pomoc',
    name: 'Fundacja "Znajdź Pomoc"',
    type: 'hotline',
    address: 'Warszawa',
    phone: '800 220 280',
    hours: 'Pon-Pt 17:00-20:00',
    description: 'Infolinia wsparcia psychologicznego'
  },
  {
    id: '116-111',
    name: 'Telefon Zaufania dla Dzieci i Młodzieży',
    type: 'hotline',
    address: 'ul. Nowogrodzka 75, 00-662 Warszawa',
    phone: '116 111',
    hours: '24/7',
    description: 'Bezpłatny, całodobowy telefon zaufania'
  },
  {
    id: 'itaka',
    name: 'ITAKA - Antydepresyjny Telefon Zaufania',
    type: 'hotline',
    address: 'ul. Nowogrodzka 49, 00-695 Warszawa',
    phone: '22 654 40 41',
    hours: 'Pon-Pt 17:00-20:00',
    description: 'Wsparcie dla osób w depresji'
  },

  // WSPARCIE DLA RODZIN I SENIORÓW
  {
    id: 'wawer-rodzina',
    name: 'Specjalistyczna Poradnia Rodzinna Dzielnicy Wawer',
    type: 'family',
    address: 'Warszawa',
    phone: '22 612 77 94, 22 277 11 98',
    hours: 'Pon-Pt 8:00-16:00',
    description: 'Pomoc dla rodzin, również przez Skype'
  },
  {
    id: 'projekt-starsi',
    name: 'Fundacja Projekt Starsi',
    type: 'senior',
    address: 'Warszawa',
    phone: '537 375 505',
    description: 'Pomoc osobom starszym krzywdzonym przez bliskich'
  },

  // PORADNIE KATOLICKIE
  {
    id: 'katolicka-poradnia',
    name: 'Archidiecezjalna Poradnia Katolicka',
    type: 'religious',
    address: 'ul. Nowogrodzka 49, Warszawa',
    phone: '22 629 02 61',
    hours: '15:00-19:00',
    website: 'http://duszpasterstworodzin.pl',
    description: 'Pomoc psychologiczna, prawna, duchowa'
  },
  {
    id: 'dewajtis',
    name: 'Poradnia Dewajtis',
    type: 'religious',
    address: 'ul. Dzielna 11a, Warszawa',
    phone: '660 511 566',
    hours: 'Pon-Pt 14:00-19:00',
    email: 'kontaktdewajtis@gmail.com',
    website: 'http://www.dewajtis.pl/'
  },
  {
    id: 'bednarska',
    name: 'Poradnia "Bednarska"',
    type: 'religious',
    address: 'ul. Mariensztat 8, Warszawa',
    phone: '22 828 54 83',
    hours: 'Pon-Pt 8:00-20:00',
    website: 'www.opp.bednarska.warszawa.pl'
  },
  {
    id: 'inigo',
    name: 'Fundacja INIGO',
    type: 'religious',
    address: 'ul. A. Boboli 12, Warszawa',
    phone: '797 002 584',
    hours: 'Pon-Czw 16:00-19:00, Pt 9:00-12:00',
    website: 'www.inigo.org.pl'
  },

  // POMOC POKRZYWDZONYM
  {
    id: 'centrum-pomocy',
    name: 'Centrum Psychologicznej Pomocy Rodzinie',
    type: 'victim',
    address: 'ul. Wspólna 35/8, 00-519 Warszawa',
    phone: '22 621 11 51'
  },
  {
    id: 'dzieci-niczyje',
    name: 'Centrum Pomocy Rodzinie "Dzieci Niczyje"',
    type: 'victim',
    address: 'ul. Walecznych 59, 03-926 Warszawa',
    phone: '22 616 02 68'
  },

  // PORADNIE PSYCHOLOGICZNO-PEDAGOGICZNE (wybrane)
  {
    id: 'ppp1',
    name: 'Poradnia Psychologiczno-Pedagogiczna nr 1',
    type: 'school',
    address: 'ul. Złota 9 lok. 3, 00-019 Warszawa',
    phone: '22 290 36 99',
    website: 'ppp1.waw.pl',
    email: 'sekretariat.ppp1@eduwarszawa.pl'
  },
  {
    id: 'ppp2',
    name: 'Poradnia Psychologiczno-Pedagogiczna nr 2',
    type: 'school',
    address: 'ul. Karolkowa 53 A, 01-197 Warszawa',
    phone: '22 836 70 88',
    website: 'poradnia2.waw.pl',
    email: 'sekretariat.ppp2@eduwarszawa.pl'
  },
  {
    id: 'ppp3',
    name: 'Poradnia Psychologiczno-Pedagogiczna nr 3',
    type: 'school',
    address: 'ul. Felińskiego 15, 01-513 Warszawa',
    phone: '22 277-22-10',
    website: 'poradnia-nr3.pl',
    email: 'sekretariat.ppp3@eduwarszawa.pl'
  },
  {
    id: 'ppp4',
    name: 'Poradnia Psychologiczno-Pedagogiczna nr 4',
    type: 'school',
    address: 'ul. Mińska 1/5, 03-806 Warszawa',
    phone: '22 810 20 29',
    website: 'ppp4.edu.pl',
    email: 'ppp4@eduwarszawa.pl'
  },
  {
    id: 'ppp-top',
    name: 'Specjalistyczna Poradnia Psychologiczno-Pedagogiczna "TOP"',
    type: 'school',
    address: 'ul. Raszyńska 8/10, 02-026 Warszawa',
    phone: '22 822 77 17',
    email: 'sppptop@eduwarszawa.pl',
    website: 'poradnia-top.pl'
  },

  // KRYZYS
  {
    id: 'pogotowie-rodzina',
    name: 'Pogotowie dla Rodziny',
    type: 'crisis',
    address: 'ul. Domaniewska 20, Warszawa',
    phone: '692 032 370',
    website: 'https://www.pogotowiedlarodziny.com'
  },
  {
    id: 'pracownia-dialogu',
    name: 'Pracownia Dialogu',
    type: 'crisis',
    address: 'ul. Freta 20/24a, Warszawa',
    phone: '664 050 178',
    website: 'https://pracowniadialogu.pl/'
  }
]

// Filtry kategorii
const PLACE_TYPES = [
  { 
    id: 'all', 
    label: 'Wszystkie', 
    icon: MapPin, 
    color: 'bg-gradient-to-r from-purple-500 to-pink-500', 
    markerColor: '#8B5CF6',
    emoji: '🏢'
  },
  { 
    id: 'school', 
    label: 'Poradnie PPP', 
    icon: School, 
    color: 'bg-gradient-to-r from-purple-500 to-indigo-500', 
    markerColor: '#8B5CF6',
    emoji: '🏫'
  },
  { 
    id: 'psychologist', 
    label: 'Psychologowie', 
    icon: Heart, 
    color: 'bg-gradient-to-r from-blue-500 to-cyan-500', 
    markerColor: '#3B82F6',
    emoji: '🧠'
  },
  { 
    id: 'hotline', 
    label: 'Telefony', 
    icon: Phone, 
    color: 'bg-gradient-to-r from-red-500 to-orange-500', 
    markerColor: '#EF4444',
    emoji: '📞'
  },
  { 
    id: 'family', 
    label: 'Dla Rodzin', 
    icon: Users, 
    color: 'bg-gradient-to-r from-green-500 to-emerald-500', 
    markerColor: '#10B981',
    emoji: '👨‍👩‍👧‍👦'
  },
  { 
    id: 'senior', 
    label: 'Dla Seniorów', 
    icon: Home, 
    color: 'bg-gradient-to-r from-amber-500 to-orange-500', 
    markerColor: '#F59E0B',
    emoji: '👵'
  },
  { 
    id: 'religious', 
    label: 'Katolickie', 
    icon: Church, 
    color: 'bg-gradient-to-r from-gray-500 to-gray-700', 
    markerColor: '#6B7280',
    emoji: '⛪'
  },
  { 
    id: 'crisis', 
    label: 'Kryzys', 
    icon: AlertTriangle, 
    color: 'bg-gradient-to-r from-red-600 to-rose-600', 
    markerColor: '#DC2626',
    emoji: '🆘'
  },
  { 
    id: 'victim', 
    label: 'Pokrzywdzeni', 
    icon: Shield, 
    color: 'bg-gradient-to-r from-purple-600 to-violet-600', 
    markerColor: '#7C3AED',
    emoji: '🛡️'
  }
]

export default function WarsawMap() {
  const [selectedFilter, setSelectedFilter] = useState('all')
  const [selectedPlace, setSelectedPlace] = useState<SupportPlace | null>(null)
  
  // Filtrowanie miejsc
  const filteredPlaces = useMemo(() => 
    selectedFilter === 'all' 
      ? WARSAW_SUPPORT_PLACES 
      : WARSAW_SUPPORT_PLACES.filter(place => place.type === selectedFilter)
  , [selectedFilter])

  const getTypeConfig = (type: string) => {
    return PLACE_TYPES.find(t => t.id === type) || PLACE_TYPES[0]
  }

  // Funkcja telefonu
  const handleCall = (phone: string) => {
    // Usuń spacje i wybierz pierwszy numer
    const cleanPhone = phone.split(',')[0].trim().replace(/\s/g, '')
    window.open(`tel:${cleanPhone}`, '_self')
  }

  // Funkcja nawigacji
  const handleNavigate = (address: string) => {
    const encodedAddress = encodeURIComponent(address)
    window.open(`https://www.google.com/maps/search/?api=1&query=${encodedAddress}`, '_blank')
  }

  // Statystyki
  const stats = useMemo(() => ({
    total: WARSAW_SUPPORT_PLACES.length,
    byType: PLACE_TYPES.filter(t => t.id !== 'all').map(type => ({
      type: type.id,
      label: type.label,
      count: WARSAW_SUPPORT_PLACES.filter(p => p.type === type.id).length,
      emoji: type.emoji
    }))
  }), [])

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 via-blue-50 to-cyan-50 py-8">
      <div className="container mx-auto max-w-7xl px-4">
        
        {/* Nagłówek */}
        <div className="flex items-center justify-between mb-8 p-6 rounded-2xl bg-white/80 backdrop-blur-sm border border-white/40 shadow-lg">
          <div className="text-center flex-1">
            <h1 className="text-2xl sm:text-3xl font-bold bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent leading-tight">
              Mapa Wsparcia Psychologicznego - Warszawa
            </h1>
            <p className="text-gray-600 mt-2 text-sm sm:text-base">
              {stats.total} miejsc pomocy psychologicznej w Warszawie
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          
          {/* Panel boczny */}
          <div className="lg:col-span-1 space-y-6">
            
            {/* Karta filtrów */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/40">
              <CardHeader className="pb-4">
                <CardTitle className="flex items-center gap-2 text-lg font-bold text-gray-900">
                  <Filter className="h-5 w-5 text-purple-600" />
                  Filtruj miejsca
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {PLACE_TYPES.map((type) => {
                  const count = WARSAW_SUPPORT_PLACES.filter(p => type.id === 'all' || p.type === type.id).length
                  
                  return (
                    <Button
                      key={type.id}
                      variant={selectedFilter === type.id ? "default" : "outline"}
                      className={cn(
                        "w-full justify-start gap-3 py-4 text-sm font-semibold transition-all duration-200",
                        selectedFilter === type.id 
                          ? "text-white shadow-lg transform scale-[1.02] border-0" 
                          : "border-2 border-gray-200 bg-white/90 hover:bg-white hover:border-gray-300 text-gray-700 hover:scale-[1.01]"
                      )}
                      style={
                        selectedFilter === type.id 
                          ? { background: `linear-gradient(135deg, ${type.markerColor}20, ${type.markerColor}40)`, color: type.markerColor }
                          : {}
                      }
                      onClick={() => setSelectedFilter(type.id)}
                    >
                      <span className="text-lg">{type.emoji}</span>
                      {type.label}
                      <span className="ml-auto text-xs font-medium bg-black/10 px-2 py-1 rounded-full">
                        {count}
                      </span>
                    </Button>
                  )
                })}
              </CardContent>
            </Card>

            {/* Statystyki */}
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/40">
              <CardHeader className="pb-4">
                <CardTitle className="text-lg font-bold text-gray-900">
                  Statystyki
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3 text-sm">
                <div className="text-center mb-4">
                  <div className="text-2xl font-bold text-purple-600">{stats.total}</div>
                  <div className="text-gray-600">wszystkich miejsc</div>
                </div>
                {stats.byType.map(stat => (
                  <div key={stat.type} className="flex justify-between items-center">
                    <div className="flex items-center gap-2">
                      <span>{stat.emoji}</span>
                      <span className="text-gray-700">{stat.label}:</span>
                    </div>
                    <span className="font-bold">{stat.count}</span>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* Główna lista miejsc */}
          <div className="lg:col-span-3">
            <Card className="border-0 shadow-xl bg-white/80 backdrop-blur-sm border border-white/40">
              <CardHeader className="pb-4">
                <CardTitle className="text-lg font-bold text-gray-900">
                  {selectedFilter === 'all' ? 'Wszystkie miejsca wsparcia' : `Miejsca: ${getTypeConfig(selectedFilter).label}`} ({filteredPlaces.length})
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4 max-h-[600px] overflow-y-auto pr-2">
                  {filteredPlaces.map((place) => {
                    const config = getTypeConfig(place.type)
                    return (
                      <div
                        key={place.id}
                        className={cn(
                          "p-6 border-2 rounded-xl transition-all duration-200 hover:shadow-lg group",
                          selectedPlace?.id === place.id
                            ? "border-purple-500 bg-purple-50 shadow-lg ring-2 ring-purple-200"
                            : "border-gray-200 bg-white/90 shadow-sm hover:border-purple-300"
                        )}
                      >
                        <div className="flex items-start justify-between mb-4">
                          <div className="flex-1">
                            <div className="flex items-center gap-3 mb-3">
                              <div 
                                className="w-12 h-12 rounded-full flex items-center justify-center text-white text-lg font-bold shadow-md"
                                style={{ backgroundColor: config.markerColor }}
                              >
                                {config.emoji}
                              </div>
                              <div className="flex-1">
                                <h3 className="font-bold text-gray-900 text-lg leading-tight">
                                  {place.name}
                                </h3>
                                <div className="flex items-center gap-2 mt-1">
                                  <span className="text-sm text-gray-500">{config.label}</span>
                                  {place.hours && (
                                    <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                                      {place.hours.split(',')[0]}
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>
                            
                            <div className="space-y-2 text-sm text-gray-700">
                              <div className="flex items-center gap-2">
                                <MapPin className="h-4 w-4 text-gray-500 flex-shrink-0" />
                                <span>{place.address}</span>
                              </div>
                              
                              {place.phone && (
                                <div className="flex items-center gap-2">
                                  <Phone className="h-4 w-4 text-gray-500 flex-shrink-0" />
                                  <span className="font-bold text-purple-600">{place.phone}</span>
                                </div>
                              )}
                              
                              {place.hours && (
                                <div className="flex items-center gap-2">
                                  <Clock className="h-4 w-4 text-gray-500 flex-shrink-0" />
                                  <span className="text-gray-600">{place.hours}</span>
                                </div>
                              )}
                            </div>

                            {place.description && (
                              <p className="text-sm text-gray-600 mt-3">
                                {place.description}
                              </p>
                            )}

                            {(place.website || place.email) && (
                              <div className="flex gap-4 mt-3 text-sm">
                                {place.website && (
                                  <a href={`https://${place.website}`} target="_blank" rel="noopener noreferrer" className="text-blue-600 font-medium hover:underline">
                                    🌐 {place.website}
                                  </a>
                                )}
                                {place.email && (
                                  <a href={`mailto:${place.email}`} className="text-blue-600 font-medium hover:underline">
                                    ✉️ {place.email}
                                  </a>
                                )}
                              </div>
                            )}
                          </div>
                        </div>

                        <div className="flex gap-2 mt-4">
                          <Button 
                            className="flex-1 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white shadow-lg"
                            onClick={() => handleNavigate(place.address)}
                          >
                            <MapPin className="h-4 w-4 mr-2" />
                            Pokaż na mapie
                          </Button>
                          
                          {place.phone && (
                            <Button 
                              variant="outline" 
                              className="border-gray-200 hover:border-green-300 hover:text-green-600"
                              onClick={() => handleCall(place.phone!)}
                            >
                              <Phone className="h-4 w-4 mr-2" />
                              Zadzwoń
                            </Button>
                          )}
                        </div>
                      </div>
                    )
                  })}
                </div>
              </CardContent>
            </Card>

            {/* Informacja o ewentualnych błędach */}
            <div className="mt-6 space-y-4">
              <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg text-sm text-yellow-800">
                <div className="flex items-start gap-3">
                  <div className="flex-shrink-0 mt-0.5">
                    <svg className="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium mb-1">Uwaga dotycząca danych</p>
                    <p className="text-yellow-700">
                      Informacje o miejscach wsparcia mogą zawierać ewentualne błędy lub nieaktualne dane. 
                      Godziny otwarcia, numery telefonów i adresy mogą ulegać zmianom. 
                      Przed wizytą zalecamy telefoniczne potwierdzenie dostępności usług.
                    </p>
                  </div>
                </div>
              </div>

              {/* Informacja o zgłaszaniu błędów */}
              <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg text-sm text-blue-800">
                <div className="flex items-start gap-3">
                  <div className="flex-shrink-0 mt-0.5">
                    <svg className="w-5 h-5 text-blue-500" fill="currentColor" viewBox="0 0 20 20">
                      <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                      <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                    </svg>
                  </div>
                  <div>
                    <p className="font-medium mb-1">Znalazłeś błąd w danych?</p>
                    <p className="text-blue-700 mb-2">
                      Jeżeli zauważyłeś jakiś błąd w informacjach lub masz sugestie dotyczące ulepszenia tej mapy wsparcia, prosimy o kontakt:
                    </p>
                    <a 
                      href="mailto:spokojwglowie.kontakt@gmail.com" 
                      className="inline-flex items-center gap-2 bg-blue-100 hover:bg-blue-200 text-blue-800 font-medium px-3 py-2 rounded-lg transition-colors duration-200"
                    >
                      <svg className="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                        <path d="M2.003 5.884L10 9.882l7.997-3.998A2 2 0 0016 4H4a2 2 0 00-1.997 1.884z" />
                        <path d="M18 8.118l-8 4-8-4V14a2 2 0 002 2h12a2 2 0 002-2V8.118z" />
                      </svg>
                      spokojwglowie.kontakt@gmail.com
                    </a>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}-e 

=== ./src/components/map/MapMarker.tsx ===
-e 

=== ./src/components/map/MapFilters.tsx ===
-e 

=== ./src/components/map/MapPopup.tsx ===
-e 

=== ./src/components/mood-entry-form.tsx ===

'use client'

import { useState } from 'react'
import { motion } from 'framer-motion'
import { Button } from '@/components/ui/button'
import { Textarea } from '@/components/ui/textarea'
import { Send, Sparkles } from 'lucide-react'
import { cn } from '@/lib/utils'
import { getMoodLabel, getMoodEmoji } from '@/lib/mood-utils'

interface MoodEntryFormProps {
  currentMood: number
  onSave: (data: { mood: number; note?: string }) => void
  isLoading?: boolean
}

export const MoodEntryForm: React.FC<MoodEntryFormProps> = ({
  currentMood,
  onSave,
  isLoading = false
}) => {
  const [note, setNote] = useState('')
  const [isFocused, setIsFocused] = useState(false)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave({ mood: currentMood, note: note.trim() || undefined })
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      className="w-full max-w-2xl mx-auto space-y-6"
    >
      {/* Nagłówek */}
      <div className="text-center space-y-3">
        <div className="inline-flex items-center gap-2 px-4 py-2 rounded-full bg-white/80 backdrop-blur-sm border border-gray-100">
          <Sparkles className="h-4 w-4 text-blue-500" />
          <span className="text-sm font-medium text-gray-700">Dodaj notatkę do nastroju</span>
        </div>
        <h2 className="text-2xl font-light text-gray-900">
          {getMoodEmoji(currentMood)} {currentMood}% - {getMoodLabel(currentMood)}
        </h2>
      </div>

      {/* Formularz */}
      <form onSubmit={handleSubmit} className="space-y-4">
        <div className="space-y-3">
          <label htmlFor="note" className="text-sm font-medium text-gray-700">
            Notatka (opcjonalnie)
          </label>
          <div className={cn(
            "relative rounded-xl border-2 transition-all duration-200",
            isFocused 
              ? "border-blue-500 bg-blue-50/20 shadow-sm" 
              : "border-gray-200 bg-white hover:border-gray-300"
          )}>
            <Textarea
              id="note"
              value={note}
              onChange={(e) => setNote(e.target.value)}
              onFocus={() => setIsFocused(true)}
              onBlur={() => setIsFocused(false)}
              placeholder="Co wpływa na Twój nastrój? Co czujesz w tym momencie? Co Cię cieszy lub martwi?"
              className="min-h-[120px] resize-none border-0 bg-transparent focus:ring-0 text-gray-700 placeholder-gray-400"
            />
            <div className="absolute bottom-3 right-3">
              <span className={cn(
                "text-xs transition-colors",
                note.length > 400 ? "text-rose-500" : "text-gray-400"
              )}>
                {note.length}/500
              </span>
            </div>
          </div>
        </div>

        <Button
          type="submit"
          className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 py-3 rounded-xl font-medium text-white shadow-lg hover:shadow-xl transition-all duration-200"
          disabled={isLoading}
          size="lg"
        >
          {isLoading ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2" />
              Zapisuję...
            </>
          ) : (
            <>
              <Send className="h-4 w-4 mr-2" />
              Zapisz notatkę i zobacz AI Insights
            </>
          )}
        </Button>
      </form>
    </motion.div>
  )
}-e 

=== ./src/components/friends/RealFirebaseSearch.tsx ===
// src/components/friends/RealFirebaseSearch.tsx
'use client'

import { useState, useRef, useEffect } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { Search, UserPlus, Users, X, Sparkles, Loader2 } from 'lucide-react'
import { firebaseSearchService, type SearchableUser } from '@/lib/simple-friends-search'
import { useAuth } from '@/components/providers/auth-provider'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { cn } from '@/lib/utils'

export function RealFirebaseSearch() {
  const { user: authUser } = useAuth()
  const [query, setQuery] = useState('')
  const [results, setResults] = useState<SearchableUser[]>([])
  const [allUsers, setAllUsers] = useState<SearchableUser[]>([])
  const [isSearching, setIsSearching] = useState(false)
  const [isLoading, setIsLoading] = useState(false)
  const [searchMethod, setSearchMethod] = useState<'firebase' | 'client'>('firebase')
  const inputRef = useRef<HTMLInputElement>(null)

  // Załaduj wszystkich użytkowników przy starcie
  useEffect(() => {
    if (authUser?.uid) {
      loadAllUsers()
    }
  }, [authUser?.uid])

  const loadAllUsers = async () => {
    if (!authUser?.uid) return
    const users = await firebaseSearchService.getAllUsers(authUser.uid)
    setAllUsers(users)
  }

  const handleSearch = async (searchQuery: string) => {
    if (!authUser?.uid) return
    
    setQuery(searchQuery)
    
    if (searchQuery.length < 2) {
      setResults([])
      setIsSearching(false)
      return
    }

    setIsSearching(true)
    setIsLoading(true)

    try {
      let searchResults: SearchableUser[] = []
      
      if (searchMethod === 'firebase') {
        // Prawdziwe wyszukiwanie Firebase
        searchResults = await firebaseSearchService.searchUsers(searchQuery, authUser.uid)
      } else {
        // Wyszukiwanie po stronie klienta (fallback)
        searchResults = allUsers.filter(user =>
          user.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||
          user.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
          user.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
          user.email.toLowerCase().includes(searchQuery.toLowerCase())
        ).slice(0, 10)
      }
      
      setResults(searchResults)
    } catch (error) {
      console.error('Search error:', error)
      // Fallback do wyszukiwania po stronie klienta
      const clientResults = allUsers.filter(user =>
        user.displayName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.firstName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.lastName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        user.email.toLowerCase().includes(searchQuery.toLowerCase())
      ).slice(0, 10)
      setResults(clientResults)
    } finally {
      setIsLoading(false)
    }
  }

  const handleAddFriend = async (friendId: string) => {
    if (!authUser?.uid) return
    
    try {
      // Tutaj dodaj logikę dodawania znajomego do Firestore
      console.log('Dodaję znajomego:', friendId)
      
      // Tymczasowo usuń z wyników
      setResults(prev => prev.filter(user => user.uid !== friendId))
      
      // Pokazuj sukces
      setTimeout(() => {
        console.log('✅ Znajomy dodany pomyślnie!')
      }, 500)
      
    } catch (error) {
      console.error('Error adding friend:', error)
    }
  }

  const clearSearch = () => {
    setQuery('')
    setResults([])
    setIsSearching(false)
    inputRef.current?.focus()
  }

  return (
    <div className="space-y-6">
      {/* Tryb wyszukiwania */}
      <div className="flex gap-2">
        <Button
          variant={searchMethod === 'firebase' ? 'default' : 'outline'}
          size="sm"
          onClick={() => setSearchMethod('firebase')}
          className="text-xs"
        >
          🔥 Firebase Search
        </Button>
        <Button
          variant={searchMethod === 'client' ? 'default' : 'outline'} 
          size="sm"
          onClick={() => setSearchMethod('client')}
          className="text-xs"
        >
          💻 Client Search
        </Button>
      </div>

      {/* Wyszukiwarka */}
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400 h-4 w-4" />
        <Input
          ref={inputRef}
          type="text"
          placeholder={
            searchMethod === 'firebase' 
              ? "Wyszukaj w Firebase po imieniu, nazwisku, email..."
              : "Wyszukaj lokalnie po imieniu, nazwisku, email..."
          }
          value={query}
          onChange={(e) => handleSearch(e.target.value)}
          className="pl-10 pr-10 h-12 rounded-xl border-slate-300 focus:border-blue-500"
        />
        {query && (
          <button
            onClick={clearSearch}
            className="absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-400 hover:text-slate-600"
          >
            <X className="h-4 w-4" />
          </button>
        )}
      </div>

      {/* Status wyszukiwania */}
      {isSearching && (
        <div className="text-sm text-slate-600 flex items-center gap-2">
          {isLoading ? (
            <>
              <Loader2 className="h-4 w-4 animate-spin" />
              Wyszukiwanie w {searchMethod === 'firebase' ? 'Firebase...' : 'lokalnej bazie...'}
            </>
          ) : (
            <>
              <Search className="h-4 w-4" />
              Znaleziono {results.length} wyników
            </>
          )}
        </div>
      )}

      {/* Wyniki wyszukiwania */}
      <AnimatePresence>
        {isSearching && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            className="overflow-hidden"
          >
            <Card>
              <CardHeader className="pb-3">
                <CardTitle className="text-lg flex items-center gap-2">
                  <Search className="h-5 w-5 text-blue-500" />
                  Wyniki wyszukiwania
                  <span className="text-sm font-normal text-slate-500">
                    ({searchMethod === 'firebase' ? 'Firebase' : 'Lokalne'})
                  </span>
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {results.length > 0 ? (
                  results.map((user) => (
                    <UserResult 
                      key={user.uid} 
                      user={user} 
                      onAddFriend={handleAddFriend}
                    />
                  ))
                ) : (
                  <div className="text-center py-8 text-slate-500">
                    {isLoading ? (
                      <div className="flex items-center justify-center gap-2">
                        <Loader2 className="h-4 w-4 animate-spin" />
                        Wyszukiwanie...
                      </div>
                    ) : query.length >= 2 ? (
                      <div>Nie znaleziono użytkowników</div>
                    ) : (
                      <div>Wpisz co najmniej 2 znaki</div>
                    )}
                  </div>
                )}
              </CardContent>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Wszyscy użytkownicy (jeśli nie wyszukujemy) */}
      {!isSearching && allUsers.length > 0 && (
        <Card>
          <CardHeader className="pb-3">
            <CardTitle className="text-lg flex items-center gap-2">
              <Users className="h-5 w-5 text-green-500" />
              Wszyscy użytkownicy ({allUsers.length})
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            {allUsers.slice(0, 5).map((user) => (
              <UserResult 
                key={user.uid} 
                user={user} 
                onAddFriend={handleAddFriend}
              />
            ))}
            {allUsers.length > 5 && (
              <div className="text-center pt-2">
                <Button variant="outline" size="sm">
                  Pokaż więcej ({allUsers.length - 5})
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      )}
    </div>
  )
}

// Komponent pojedynczego użytkownika
function UserResult({ user, onAddFriend }: { user: SearchableUser, onAddFriend: (id: string) => void }) {
  const [isAdding, setIsAdding] = useState(false)

  const handleAdd = async () => {
    setIsAdding(true)
    await onAddFriend(user.uid)
    setIsAdding(false)
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 10 }}
      animate={{ opacity: 1, y: 0 }}
      className="flex items-center justify-between p-4 rounded-xl border border-slate-200 bg-white hover:shadow-md transition-all"
    >
      <div className="flex items-center gap-3">
        <div className="w-10 h-10 rounded-full bg-gradient-to-br from-blue-500 to-purple-500 flex items-center justify-center text-white font-semibold">
          {user.firstName?.[0] || user.displayName?.[0] || 'U'}
        </div>
        <div>
          <div className="font-semibold text-slate-800">
            {user.displayName}
          </div>
          <div className="text-sm text-slate-600">
            {user.email}
          </div>
          <div className="flex gap-2 mt-1">
            <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
              Poziom {user.level}
            </span>
            <span className="text-xs bg-amber-100 text-amber-700 px-2 py-1 rounded-full">
              Streak {user.streak} dni
            </span>
            {user.currentMood && (
              <span className={cn(
                "text-xs px-2 py-1 rounded-full",
                user.currentMood > 70 ? "bg-green-100 text-green-700" :
                user.currentMood > 40 ? "bg-blue-100 text-blue-700" :
                "bg-red-100 text-red-700"
              )}>
                Nastrój {user.currentMood}%
              </span>
            )}
          </div>
        </div>
      </div>
      
      <Button
        onClick={handleAdd}
        disabled={isAdding}
        size="sm"
        className="bg-green-500 hover:bg-green-600"
      >
        {isAdding ? (
          <Loader2 className="h-4 w-4 animate-spin" />
        ) : (
          <>
            <UserPlus className="h-4 w-4 mr-1" />
            Dodaj
          </>
        )}
      </Button>
    </motion.div>
  )
}-e 

=== ./src/components/today-for-you-section.tsx ===

'use client'

import { useState, useEffect, useRef } from 'react'
import { motion, AnimatePresence } from 'framer-motion'
import { cn } from '@/lib/utils'
import { Sparkles, Lightbulb, Brain, TrendingUp, Target, Zap, X, BookOpen, CheckCircle } from 'lucide-react'
import { MoodEntryForm } from '@/components/mood-entry-form'

interface MoodEntry {
  id: string
  mood: number
  note?: string
  date: string
  timestamp: Date
}

interface CircularMoodTrackerProps {
  value: number
  onValueChange: (value: number) => void
  onSaveMood: (data: { mood: number; note?: string }) => Promise<void>
  size?: number
  moodEntries?: MoodEntry[]
  streak?: number
  trend?: number
  consistency?: number
  averageMood?: number
  level?: number
}

interface AIMoodInsights {
  analysis: string
  suggestions: string[]
  pattern: string
  encouragement: string
  specialTip: string
}

const getMoodColor = (value: number) => {
  if (value <= 20) return 'rgba(75, 85, 99, 0.8)'
  if (value <= 40) return 'rgba(59, 130, 246, 0.9)'
  if (value <= 60) return 'rgba(100, 130, 220, 0.9)'
  if (value <= 80) return 'rgba(168, 85, 230, 0.9)'
  return 'rgba(156, 39, 176, 1)'
}

const MoodEmoji = ({ mood }: { mood: number }) => {
  if (mood <= 20) return '😔'
  if (mood <= 40) return '😐'
  if (mood <= 60) return '🙂'
  if (mood <= 80) return '😊'
  return '🤩'
}

export const CircularMoodTracker: React.FC<CircularMoodTrackerProps> = ({
  value,
  onValueChange,
  onSaveMood,
  size = 200,
  moodEntries = [],
  streak = 0,
  trend = 0,
  consistency = 0,
  averageMood = 50,
  level = 1
}) => {
  const [currentMood, setCurrentMood] = useState(value)
  const [isDragging, setIsDragging] = useState(false)
  const [hovered, setHovered] = useState<{id: string, content: string} | null>(null)
  const [isMobile, setIsMobile] = useState(false)
  const [showAISuggestions, setShowAISuggestions] = useState(false)
  const [showMoodForm, setShowMoodForm] = useState(false)
  const [isSaving, setIsSaving] = useState(false)
  const [moodSaved, setMoodSaved] = useState(false)
  const [aiInsights, setAiInsights] = useState<AIMoodInsights | null>(null)
  const [loadingAI, setLoadingAI] = useState(false)
  const ringRef = useRef<HTMLDivElement>(null)
  const modalRef = useRef<HTMLDivElement>(null)

  useEffect(() => {
    setCurrentMood(value)
  }, [value])

  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768)
    }
    checkMobile()
    window.addEventListener('resize', checkMobile)
    return () => window.removeEventListener('resize', checkMobile)
  }, [])

  // Close modals when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
        setShowAISuggestions(false)
      }
    }

    if (showAISuggestions) {
      document.addEventListener('mousedown', handleClickOutside)
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside)
    }
  }, [showAISuggestions])

  // Get AI Insights when showing suggestions
  useEffect(() => {
    if (showAISuggestions && !aiInsights && !loadingAI) {
      fetchAIInsights()
    }
  }, [showAISuggestions])

  const fetchAIInsights = async () => {
    try {
      setLoadingAI(true)
      
      const response = await fetch('/api/ai-mood-insights', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          mood: currentMood,
          streak,
          trend,
          consistency,
          averageMood,
          level,
          moodHistory: moodEntries.slice(0, 14)
        }),
      })

      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`)

      const data = await response.json()
      setAiInsights(data)
      
    } catch (error) {
      console.error('Error fetching AI insights:', error)
      // Fallback insights
      setAiInsights({
        analysis: "Analizuję Twój nastrój w kontekście wszystkich danych...",
        suggestions: [
          "Zrób 5 głębokich oddechów i skup się na chwili obecnej",
          "Zapisz 3 rzeczy za które jesteś wdzięczny dzisiaj",
          "Wyjdź na krótki spacer i zauważ piękno wokół siebie"
        ],
        pattern: `Konsystencja na poziomie ${consistency}% wskazuje na ${getConsistencyDescription(consistency).toLowerCase()}`,
        encouragement: "Twój streak pokazuje zaangażowanie w samoobserwację! 🌟",
        specialTip: "Dopasuj tempo do swojego samopoczucia - słuchaj siebie"
      })
    } finally {
      setLoadingAI(false)
    }
  }

  const handleDragStart = (e: React.MouseEvent | React.TouchEvent) => {
    e.preventDefault()
    setIsDragging(true)
    handleDragMove(e)
  }

  const handleDragMove = (e: React.MouseEvent | React.TouchEvent) => {
    if (!isDragging || !ringRef.current) return
    
    const rect = ringRef.current.getBoundingClientRect()
    const clientX = 'touches' in e ? e.touches[0].clientX : e.clientX
    const clientY = 'touches' in e ? e.touches[0].clientY : e.clientY
    
    const x = clientX - rect.left - rect.width / 2
    const y = clientY - rect.top - rect.height / 2
    let angle = Math.atan2(y, x) * (180 / Math.PI) + 90
    if (angle < 0) angle += 360
    let newMood = Math.round((angle / 360) * 100)
    newMood = Math.min(Math.max(newMood, 0), 100)
    
    setCurrentMood(newMood)
    onValueChange(newMood)
  }

  const handleDragEnd = () => {
    setIsDragging(false)
    setMoodSaved(false) // Reset saved state when mood changes
  }

  const handleSaveMood = async (data: { mood: number; note?: string }) => {
    setIsSaving(true)
    try {
      await onSaveMood(data)
      setMoodSaved(true)
      setShowMoodForm(false)
      // Automatically show AI insights after saving
      setTimeout(() => setShowAISuggestions(true), 500)
    } catch (error) {
      console.error('Error saving mood:', error)
    } finally {
      setIsSaving(false)
    }
  }

  const handleAddNote = () => {
    setShowMoodForm(true)
  }

  useEffect(() => {
    if (isDragging) {
      const handleMove = (e: MouseEvent | TouchEvent) => {
        handleDragMove(e as any)
      }
      const handleEnd = () => handleDragEnd()

      window.addEventListener('mousemove', handleMove)
      window.addEventListener('mouseup', handleEnd)
      window.addEventListener('touchmove', handleMove)
      window.addEventListener('touchend', handleEnd)

      return () => {
        window.removeEventListener('mousemove', handleMove)
        window.removeEventListener('mouseup', handleEnd)
        window.removeEventListener('touchmove', handleMove)
        window.removeEventListener('touchend', handleEnd)
      }
    }
  }, [isDragging])

  const getRingPercentage = () => currentMood / 100
  const recentHistory = [...moodEntries].reverse().slice(0, 7).reverse()

  return (
    <>
      <div className={cn(
        "relative flex flex-col items-center justify-center select-none w-full max-w-[360px] mx-auto p-4 sm:p-5 rounded-2xl",
        "bg-white/80 backdrop-blur-sm",
        "shadow-md border border-gray-100",
        "transition-colors duration-500",
        "touch-none"
      )}>
        {/* Główne pole ringa */}
        <div className="relative w-full aspect-square mb-4">
          <div 
            ref={ringRef}
            className="w-full h-full rounded-full relative cursor-grab active:cursor-grabbing"
            onMouseDown={handleDragStart}
            onTouchStart={handleDragStart}
          >
            <div className="absolute inset-0 rounded-full bg-gray-100/50" />
            
            <div 
              className="absolute inset-0 rounded-full"
              style={{
                background: `conic-gradient(from 0deg, ${getMoodColor(currentMood)} ${getRingPercentage() * 360}deg, transparent ${getRingPercentage() * 360}deg)`,
                clipPath: 'inset(10% 10% 10% 10%)'
              }}
            />
            
            <motion.div
              className="absolute top-0 left-1/2 w-1 h-7 sm:h-8 rounded-t-full bg-white shadow-md"
              style={{ 
                transform: `translateX(-50%) rotate(${currentMood * 3.6}deg)`,
                transformOrigin: '50% 100%'
              }}
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              transition={{ duration: 0.5 }}
            />
            
            {/* Centrum ringa */}
            <div className="absolute inset-0 flex flex-col items-center justify-center rounded-full bg-white/80 backdrop-blur">
              <motion.div
                key={currentMood}
                initial={{ scale: 0.8, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ type: 'spring', stiffness: 500, damping: 30 }}
                className="text-3xl sm:text-4xl font-medium text-gray-900"
              >
                {currentMood}%
              </motion.div>
              <div className="flex items-center mt-1">
                <MoodEmoji mood={currentMood} />
                <span className="ml-1.5 text-xs sm:text-sm text-gray-500">
                  {getMoodLabel(currentMood, isMobile)}
                </span>
              </div>
            </div>
          </div>
        </div>

        {/* Action Buttons */}
        <div className="flex gap-3 w-full mb-4">
          <button
            onClick={handleAddNote}
            disabled={isSaving || moodSaved}
            className={cn(
              "flex-1 py-3 px-4 rounded-xl font-medium transition-all duration-200 flex items-center justify-center gap-2",
              moodSaved 
                ? "bg-green-50 text-green-700 border border-green-200" 
                : "bg-blue-500 text-white hover:bg-blue-600 shadow-lg hover:shadow-xl"
            )}
          >
            {moodSaved ? (
              <>
                <CheckCircle className="h-4 w-4" />
                Notatka zapisana
              </>
            ) : (
              <>
                <BookOpen className="h-4 w-4" />
                Dodaj notatkę
              </>
            )}
          </button>
          
          <button
            onClick={() => setShowAISuggestions(true)}
            className="p-3 rounded-xl bg-gradient-to-r from-blue-50 to-purple-50 hover:from-blue-100 hover:to-purple-100 border border-blue-200 transition-all duration-300 shadow-sm"
          >
            <Sparkles className="h-5 w-5 text-blue-500" />
          </button>
        </div>

        {/* Historia nastrojów */}
        <div className="w-full mb-4">
          <div className="flex items-center justify-between mb-2">
            <span className="text-xs sm:text-sm font-medium text-gray-700">Ostatnie 7 dni</span>
            <span className="text-xs text-gray-500">
              {trend > 0 ? '📈' : trend < 0 ? '📉' : '➡️'} {Math.abs(trend)}%
            </span>
          </div>
          
          <div className="w-full h-12 flex items-center">
            <div className="w-full overflow-x-auto px-1">
              <div className="flex items-center justify-between min-w-max h-full space-x-1">
                {recentHistory.map((entry, index) => {
                  const isHovered = hovered?.id === entry.id
                  
                  return (
                    <div 
                      key={entry.id}
                      className="relative flex flex-col items-center flex-shrink-0"
                      onMouseEnter={() => setHovered({
                        id: entry.id,
                        content: `${entry.mood}% • ${formatDate(entry.timestamp)}${entry.note ? `\n${entry.note}` : ''}`
                      })}
                      onMouseLeave={() => setHovered(null)}
                    >
                      <motion.div
                        className="w-2.5 h-2.5 rounded-full mb-1.5"
                        style={{ 
                          backgroundColor: getMoodColor(entry.mood),
                          boxShadow: isHovered ? `0 0 0 4px ${getMoodColor(entry.mood)}20` : 'none'
                        }}
                        initial={{ scale: 0.8, opacity: 0.7 }}
                        animate={{ 
                          scale: isHovered ? 1.3 : 1,
                          opacity: 1
                        }}
                        transition={{ type: 'spring', stiffness: 400, damping: 20 }}
                      />
                      
                      <AnimatePresence>
                        {isHovered && (
                          <motion.div
                            initial={{ opacity: 0, y: -10 }}
                            animate={{ opacity: 1, y: -15 }}
                            exit={{ opacity: 0, y: -10 }}
                            className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-white text-gray-800 text-xs px-2 py-1 rounded shadow-sm border border-gray-100 whitespace-normal max-w-[180px] text-center z-40"
                          >
                            {entry.mood}%
                          </motion.div>
                        )}
                      </AnimatePresence>
                    </div>
                  )
                })}
              </div>
            </div>
          </div>
        </div>

        {/* Wizualizacja trendu */}
        <div className="w-full h-16 mb-2">
          <div className="w-full h-px bg-gray-200" />
          <div className="w-full h-[80%] flex items-end justify-between px-1">
            {recentHistory.map((entry, index) => {
              const height = `${(entry.mood / 100) * 50}px`;
              const isToday = index === recentHistory.length - 1
              
              return (
                <div key={entry.id} className="flex flex-col items-center w-5 flex-shrink-0">
                  <motion.div
                    className="w-1.5 rounded-t-full"
                    style={{ 
                      backgroundColor: getMoodColor(entry.mood),
                      height: height
                    }}
                    initial={{ height: 0 }}
                    animate={{ height: height }}
                    transition={{ duration: 0.6, delay: index * 0.05 }}
                  />
                  {isToday && (
                    <motion.div
                      className="w-2 h-2 rounded-full bg-white mt-1 shadow-sm"
                      style={{ backgroundColor: getMoodColor(entry.mood) }}
                      initial={{ scale: 0 }}
                      animate={{ scale: 1 }}
                      transition={{ delay: 0.5 }}
                    />
                  )}
                </div>
              )
            })}
          </div>
        </div>

        {/* Statystyki */}
        <div className="w-full grid grid-cols-3 gap-2 text-xs">
          <div className="text-center p-2 bg-blue-50 rounded-lg">
            <div className="font-semibold text-blue-700">{streak}</div>
            <div className="text-blue-600">dni</div>
          </div>
          <div className="text-center p-2 bg-green-50 rounded-lg">
            <div className={`font-semibold ${trend > 0 ? 'text-green-700' : trend < 0 ? 'text-red-700' : 'text-gray-700'}`}>
              {trend > 0 ? '+' : ''}{trend}%
            </div>
            <div className="text-gray-600">trend</div>
          </div>
          <div className="text-center p-2 bg-purple-50 rounded-lg">
            <div className="font-semibold text-purple-700">{consistency}%</div>
            <div className="text-purple-600">konsyst.</div>
          </div>
        </div>
      </div>

      {/* Mood Entry Form */}
      <MoodEntryForm
        isOpen={showMoodForm}
        currentMood={currentMood}
        onSave={handleSaveMood}
        onClose={() => setShowMoodForm(false)}
        isLoading={isSaving}
      />

      {/* AI Insights Modal */}
      <AnimatePresence>
        {showAISuggestions && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/20 backdrop-blur-sm z-50"
              onClick={() => setShowAISuggestions(false)}
            />
            
            <motion.div
              ref={modalRef}
              initial={{ opacity: 0, scale: 0.9, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.9, y: 20 }}
              transition={{ type: "spring", damping: 25, stiffness: 300 }}
              className="fixed top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-50 w-[95vw] max-w-2xl max-h-[85vh] bg-white rounded-3xl shadow-2xl border border-gray-200 flex flex-col overflow-hidden"
            >
              {/* Header */}
              <div className="flex items-center justify-between p-6 border-b border-gray-100 bg-gradient-to-r from-blue-50 to-purple-50 flex-shrink-0">
                <div className="flex items-center gap-3">
                  <div className="p-2 bg-white rounded-xl shadow-sm">
                    <Brain className="h-6 w-6 text-purple-500" />
                  </div>
                  <div>
                    <h3 className="font-bold text-gray-900 text-lg">AI Analiza Twojego Nastroju</h3>
                    <p className="text-sm text-gray-600">Spersonalizowane insights bazujące na Twoich danych</p>
                  </div>
                </div>
                <button 
                  onClick={() => setShowAISuggestions(false)}
                  className="p-2 hover:bg-white rounded-xl transition-colors"
                >
                  <X className="h-5 w-5 text-gray-400 hover:text-gray-600" />
                </button>
              </div>
              
              {/* Scrollable Content */}
              <div className="flex-1 overflow-y-auto p-6">
                {loadingAI ? (
                  <div className="space-y-4">
                    <div className="flex items-center gap-3">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-500" />
                      <div>
                        <div className="h-4 bg-gray-200 rounded w-32 mb-2 animate-pulse"></div>
                        <div className="h-3 bg-gray-200 rounded w-48 animate-pulse"></div>
                      </div>
                    </div>
                    {[1, 2, 3].map(i => (
                      <div key={i} className="animate-pulse">
                        <div className="h-4 bg-gray-200 rounded w-3/4 mb-2"></div>
                        <div className="h-3 bg-gray-200 rounded w-full mb-3"></div>
                      </div>
                    ))}
                  </div>
                ) : aiInsights ? (
                  <div className="space-y-6">
                    {/* Analiza */}
                    <div className="p-4 bg-blue-50 rounded-xl border border-blue-100">
                      <div className="flex items-start gap-3">
                        <Target className="h-5 w-5 text-blue-500 mt-0.5 flex-shrink-0" />
                        <div>
                          <p className="font-semibold text-blue-900 mb-2">Analiza Nastroju</p>
                          <p className="text-blue-800 leading-relaxed">{aiInsights.analysis}</p>
                        </div>
                      </div>
                    </div>

                    {/* Sugestie */}
                    <div>
                      <p className="font-semibold text-gray-900 mb-3 flex items-center gap-2">
                        <Zap className="h-5 w-5 text-yellow-500" />
                        Spersonalizowane Sugestie
                      </p>
                      <div className="space-y-3">
                        {aiInsights.suggestions.map((suggestion, index) => (
                          <div key={index} className="flex items-start gap-3 p-3 rounded-lg bg-gray-50 hover:bg-gray-100 transition-colors border border-gray-100">
                            <Lightbulb className="h-4 w-4 text-yellow-500 mt-0.5 flex-shrink-0" />
                            <span className="text-gray-700 leading-relaxed">{suggestion}</span>
                          </div>
                        ))}
                      </div>
                    </div>

                    {/* Wzorzec i Encouragement */}
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                      <div className="p-3 bg-green-50 rounded-lg border border-green-100">
                        <p className="text-sm font-semibold text-green-800 mb-1">🎯 Wykryty Wzorzec</p>
                        <p className="text-sm text-green-700">{aiInsights.pattern}</p>
                      </div>
                      <div className="p-3 bg-purple-50 rounded-lg border border-purple-100">
                        <p className="text-sm font-semibold text-purple-800 mb-1">💫 Motywacja</p>
                        <p className="text-sm text-purple-700">{aiInsights.encouragement}</p>
                      </div>
                    </div>

                    {/* Special Tip */}
                    {aiInsights.specialTip && (
                      <div className="p-3 bg-orange-50 rounded-lg border border-orange-100">
                        <p className="text-sm font-semibold text-orange-800 mb-1">💡 Specjalna Rada</p>
                        <p className="text-sm text-orange-700">{aiInsights.specialTip}</p>
                      </div>
                    )}

                    {/* Dane użytkownika */}
                    <div className="pt-4 border-t border-gray-100">
                      <p className="text-xs font-medium text-gray-700 mb-2">Twoje Statystyki:</p>
                      <div className="grid grid-cols-2 sm:grid-cols-4 gap-2 text-xs">
                        <div className="text-center p-2 bg-blue-50 rounded-lg">
                          <div className="font-semibold text-blue-700">{streak}</div>
                          <div className="text-blue-600">dni streak</div>
                        </div>
                        <div className="text-center p-2 bg-green-50 rounded-lg">
                          <div className="font-semibold text-green-700">{averageMood}%</div>
                          <div className="text-green-600">średnia</div>
                        </div>
                        <div className="text-center p-2 bg-purple-50 rounded-lg">
                          <div className="font-semibold text-purple-700">{consistency}%</div>
                          <div className="text-purple-600">konsystencja</div>
                        </div>
                        <div className="text-center p-2 bg-gray-50 rounded-lg">
                          <div className={`font-semibold ${trend > 0 ? 'text-green-700' : trend < 0 ? 'text-red-700' : 'text-gray-700'}`}>
                            {trend > 0 ? '+' : ''}{trend}%
                          </div>
                          <div className="text-gray-600">trend</div>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : null}
              </div>
              
              {/* Fixed Footer */}
              <div className="p-4 border-t border-gray-100 bg-gray-50 flex-shrink-0">
                <button
                  onClick={() => setShowAISuggestions(false)}
                  className="w-full py-3 bg-blue-500 text-white rounded-xl hover:bg-blue-600 transition-colors font-medium"
                >
                  Zamknij
                </button>
              </div>
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  )
}

function getMoodLabel(mood: number, isMobile: boolean): string {
  if (mood <= 20) return isMobile ? 'B. niski' : 'Bardzo niski'
  if (mood <= 40) return isMobile ? 'Niski' : 'Niski'
  if (mood <= 60) return isMobile ? 'Neutralny' : 'Neutralny'
  if (mood <= 80) return isMobile ? 'Wysoki' : 'Wysoki'
  return isMobile ? 'B. wysoki' : 'Bardzo wysoki'
}

function formatDate(date: Date): string {
  const today = new Date()
  const yesterday = new Date(today)
  yesterday.setDate(yesterday.getDate() - 1)
  
  if (date.toDateString() === today.toDateString()) return 'Dziś'
  if (date.toDateString() === yesterday.toDateString()) return 'Wcz.'
  
  return date.toLocaleDateString('pl-PL', { 
    day: 'numeric', 
    month: 'short' 
  }).replace(' ', '')
}

function getConsistencyDescription(consistency: number): string {
  if (consistency >= 80) return 'Wysoka stabilność'
  if (consistency >= 60) return 'Umiarkowana stabilność'
  if (consistency >= 40) return 'Zmienne emocje'
  return 'Duża zmienność'
}-e 

=== ./src/hooks/useUser.js ===
import { useState, useEffect } from 'react';

export const useUser = () => {
  const [user, setUser] = useState(null);
  const [readArticles, setReadArticles] = useState(new Set());

  useEffect(() => {
    // W przyszłości: pobieranie z localStorage/API
    const savedUser = localStorage.getItem('user');
    const savedReadArticles = localStorage.getItem('readArticles');
    
    if (savedUser) setUser(JSON.parse(savedUser));
    if (savedReadArticles) setReadArticles(new Set(JSON.parse(savedReadArticles)));
  }, []);

  const addPoints = (points) => {
    setUser(prev => {
      const updatedUser = { 
        ...prev, 
        points: (prev?.points || 0) + points 
      };
      localStorage.setItem('user', JSON.stringify(updatedUser));
      return updatedUser;
    });
  };

  const markArticleAsRead = (articleId) => {
    setReadArticles(prev => {
      const updated = new Set([...prev, articleId]);
      localStorage.setItem('readArticles', JSON.stringify([...updated]));
      return updated;
    });
  };

  const canReadArticle = (articleId) => !readArticles.has(articleId);

  const readArticle = (articleId) => {
    if (canReadArticle(articleId)) {
      markArticleAsRead(articleId);
      addPoints(10);
      return true;
    }
    return false;
  };

  return {
    user,
    readArticles,
    addPoints,
    readArticle,
    canReadArticle,
    isAdmin: user?.role === 'admin'
  };
};-e 

=== ./src/hooks/useAdminArticles.ts ===
// src/hooks/useAdminArticles.ts
import { useState, useEffect } from 'react';
import { db } from '@/lib/firebase';
import {
  collection,
  addDoc,
  updateDoc,
  deleteDoc,
  doc,
  onSnapshot,
  query,
  Timestamp,
} from 'firebase/firestore';

export type Article = {
  id: string;
  title: string;
  excerpt: string;
  content: string;
  status: 'draft' | 'published';
  createdBy: string;
  createdAt: Date;
  updatedAt?: Date;
  views: number;
  likes: number;
  isFeatured: boolean;
  isTrending: boolean;
  category: string;
  tags: string[];
  readTime: number;
};

export const useAdminArticles = (adminUid: string) => {
  const [articles, setArticles] = useState<Article[]>([]);
  const [loading, setLoading] = useState(true);

  // Nasłuchiwanie zmian w artykułach
  useEffect(() => {
    const q = query(collection(db, 'articles'));
    const unsubscribe = onSnapshot(q, (snapshot) => {
      const list: Article[] = [];
      snapshot.forEach((doc) => {
        const data = doc.data();
        list.push({
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate() || new Date(),
          updatedAt: data.updatedAt?.toDate(),
        } as Article);
      });
      setArticles(list);
      setLoading(false);
    }, (error) => {
      console.error('Błąd ładowania artykułów:', error);
      setLoading(false);
    });

    return () => unsubscribe();
  }, []);

  // Dodawanie artykułu
  const addArticle = async (data: Omit<Article, 'id' | 'createdAt' | 'createdBy'>) => {
    try {
      const docRef = await addDoc(collection(db, 'articles'), {
        ...data,
        createdBy: adminUid,
        createdAt: Timestamp.now(),
        views: 0,
        likes: 0,
        isFeatured: false,
        isTrending: false,
      });
      return docRef.id;
    } catch (err) {
      console.error('Błąd dodawania artykułu:', err);
      throw err;
    }
  };

  // Aktualizacja artykułu
  const updateArticle = async (id: string, data: Partial<Article>) => {
    try {
      await updateDoc(doc(db, 'articles', id), {
        ...data,
        updatedAt: Timestamp.now(),
      });
    } catch (err) {
      console.error('Błąd aktualizacji artykułu:', err);
      throw err;
    }
  };

  // Usuwanie artykułu
  const deleteArticle = async (id: string) => {
    try {
      await deleteDoc(doc(db, 'articles', id));
    } catch (err) {
      console.error('Błąd usuwania artykułu:', err);
      throw err;
    }
  };

  return {
    articles,
    loading,
    addArticle,
    updateArticle,
    deleteArticle,
  };
};-e 

=== ./src/hooks/useArticles.ts ===
// src/hooks/useArticles.ts
import { useState, useEffect } from 'react'
import { db, storage } from '@/lib/firebase'
import {
  collection,
  addDoc,
  onSnapshot,
  query,
  where,
  doc,
  updateDoc,
  deleteDoc,
  Timestamp,
} from 'firebase/firestore'
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage'

// ✅ Typ artykułu – imageUrl jest opcjonalne
export type Article = {
  id: string
  title: string
  excerpt: string
  content: string
  category: string
  tags: string[]
  readTime: number
  status: 'draft' | 'published'
  isFeatured: boolean
  isTrending: boolean
  views: number
  likes: number
  createdBy: string
  createdAt: Date
  imageUrl?: string // opcjonalne
}

// ✅ Główny hook
export const useArticles = (role?: 'user' | 'admin', uid?: string) => {
  const [articles, setArticles] = useState<Article[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    if (!uid) return

    const q = role === 'admin'
      ? query(collection(db, 'articles'))
      : query(collection(db, 'articles'), where('status', '==', 'published'))

    const unsubscribe = onSnapshot(q, (snapshot) => {
      const list: Article[] = []
      snapshot.forEach((doc) => {
        const data = doc.data()
        list.push({
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate() || new Date(),
        } as Article)
      })
      setArticles(list)
      setLoading(false)
    })

    return () => unsubscribe()
  }, [role, uid])

  // ✅ DODAWANIE ARTYKUŁU
  const addArticle = async (
    data: Omit<Article, 'id' | 'createdAt' | 'createdBy' | 'imageUrl'>,
    imageFile?: File
  ) => {
    if (!uid) {
      throw new Error('Brak UID użytkownika')
    }

    let imageUrl: string | undefined = undefined

    if (imageFile) {
      const imageRef = ref(storage, `articles/${uid}/${Date.now()}_${imageFile.name}`)
      const snapshot = await uploadBytes(imageRef, imageFile)
      imageUrl = await getDownloadURL(snapshot.ref)
    }

    const articleData: any = {
      ...data,
      createdBy: uid,
      createdAt: Timestamp.now(),
      views: 0,
      likes: 0,
    }

    if (imageUrl !== undefined) {
      articleData.imageUrl = imageUrl
    }

    const docRef = await addDoc(collection(db, 'articles'), articleData)
    return docRef.id
  }

  // ✅ EDYCJA ARTYKUŁU
  const updateArticle = async (
    id: string,
    data: Partial<Omit<Article, 'id' | 'createdAt' | 'createdBy'>>,
    newImageFile?: File
  ) => {
    if (!uid) {
      throw new Error('Brak UID użytkownika')
    }

    let imageUrl = data.imageUrl // zachowaj istniejący URL, jeśli nie zmieniamy obrazka

    // Jeśli przesłano NOWY obrazek
    if (newImageFile) {
      const imageRef = ref(storage, `articles/${uid}/${Date.now()}_${newImageFile.name}`)
      const snapshot = await uploadBytes(imageRef, newImageFile)
      imageUrl = await getDownloadURL(snapshot.ref)
    }

    // Aktualizujemy dokument – imageUrl może być nowy, stary lub undefined
    await updateDoc(doc(db, 'articles', id), {
      ...data,
      imageUrl, // undefined jest OK – Firestore po prostu nie zaktualizuje tego pola
      updatedAt: Timestamp.now(),
    })
  }

  // ✅ USUWANIE ARTYKUŁU
  const deleteArticle = async (id: string) => {
    await deleteDoc(doc(db, 'articles', id))
  }

  return { articles, loading, addArticle, updateArticle, deleteArticle }
}-e 

=== ./src/lib/mood-utils.ts ===

export function getMoodLabel(mood: number): string {
  if (mood <= 20) return 'B. niski'
  if (mood <= 40) return 'Niski'
  if (mood <= 60) return 'Neutralny'
  if (mood <= 80) return 'Wysoki'
  return 'B. wysoki'
}

export function getMoodEmoji(mood: number): string {
  if (mood <= 20) return '😔'
  if (mood <= 40) return '😐'
  if (mood <= 60) return '🙂'
  if (mood <= 80) return '😊'
  return '🤩'
}

export function getMoodDescription(mood: number): string {
  if (mood <= 20) return 'Potrzebujesz wsparcia i troski'
  if (mood <= 40) return 'Czas na łagodną opiekę nad sobą'
  if (mood <= 60) return 'Równowaga i spokój'
  if (mood <= 80) return 'Energia i radość'
  return 'Pełnia szczęścia i spełnienia'
}

export function getMoodColor(value: number): string {
  if (value <= 20) return 'rgba(75, 85, 99, 0.8)'
  if (value <= 40) return 'rgba(59, 130, 246, 0.9)'
  if (value <= 60) return 'rgba(100, 130, 220, 0.9)'
  if (value <= 80) return 'rgba(168, 85, 230, 0.9)'
  return 'rgba(156, 39, 176, 1)'
}-e 

=== ./src/lib/friends-service.ts ===
// src/lib/friends-service.ts
import { 
  collection, 
  doc, 
  addDoc, 
  updateDoc, 
  deleteDoc, 
  query, 
  where, 
  orderBy, 
  getDocs,
  onSnapshot,
  serverTimestamp 
} from 'firebase/firestore'
import { db } from '@/lib/firebase'
import { FriendRequest, Friendship, FriendActivity } from '@/types/user'

export const friendsService = {
  // Wysyłanie zaproszenia
  async sendFriendRequest(fromUserId: string, toUserEmail: string) {
    // Najpierw znajdź użytkownika po emailu
    const usersQuery = query(
      collection(db, 'users'),
      where('email', '==', toUserEmail.toLowerCase())
    )
    const userSnapshot = await getDocs(usersQuery)
    
    if (userSnapshot.empty) {
      throw new Error('Nie znaleziono użytkownika o podanym adresie email')
    }

    const toUser = userSnapshot.docs[0]
    const toUserId = toUser.id
    const toUserData = toUser.data()

    // Sprawdź czy zaproszenie już istnieje
    const existingRequestQuery = query(
      collection(db, 'friendRequests'),
      where('fromUserId', '==', fromUserId),
      where('toUserId', '==', toUserId),
      where('status', 'in', ['pending', 'accepted'])
    )
    const existingRequest = await getDocs(existingRequestQuery)

    if (!existingRequest.empty) {
      throw new Error('Zaproszenie do tej osoby już istnieje')
    }

    // Pobierz dane nadawcy
    const fromUserDoc = await getDocs(doc(db, 'users', fromUserId))
    const fromUserData = fromUserDoc.data()

    // Utwórz zaproszenie
    const request: Omit<FriendRequest, 'id'> = {
      fromUserId,
      toUserId,
      fromUserName: fromUserData?.displayName || fromUserData?.email,
      toUserName: toUserData?.displayName || toUserData?.email,
      status: 'pending',
      createdAt: new Date(),
      updatedAt: new Date()
    }

    await addDoc(collection(db, 'friendRequests'), request)
  },

  // Akceptowanie zaproszenia
  async acceptFriendRequest(requestId: string) {
    const requestRef = doc(db, 'friendRequests', requestId)
    const requestDoc = await getDocs(requestRef)
    const request = requestDoc.data() as FriendRequest

    if (!request) throw new Error('Zaproszenie nie istnieje')

    // Aktualizuj status zaproszenia
    await updateDoc(requestRef, {
      status: 'accepted',
      updatedAt: serverTimestamp()
    })

    // Utwórz przyjaźń dla obu użytkowników
    const friendship1: Omit<Friendship, 'id'> = {
      userId: request.fromUserId,
      friendId: request.toUserId,
      friendName: request.toUserName,
      createdAt: new Date(),
      moodVisibility: 'average',
      streak: 0
    }

    const friendship2: Omit<Friendship, 'id'> = {
      userId: request.toUserId,
      friendId: request.fromUserId,
      friendName: request.fromUserName,
      createdAt: new Date(),
      moodVisibility: 'average',
      streak: 0
    }

    await Promise.all([
      addDoc(collection(db, 'friendships'), friendship1),
      addDoc(collection(db, 'friendships'), friendship2)
    ])
  },

  // Odrzucanie zaproszenia
  async rejectFriendRequest(requestId: string) {
    const requestRef = doc(db, 'friendRequests', requestId)
    await updateDoc(requestRef, {
      status: 'rejected',
      updatedAt: serverTimestamp()
    })
  },

  // Usuwanie przyjaciela
  async removeFriend(friendshipId: string) {
    const friendshipRef = doc(db, 'friendships', friendshipId)
    const friendshipDoc = await getDocs(friendshipRef)
    const friendship = friendshipDoc.data() as Friendship

    if (!friendship) return

    // Znajdź i usuń obie strony przyjaźni
    const friendshipsQuery = query(
      collection(db, 'friendships'),
      where('userId', 'in', [friendship.userId, friendship.friendId]),
      where('friendId', 'in', [friendship.userId, friendship.friendId])
    )

    const friendshipsSnapshot = await getDocs(friendshipsQuery)
    const deletePromises = friendshipsSnapshot.docs.map(doc =>
      deleteDoc(doc.ref)
    )

    await Promise.all(deletePromises)
  },

  // Pobieranie listy przyjaciół
  async getFriends(userId: string): Promise<Friendship[]> {
    const friendsQuery = query(
      collection(db, 'friendships'),
      where('userId', '==', userId),
      orderBy('createdAt', 'desc')
    )

    const snapshot = await getDocs(friendsQuery)
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })) as Friendship[]
  },

  // Pobieranie zaproszeń
  async getFriendRequests(userId: string): Promise<FriendRequest[]> {
    const requestsQuery = query(
      collection(db, 'friendRequests'),
      where('toUserId', '==', userId),
      where('status', '==', 'pending'),
      orderBy('createdAt', 'desc')
    )

    const snapshot = await getDocs(requestsQuery)
    return snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    })) as FriendRequest[]
  },

  // Subskrypcja przyjaciół (real-time)
  subscribeToFriends(userId: string, callback: (friends: Friendship[]) => void) {
    const friendsQuery = query(
      collection(db, 'friendships'),
      where('userId', '==', userId),
      orderBy('createdAt', 'desc')
    )

    return onSnapshot(friendsQuery, (snapshot) => {
      const friends = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      })) as Friendship[]
      callback(friends)
    })
  }
}-e 

=== ./src/lib/firebase.ts ===
// src/lib/firebase.ts
import { initializeApp } from 'firebase/app'
import { getAuth } from 'firebase/auth'
import { getFirestore } from 'firebase/firestore'
import { getStorage } from 'firebase/storage' // DODAJ

const firebaseConfig = {
  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,
  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,
  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID
}

const app = initializeApp(firebaseConfig)
export const auth = getAuth(app)
export const db = getFirestore(app)
export const storage = getStorage(app) // DODAJ-e 

=== ./src/lib/user-service.ts ===
import { 
  collection, 
  doc, 
  getDoc, 
  getDocs, 
  query, 
  where, 
  updateDoc,
  addDoc,
  deleteDoc,
  onSnapshot,
  serverTimestamp,
  setDoc
} from 'firebase/firestore'
import { ref, uploadBytes, getDownloadURL } from 'firebase/storage'
import { db, storage } from '@/lib/firebase'
import { firebaseSearchService } from './firebase-search-service'

export interface UserProfile {
  uid: string
  email: string
  displayName: string
  firstName?: string
  lastName?: string
  avatarUrl?: string
  friends: string[]
  streak: number
  level: number
  xp: number
  consistency: number
  currentMood?: number
  lastMoodUpdate?: Date
  moodEntries: any[]
  createdAt: Date
  updatedAt: Date
  bio?: string
}

export interface FriendRequest {
  id: string
  fromUserId: string
  toUserId: string
  status: 'pending' | 'accepted' | 'rejected'
  createdAt: Date
}

const userService = {
  async initializeUserProfile(uid: string, email: string, displayName?: string): Promise<UserProfile> {
    const userProfile: UserProfile = {
      uid,
      email,
      displayName: displayName || email.split('@')[0],
      firstName: displayName?.split(' ')[0] || '',
      lastName: displayName?.split(' ')[1] || '',
      friends: [],
      streak: 0,
      level: 1,
      xp: 0,
      consistency: 0,
      moodEntries: [],
      createdAt: new Date(),
      updatedAt: new Date()
    }

    await setDoc(doc(db, 'users', uid), userProfile)
    console.log('✅ Nowy profil utworzony:', userProfile.displayName)
    
    return userProfile
  },

  async getUserProfile(uid: string): Promise<UserProfile | null> {
    try {
      const userDoc = await getDoc(doc(db, 'users', uid))
      
      if (!userDoc.exists()) {
        return null
      }
      
      const data = userDoc.data()
      
      return { 
        uid, 
        ...data,
        createdAt: data.createdAt?.toDate() || new Date(),
        updatedAt: data.updatedAt?.toDate() || new Date(),
        lastMoodUpdate: data.lastMoodUpdate?.toDate()
      } as UserProfile
    } catch (error) {
      console.error('Błąd pobierania profilu:', error)
      return null
    }
  },

  // ✅ POPRAWIONE - używa firebaseSearchService
  async findUsersByName(searchTerm: string, currentUserId: string): Promise<UserProfile[]> {
    try {
      if (!searchTerm.trim() || searchTerm.length < 2) {
        return []
      }

      console.log(`🔍 Szukam w Firebase: "${searchTerm}"`)
      
      const searchResults = await firebaseSearchService.searchUsers(searchTerm, currentUserId)
      
      const userProfiles = await Promise.all(
        searchResults.map(async (user) => {
          const fullProfile = await this.getUserProfile(user.uid)
          return fullProfile || {
            uid: user.uid,
            email: user.email,
            displayName: user.displayName,
            firstName: user.firstName,
            lastName: user.lastName,
            avatarUrl: user.avatarUrl,
            friends: [],
            streak: user.streak,
            level: user.level,
            xp: 0,
            consistency: 0,
            moodEntries: [],
            createdAt: new Date(),
            updatedAt: new Date()
          }
        })
      )
      
      return userProfiles.filter(Boolean) as UserProfile[]
    } catch (error) {
      console.error('Błąd wyszukiwania użytkowników:', error)
      return []
    }
  },

  async findUserById(uid: string): Promise<UserProfile | null> {
    try {
      return await this.getUserProfile(uid)
    } catch (error) {
      console.error('Błąd wyszukiwania użytkownika po ID:', error)
      return null
    }
  },

  async updateUserProfile(uid: string, updates: Partial<UserProfile>): Promise<void> {
    try {
      const userRef = doc(db, 'users', uid)
      await updateDoc(userRef, {
        ...updates,
        updatedAt: serverTimestamp()
      })
      console.log('✅ Profil zaktualizowany:', updates)
    } catch (error) {
      console.error('Błąd aktualizacji profilu:', error)
      throw error
    }
  },

  async uploadAvatar(uid: string, file: File): Promise<string> {
    const storageRef = ref(storage, `avatars/${uid}/${file.name}`)
    const snapshot = await uploadBytes(storageRef, file)
    const downloadURL = await getDownloadURL(snapshot.ref)
    
    await this.updateUserProfile(uid, { avatarUrl: downloadURL })
    
    return downloadURL
  },

  async getUserStats(userId: string): Promise<{
    streak: number;
    moodEntries: number;
    consistency: number;
    friends: number;
  }> {
    try {
      const user = await this.getUserProfile(userId)
      if (!user) {
        return {
          streak: 0,
          moodEntries: 0,
          consistency: 0,
          friends: 0
        }
      }

      const moodEntries = user.moodEntries || []
      const totalEntries = moodEntries.length
      
      let streak = 0
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      
      if (moodEntries.length > 0) {
        const sortedEntries = [...moodEntries].sort((a, b) => 
          new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime()
        )
        
        const latestEntry = sortedEntries[0]
        const latestEntryDate = new Date(latestEntry.timestamp)
        latestEntryDate.setHours(0, 0, 0, 0)
        
        const isToday = latestEntryDate.getTime() === today.getTime()
        
        if (isToday) {
          streak = 1
          for (let i = 1; i < sortedEntries.length; i++) {
            const currentEntryDate = new Date(sortedEntries[i].timestamp)
            currentEntryDate.setHours(0, 0, 0, 0)
            
            const expectedDate = new Date(today)
            expectedDate.setDate(expectedDate.getDate() - i)
            
            if (currentEntryDate.getTime() === expectedDate.getTime()) {
              streak++
            } else {
              break
            }
          }
        }
      }

      const last30Days = 30
      let entriesLast30Days = 0
      const uniqueDays = new Set()
      
      moodEntries.forEach(entry => {
        const entryDate = new Date(entry.timestamp)
        const diffTime = today.getTime() - entryDate.getTime()
        const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24))
        
        if (diffDays < last30Days) {
          const dateKey = entryDate.toDateString()
          if (!uniqueDays.has(dateKey)) {
            uniqueDays.add(dateKey)
            entriesLast30Days++
          }
        }
      })
      
      const consistency = last30Days > 0 
        ? Math.round((entriesLast30Days / last30Days) * 100)
        : 0

      const friendsCount = user?.friends?.length || 0

      return {
        streak,
        moodEntries: totalEntries,
        consistency,
        friends: friendsCount
      }
    } catch (error) {
      console.error('Błąd pobierania statystyk:', error)
      return {
        streak: 0,
        moodEntries: 0,
        consistency: 0,
        friends: 0
      }
    }
  },

  async sendFriendRequest(fromUserId: string, toUserId: string): Promise<void> {
    if (fromUserId === toUserId) {
      throw new Error('Nie możesz dodać siebie jako znajomego')
    }

    const toUser = await this.findUserById(toUserId)
    if (!toUser) {
      throw new Error('Nie znaleziono użytkownika')
    }

    const existingRequest = await this.checkExistingRequest(fromUserId, toUserId)
    if (existingRequest) {
      throw new Error('Zaproszenie do tego użytkownika już istnieje')
    }

    const fromUser = await this.findUserById(fromUserId)
    if (!fromUser) {
      throw new Error('Nie znaleziono Twojego profilu')
    }

    if (fromUser.friends?.includes(toUserId)) {
      throw new Error('Już jesteście znajomymi')
    }

    const request: Omit<FriendRequest, 'id'> = {
      fromUserId,
      toUserId,
      status: 'pending',
      createdAt: new Date()
    }

    await addDoc(collection(db, 'friendRequests'), request)
    console.log(`✅ Zaproszenie wysłane od ${fromUserId} do ${toUserId}`)
  },

  async checkExistingRequest(fromUserId: string, toUserId: string): Promise<boolean> {
    const requestsQuery = query(
      collection(db, 'friendRequests'),
      where('fromUserId', '==', fromUserId),
      where('toUserId', '==', toUserId),
      where('status', '==', 'pending')
    )
    const snapshot = await getDocs(requestsQuery)
    return !snapshot.empty
  },

  async acceptFriendRequest(requestId: string, currentUserId: string): Promise<void> {
    const requestRef = doc(db, 'friendRequests', requestId)
    const requestDoc = await getDoc(requestRef)
    
    if (!requestDoc.exists()) {
      throw new Error('Zaproszenie nie istnieje')
    }

    const request = requestDoc.data() as FriendRequest

    const fromUser = await this.findUserById(request.fromUserId)
    const toUser = await this.findUserById(request.toUserId)

    if (!fromUser || !toUser) {
      throw new Error('Nie znaleziono użytkowników')
    }

    await Promise.all([
      this.updateUserProfile(fromUser.uid, {
        friends: [...(fromUser.friends || []), request.toUserId]
      }),
      this.updateUserProfile(toUser.uid, {
        friends: [...(toUser.friends || []), request.fromUserId]
      }),
      updateDoc(requestRef, { status: 'accepted' })
    ])

    console.log(`✅ Zaproszenie zaakceptowane: ${fromUser.displayName} i ${toUser.displayName} są teraz znajomymi`)
  },

  async rejectFriendRequest(requestId: string): Promise<void> {
    const requestRef = doc(db, 'friendRequests', requestId)
    await updateDoc(requestRef, { status: 'rejected' })
    console.log('📭 Zaproszenie odrzucone')
  },

  async removeFriend(userId: string, friendId: string): Promise<void> {
    const user = await this.findUserById(userId)
    const friend = await this.findUserById(friendId)

    if (!user || !friend) {
      throw new Error('Nie znaleziono użytkowników')
    }

    await Promise.all([
      this.updateUserProfile(user.uid, {
        friends: user.friends?.filter((id: string) => id !== friendId) || []
      }),
      this.updateUserProfile(friend.uid, {
        friends: friend.friends?.filter((id: string) => id !== userId) || []
      })
    ])

    console.log(`👋 ${user.displayName} usunął ${friend.displayName} ze znajomych`)
  },

  async getFriends(userId: string): Promise<UserProfile[]> {
    const user = await this.findUserById(userId)
    if (!user) return []

    const friendIds = user.friends || []
    if (friendIds.length === 0) return []

    const friendsPromises = friendIds.map(id => this.findUserById(id))
    const friends = await Promise.all(friendsPromises)
    
    return friends.filter(Boolean) as UserProfile[]
  },

  async getFriendRequests(userId: string): Promise<(FriendRequest & { fromUserProfile?: UserProfile })[]> {
    const requestsQuery = query(
      collection(db, 'friendRequests'),
      where('toUserId', '==', userId),
      where('status', '==', 'pending')
    )
    const snapshot = await getDocs(requestsQuery)
    
    const requests = await Promise.all(
      snapshot.docs.map(async (doc) => {
        const request = { id: doc.id, ...doc.data() } as FriendRequest
        const fromUserProfile = await this.findUserById(request.fromUserId)
        return { ...request, fromUserProfile }
      })
    )
    
    console.log(`📨 Znaleziono ${requests.length} zaproszeń dla użytkownika ${userId}`)
    return requests
  },

  subscribeToFriends(userId: string, callback: (friends: UserProfile[]) => void) {
    const userRef = doc(db, 'users', userId)
    
    return onSnapshot(userRef, async (doc) => {
      if (!doc.exists()) {
        callback([])
        return
      }
      
      const user = doc.data()
      const friendIds = user.friends || []
      
      if (friendIds.length === 0) {
        callback([])
        return
      }
      
      const friends = await Promise.all(friendIds.map(id => this.findUserById(id)))
      callback(friends.filter(Boolean) as UserProfile[])
    })
  }
}

export default userService-e 

=== ./src/lib/utils.ts ===
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}-e 

=== ./src/lib/firebase-search-service.ts ===
import { 
  collection, 
  query, 
  where, 
  getDocs,
  limit
} from 'firebase/firestore'
import { db } from '@/lib/firebase'

export interface SearchableUser {
  uid: string
  email: string
  displayName: string
  firstName: string
  lastName: string
  avatarUrl?: string
  level: number
  streak: number
  currentMood?: number
}

export const firebaseSearchService = {
  async searchUsers(searchTerm: string, currentUserId: string): Promise<SearchableUser[]> {
    try {
      if (!searchTerm.trim() || searchTerm.length < 2) {
        return []
      }

      console.log(`🔍 Szukam: "${searchTerm}"`)

      const usersRef = collection(db, 'users')
      
      // 3 zapytania do Firebase
      const displayNameQuery = query(
        usersRef,
        where('displayName', '>=', searchTerm),
        where('displayName', '<=', searchTerm + '\uf8ff'),
        limit(10)
      )

      const firstNameQuery = query(
        usersRef,
        where('firstName', '>=', searchTerm),
        where('firstName', '<=', searchTerm + '\uf8ff'),
        limit(10)
      )

      const emailQuery = query(
        usersRef,
        where('email', '>=', searchTerm),
        where('email', '<=', searchTerm + '\uf8ff'), 
        limit(10)
      )

      const [displayNameSnapshot, firstNameSnapshot, emailSnapshot] = await Promise.all([
        getDocs(displayNameQuery),
        getDocs(firstNameQuery),
        getDocs(emailQuery)
      ])

      // Połącz wyniki i usuń duplikaty
      const allResults = new Map()

      const processSnapshot = (snapshot: any) => {
        snapshot.forEach((doc: any) => {
          const userData = doc.data()
          if (userData.uid !== currentUserId) {
            allResults.set(doc.id, {
              uid: doc.id,
              email: userData.email || '',
              displayName: userData.displayName || '',
              firstName: userData.firstName || '',
              lastName: userData.lastName || '',
              avatarUrl: userData.avatarUrl,
              level: userData.level || 1,
              streak: userData.streak || 0,
              currentMood: userData.currentMood
            })
          }
        })
      }

      processSnapshot(displayNameSnapshot)
      processSnapshot(firstNameSnapshot)  
      processSnapshot(emailSnapshot)

      const results = Array.from(allResults.values())
      
      console.log(`✅ Znaleziono ${results.length} użytkowników`)
      return results.slice(0, 10)

    } catch (error) {
      console.error('❌ Błąd wyszukiwania Firebase:', error)
      return []
    }
  },

  async getAllUsers(currentUserId: string): Promise<SearchableUser[]> {
    try {
      const usersRef = collection(db, 'users')
      const snapshot = await getDocs(usersRef)
      
      const users: SearchableUser[] = []
      snapshot.forEach((doc) => {
        const userData = doc.data()
        if (userData.uid !== currentUserId) {
          users.push({
            uid: doc.id,
            email: userData.email || '',
            displayName: userData.displayName || '',
            firstName: userData.firstName || '',
            lastName: userData.lastName || '',
            avatarUrl: userData.avatarUrl,
            level: userData.level || 1,
            streak: userData.streak || 0,
            currentMood: userData.currentMood,
          })
        }
      })
      
      return users
    } catch (error) {
      console.error('Błąd pobierania użytkowników:', error)
      return []
    }
  }
}-e 

=== ./src/lib/security.ts ===
// src/lib/security.ts
class SecurityConfig {
  private static validateEnvironment() {
    const requiredEnvVars = [
      'NEXT_PUBLIC_FIREBASE_API_KEY',
      'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN', 
      'NEXT_PUBLIC_FIREBASE_PROJECT_ID',
      'NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET',
      'NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID',
      'NEXT_PUBLIC_FIREBASE_APP_ID'
    ];

    const missing = requiredEnvVars.filter(varName => !process.env[varName]);
    
    if (missing.length > 0) {
      throw new Error(`Missing required environment variables: ${missing.join(', ')}`);
    }

    console.log('✅ Environment variables validated successfully');
  }

  static ensureSecureConfig() {
    if (typeof window !== 'undefined') {
      this.validateEnvironment();
    }
  }
}

// Initialize security on app start
SecurityConfig.ensureSecureConfig();

export { SecurityConfig };-e 

=== ./src/lib/streak-service.ts ===
// src/lib/streak-service.ts
export class StreakService {
  static calculateAdvancedStreak(entries: MoodEntry[]): {
    currentStreak: number
    longestStreak: number
    perfectMonth: boolean
  } {
    if (entries.length === 0) {
      return { currentStreak: 0, longestStreak: 0, perfectMonth: false }
    }

    // Sort entries by date
    const sorted = [...entries].sort((a, b) => 
      b.timestamp.getTime() - a.timestamp.getTime()
    )

    let currentStreak = 0
    let longestStreak = 0
    let tempStreak = 0
    let currentDate = new Date()
    currentDate.setHours(0, 0, 0, 0)

    // Check current streak
    for (let i = 0; i < sorted.length; i++) {
      const entryDate = new Date(sorted[i].timestamp)
      entryDate.setHours(0, 0, 0, 0)

      if (entryDate.getTime() === currentDate.getTime()) {
        currentStreak++
        tempStreak++
        currentDate.setDate(currentDate.getDate() - 1)
      } else {
        break
      }
    }

    // Calculate longest streak
    tempStreak = 1
    for (let i = 1; i < sorted.length; i++) {
      const current = new Date(sorted[i].timestamp)
      const previous = new Date(sorted[i-1].timestamp)
      
      current.setHours(0, 0, 0, 0)
      previous.setHours(0, 0, 0, 0)

      const diffDays = (current.getTime() - previous.getTime()) / (1000 * 60 * 60 * 24)
      
      if (diffDays === 1) {
        tempStreak++
      } else {
        longestStreak = Math.max(longestStreak, tempStreak)
        tempStreak = 1
      }
    }
    longestStreak = Math.max(longestStreak, tempStreak)

    // Check perfect month (entries for every day of current month)
    const today = new Date()
    const currentMonth = today.getMonth()
    const currentYear = today.getFullYear()
    
    const monthEntries = entries.filter(entry => {
      const entryDate = new Date(entry.timestamp)
      return entryDate.getMonth() === currentMonth && 
             entryDate.getFullYear() === currentYear
    })

    const uniqueDays = new Set(
      monthEntries.map(entry => 
        new Date(entry.timestamp).toDateString()
      )
    )

    const daysInMonth = new Date(currentYear, currentMonth + 1, 0).getDate()
    const perfectMonth = uniqueDays.size >= daysInMonth

    return {
      currentStreak,
      longestStreak,
      perfectMonth
    }
  }
}-e 

=== ./src/lib/firebase-admin.ts ===
// lib/firebase-admin.ts
import { initializeApp, getApps, cert } from 'firebase-admin/app'
import { getAuth } from 'firebase-admin/auth'

const serviceAccount = {
  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,
  clientEmail: process.env.FIREBASE_ADMIN_CLIENT_EMAIL,
  privateKey: process.env.FIREBASE_ADMIN_PRIVATE_KEY?.replace(/\\n/g, '\n')
}

if (!getApps().length) {
  initializeApp({
    credential: cert(serviceAccount)
  })
}

export const auth = getAuth()-e 

=== ./src/lib/ai-storage.js ===
// Prosty system zapisywania odpowiedzi AI na ten sam dzień
const AI_STORAGE_KEY = 'ai_insights_data'

interface MoodData {
  mood: number
  streak: number
  trend: number
  consistency: number
  averageMood: number
  level: number
  entriesCount: number
}

interface AIStorageData {
  date: string
  moodData: MoodData
  aiResponse: any
  timestamp: string
}

export const saveAIResponse = (moodData: MoodData, aiResponse: any): void => {
  if (typeof window === 'undefined') return
  
  const today = new Date().toDateString()
  const data: AIStorageData = {
    date: today,
    moodData: {
      mood: moodData.mood || 50,
      streak: moodData.streak || 0,
      trend: moodData.trend || 0,
      consistency: moodData.consistency || 50,
      averageMood: moodData.averageMood || 50,
      level: moodData.level || 1,
      entriesCount: moodData.entriesCount || 0
    },
    aiResponse: aiResponse,
    timestamp: new Date().toISOString()
  }
  
  try {
    localStorage.setItem(AI_STORAGE_KEY, JSON.stringify(data))
  } catch (error) {
    console.error('Error saving AI response to localStorage:', error)
  }
}

export const getSavedAIResponse = (currentMoodData: MoodData): any => {
  if (typeof window === 'undefined') return null
  
  try {
    const saved = localStorage.getItem(AI_STORAGE_KEY)
    if (!saved) return null
    
    const data: AIStorageData = JSON.parse(saved)
    const today = new Date().toDateString()
    
    // Sprawdź czy to z dzisiaj i czy kluczowe dane się zgadzają
    if (data.date === today && 
        data.moodData.mood === (currentMoodData.mood || 50) &&
        data.moodData.streak === (currentMoodData.streak || 0) &&
        data.moodData.level === (currentMoodData.level || 1)) {
      return data.aiResponse
    }
    
    return null
  } catch (error) {
    console.error('Error reading saved AI response:', error)
    return null
  }
}

export const clearAIResponse = (): void => {
  if (typeof window === 'undefined') return
  try {
    localStorage.removeItem(AI_STORAGE_KEY)
  } catch (error) {
    console.error('Error clearing AI response:', error)
  }
}

// Dodatkowa funkcja do sprawdzania czy mamy zapisaną odpowiedź
export const hasValidAIResponse = (currentMoodData: MoodData): boolean => {
  return getSavedAIResponse(currentMoodData) !== null
}-e 

=== ./src/lib/auth-service.ts ===
// src/lib/auth-service.ts - POPRAWIONA WERSJA
import { 
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  sendPasswordResetEmail,
  updateProfile,
  UserCredential
} from 'firebase/auth'
import { doc, setDoc } from 'firebase/firestore'
import { auth, db } from './firebase'
import userService from './user-service' // 👈 DODAJEMY IMPORT

export interface UserData {
  uid: string
  email: string
  firstName: string
  lastName: string
  currentMask: string
  level: number
  xp: number
  streak: number
  unlockedMasks: string[]
  createdAt: Date
  role: 'user' | 'admin'
}

export const authService = {
  async register(
    email: string, 
    password: string, 
    userData: { firstName: string; lastName: string }
  ): Promise<UserCredential> {
    try {
      const userCredential = await createUserWithEmailAndPassword(auth, email, password)
      
      await updateProfile(userCredential.user, {
        displayName: `${userData.firstName} ${userData.lastName}`
      })

      // 👇 DODAJEMY AUTOMATYCZNE WYKRYWANIE ADMINA
      const isAdmin = email.endsWith('@admin.com') || email.endsWith('@spokojwglowie.pl')
      const userRole: 'user' | 'admin' = isAdmin ? 'admin' : 'user'

      // Zapisz dane użytkownika w Firestore
      const userDoc: UserData = {
        uid: userCredential.user.uid,
        email: email,
        firstName: userData.firstName,
        lastName: userData.lastName,
        currentMask: 'calm',
        level: 1,
        xp: 0,
        streak: 0,
        unlockedMasks: ['calm'],
        createdAt: new Date(), // 👈 DODAJEMY PRZECINEK!
        role: userRole
      }

      await setDoc(doc(db, 'users', userCredential.user.uid), userDoc)
      
      console.log(`✅ Użytkownik zarejestrowany z rolą: ${userRole}`)
      return userCredential
      
    } catch (error) {
      console.error('Błąd rejestracji:', error)
      throw error
    }
  },

  async login(email: string, password: string): Promise<UserCredential> {
    try {
      return await signInWithEmailAndPassword(auth, email, password)
    } catch (error) {
      console.error('Błąd logowania:', error)
      throw error
    }
  },

  async logout(): Promise<void> {
    try {
      await signOut(auth)
    } catch (error) {
      console.error('Błąd wylogowania:', error)
      throw error
    }
  },

  // 👇 DODAJEMY NOWE FUNKCJE
  async isUserAdmin(uid: string): Promise<boolean> {
    try {
      const userData = await userService.getUserData(uid)
      return userData?.role === 'admin'
    } catch (error) {
      console.error('Błąd sprawdzania roli:', error)
      return false
    }
  },

  async getUserRole(uid: string): Promise<'user' | 'admin' | null> {
    try {
      const userData = await userService.getUserData(uid)
      return userData?.role || null
    } catch (error) {
      console.error('Błąd pobierania roli:', error)
      return null
    }
  }
}

export interface UserData {
  uid: string
  email: string
  firstName: string
  lastName: string
  currentMask: string
  level: number
  xp: number
  streak: number
  unlockedMasks: string[]
  createdAt: Date
  role: 'user' | 'admin'
  // 👇 DODAJEMY NOWE POLA
  moodHistory?: MoodEntry[]
  currentMood?: number
  lastMoodUpdate?: Date
}

export interface MoodEntry {
  date: string // ISO date string "2024-01-15"
  mood: number // 0-100
  timestamp: any // Firestore timestamp
  note?: string // Opcjonalna notatka
}


export default authService-e 

=== ./src/lib/chat-service.ts ===
import { 
  collection, 
  doc, 
  getDoc, 
  getDocs, 
  query, 
  where, 
  orderBy, 
  limit,
  addDoc,
  updateDoc,
  onSnapshot,
  serverTimestamp,
  Timestamp
} from 'firebase/firestore'
import { db } from '@/lib/firebase'

export interface ChatMessage {
  id: string
  conversationId: string
  senderId: string
  receiverId: string
  content: string
  timestamp: Date
  read: boolean
  type: 'text' | 'image' | 'system'
}

export interface Conversation {
  id: string
  participants: string[]
  lastMessage?: string
  lastMessageTime: Date
  unreadCount: number
  participantProfiles?: any[] // Dane użytkowników w konwersacji
}

export const chatService = {
  // Utwórz nową konwersację
  async createConversation(user1Id: string, user2Id: string): Promise<string> {
    const participants = [user1Id, user2Id].sort()
    const conversationId = participants.join('_')
    
    const conversationRef = doc(db, 'conversations', conversationId)
    const conversationSnap = await getDoc(conversationRef)
    
    if (!conversationSnap.exists()) {
      await updateDoc(conversationRef, {
        participants,
        lastMessageTime: serverTimestamp(),
        createdAt: serverTimestamp()
      })
    }
    
    return conversationId
  },

  // Wyślij wiadomość
  async sendMessage(conversationId: string, senderId: string, receiverId: string, content: string): Promise<void> {
    const messageData = {
      conversationId,
      senderId,
      receiverId,
      content: content.trim(),
      timestamp: serverTimestamp(),
      read: false,
      type: 'text'
    }

    // Dodaj wiadomość
    await addDoc(collection(db, 'messages'), messageData)
    
    // Aktualizuj konwersację
    const conversationRef = doc(db, 'conversations', conversationId)
    await updateDoc(conversationRef, {
      lastMessage: content,
      lastMessageTime: serverTimestamp()
    })
  },

  // Pobierz konwersacje użytkownika
  async getConversations(userId: string): Promise<Conversation[]> {
    const conversationsQuery = query(
      collection(db, 'conversations'),
      where('participants', 'array-contains', userId),
      orderBy('lastMessageTime', 'desc')
    )
    
    const snapshot = await getDocs(conversationsQuery)
    const conversations: Conversation[] = []

    for (const doc of snapshot.docs) {
      const data = doc.data()
      const conversation: Conversation = {
        id: doc.id,
        participants: data.participants,
        lastMessage: data.lastMessage,
        lastMessageTime: data.lastMessageTime?.toDate() || new Date(),
        unreadCount: 0
      }

      // Pobierz nieprzeczytane wiadomości
      const unreadQuery = query(
        collection(db, 'messages'),
        where('conversationId', '==', doc.id),
        where('receiverId', '==', userId),
        where('read', '==', false)
      )
      const unreadSnapshot = await getDocs(unreadQuery)
      conversation.unreadCount = unreadSnapshot.size

      conversations.push(conversation)
    }

    return conversations
  },

  // Pobierz wiadomości z konwersacji
  async getMessages(conversationId: string, limitCount: number = 50): Promise<ChatMessage[]> {
    const messagesQuery = query(
      collection(db, 'messages'),
      where('conversationId', '==', conversationId),
      orderBy('timestamp', 'desc'),
      limit(limitCount)
    )
    
    const snapshot = await getDocs(messagesQuery)
    const messages: ChatMessage[] = snapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data(),
      timestamp: doc.data().timestamp?.toDate() || new Date()
    } as ChatMessage)).reverse()

    return messages
  },

  // Oznacz wiadomości jako przeczytane
  async markMessagesAsRead(conversationId: string, userId: string): Promise<void> {
    const unreadQuery = query(
      collection(db, 'messages'),
      where('conversationId', '==', conversationId),
      where('receiverId', '==', userId),
      where('read', '==', false)
    )
    
    const snapshot = await getDocs(unreadQuery)
    const updatePromises = snapshot.docs.map(doc => 
      updateDoc(doc.ref, { read: true })
    )
    
    await Promise.all(updatePromises)
  },

  // Real-time subscription do konwersacji
  subscribeToConversations(userId: string, callback: (conversations: Conversation[]) => void) {
    const conversationsQuery = query(
      collection(db, 'conversations'),
      where('participants', 'array-contains', userId),
      orderBy('lastMessageTime', 'desc')
    )
    
    return onSnapshot(conversationsQuery, async (snapshot) => {
      const conversations: Conversation[] = await Promise.all(
        snapshot.docs.map(async (doc) => {
          const data = doc.data()
          
          const unreadQuery = query(
            collection(db, 'messages'),
            where('conversationId', '==', doc.id),
            where('receiverId', '==', userId),
            where('read', '==', false)
          )
          const unreadSnapshot = await getDocs(unreadQuery)
          
          return {
            id: doc.id,
            participants: data.participants,
            lastMessage: data.lastMessage,
            lastMessageTime: data.lastMessageTime?.toDate() || new Date(),
            unreadCount: unreadSnapshot.size
          }
        })
      )
      
      callback(conversations)
    })
  },

  // Real-time subscription do wiadomości
  subscribeToMessages(conversationId: string, callback: (messages: ChatMessage[]) => void) {
    const messagesQuery = query(
      collection(db, 'messages'),
      where('conversationId', '==', conversationId),
      orderBy('timestamp', 'asc')
    )
    
    return onSnapshot(messagesQuery, (snapshot) => {
      const messages: ChatMessage[] = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data(),
        timestamp: doc.data().timestamp?.toDate() || new Date()
      } as ChatMessage))
      
      callback(messages)
    })
  },

  // Sprawdź czy konwersacja istnieje
  async getConversationBetweenUsers(user1Id: string, user2Id: string): Promise<string | null> {
    const participants = [user1Id, user2Id].sort()
    const conversationId = participants.join('_')
    
    const conversationRef = doc(db, 'conversations', conversationId)
    const conversationSnap = await getDoc(conversationRef)
    
    return conversationSnap.exists() ? conversationId : null
  }
}-e 

